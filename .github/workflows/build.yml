name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build & Test on ${{ matrix.OS_NAME }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            OS_NAME: win-x64
          - os: ubuntu-latest
            OS_NAME: linux-x64
          - os: macos-latest
            OS_NAME: osx-x64
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --logger:"console;verbosity=normal"

      - name: Pack
        run: dotnet pack -c Release

      - name: Publish self-contained DxFeed.Graal.Net.Tools
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               ./publish_tools.sh ${{ matrix.OS_NAME }}
          elif [ "$RUNNER_OS" == "Windows" ]; then
               ./publish_tools.cmd ${{ matrix.OS_NAME }}
          elif [ "$RUNNER_OS" == "macOS" ]; then
               ./publish_tools.sh ${{ matrix.OS_NAME }}
               ./publish_tools.sh osx-arm64
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi
        shell: bash

  release:
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x

      - name: Pack
        run: dotnet pack -c Release -o artifacts/Packages

      - name: Upload NuGet
        if: startsWith(github.event.ref, 'refs/tags/')
        run: |
          nuget push artifacts/Packages/DxFeed.Graal.Net.${{ github.ref_name }}.nupkg \
          -Source ${{ secrets.JFROG_PATH }}/${{ github.ref_name }} \
          -ApiKey ${{ secrets.JFROG_API_KEY }}
        shell: bash

# ToDo Create a reusable workflow and extract uploading artifacts to a separate flow.
#      - name: Upload DxFeed.Graal.Net.Tools
#        if: github.event_name == 'workflow_dispatch'
#        uses: actions/upload-artifact@v3
#        with:
#          name: DxFeed.Graal.Net.Tools-self-contained-${{ matrix.OS_NAME }}
#          path: |
#            artifacts/Publish/${{ matrix.OS_NAME }}/
#
#      - name: Upload DxFeed.Graal.Net.Tools for macOS Apple Silicon
#        if: github.event_name == 'workflow_dispatch' && matrix.os == 'macOS-latest'
#        uses: actions/upload-artifact@v3
#        with:
#          name: DxFeed.Graal.Net.Tools-self-contained-osx-arm64
#          path: |
#            artifacts/Publish/osx-arm64
