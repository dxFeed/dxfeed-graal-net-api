{
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Builder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Builder.html",
    "title": "Class DXEndpoint.Builder | dxFeed Graal .NET API",
    "keywords": "Class DXEndpoint.Builder Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Builder class for DXEndpoint that supports additional configuration properties. Porting a Java class com.dxfeed.api.DXEndpoint.Builder. For more details see Javadoc. Default properties file The Build() method tries to load the default property file for the Feed, OnDemandFeed and Publisher role. The default properties file is loaded only if there are no system properties (SystemProperty) or user properties (WithProperty(string, string)) set with the same key (DXFeedPropertiesProperty, DXPublisherPropertiesProperty) and the file exists and is readable. This file must be in the Java properties file format. Endpoint name If no endpoint name has been specified (WithName(string)), the default name will be used. The default name includes a counter that increments each time an endpoint is created (\"qdnet\", \"qdnet-1\", etc.). To get the name of the created endpoint, call the GetName() method. Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. public class DXEndpoint.Builder Inheritance object DXEndpoint.Builder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Build() Builds DXEndpoint instance. This method tries to load default properties file. public DXEndpoint Build() Returns DXEndpoint The created DXEndpoint. Exceptions JavaException If the error occurred on the java side. SupportsProperty(string) Checks if the corresponding property key is supported. public bool SupportsProperty(string key) Parameters key string The name of the property. Returns bool Returns true if the corresponding property key is supported; otherwise, false. Exceptions ArgumentNullException If the key is null. WithName(string) Changes name that is used to distinguish multiple DXEndpoint in the same in logs and in other diagnostic means. This is a shortcut for WithProperty(DXEndpoint.NameProperty, name). public DXEndpoint.Builder WithName(string name) Parameters name string The endpoint name. Returns DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions ArgumentNullException If the name is null. WithProperties(IReadOnlyDictionary<string, string>) Sets the specified properties from the provided key-value collection. Unsupported properties are ignored. public DXEndpoint.Builder WithProperties(IReadOnlyDictionary<string, string> properties) Parameters properties IReadOnlyDictionary<string, string> The key-value collection. Returns DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions ArgumentNullException If key or value inside the properties is null. WithProperty(KeyValuePair<string, string>) Sets the specified property. Unsupported properties are ignored. public DXEndpoint.Builder WithProperty(KeyValuePair<string, string> kvp) Parameters kvp KeyValuePair<string, string> The key-value pair. Returns DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions ArgumentNullException If key or value is null. WithProperty(string, string) Sets the specified property. Unsupported properties are ignored. public DXEndpoint.Builder WithProperty(string key, string value) Parameters key string The name of the property. value string The value of the property. Returns DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions ArgumentNullException If key or value is null. WithRole(Role) Sets role for the created DXEndpoint. Default role is Feed. public DXEndpoint.Builder WithRole(DXEndpoint.Role role) Parameters role DXEndpoint.Role The endpoint role. Returns DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions ArgumentException If the role does not exist."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Role.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Role.html",
    "title": "Enum DXEndpoint.Role | dxFeed Graal .NET API",
    "keywords": "Enum DXEndpoint.Role Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll A list of endpoint roles. public enum DXEndpoint.Role Fields Feed = 0 Feed endpoint connects to the remote data feed provider and is optimized for real-time or delayed data processing (this is a default role). GetFeed() method returns feed object that subscribes to the remote data feed provider and receives events from it. When event processing threads cannot keep up (don't have enough CPU time), data is dynamically conflated to minimize latency between received events and their processing time. LocalHub = 5 LocalHub endpoint is a local hub without ability to establish network connections. Events that are published via GetPublisher() are delivered to local GetFeed() only. OnDemandFeed = 1 OnDemandFeed endpoint is similar to Feed, but it is designed to be used with OnDemandService for historical data replay only. Publisher = 3 Publisher endpoint connects to the remote publisher hub (also known as multiplexor) or creates a publisher on the local host. GetPublisher() method returns a publisher object that publishes events to all connected feeds. StreamFeed = 2 StreamFeed endpoint is similar to Feed and also connects to the remote data feed provider, is designed for bulk parsing of data from files. GetFeed() method returns feed object that subscribes to the data from the opened files and receives events from them. Events from the files are not conflated, are not skipped, and are processed as fast as possible. StreamPublisher = 4 StreamPublisher endpoint is similar to Publisher and also connects to the remote publisher hub, but is designed for bulk publishing of data. GetPublisher() method returns a publisher object that publishes events to all connected feeds. Published events are not conflated, are not skipped, and are processed as fast as possible."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.State.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.State.html",
    "title": "Enum DXEndpoint.State | dxFeed Graal .NET API",
    "keywords": "Enum DXEndpoint.State Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll A list of endpoint states. public enum DXEndpoint.State Fields Closed = 3 Endpoint was Close(). Connected = 2 The connection to remote endpoint is established. Connecting = 1 The Connect(string) method was called to establish connection to remove endpoint, but connection is not actually established yet or was lost. NotConnected = 0 Endpoint was created by is not connected to remote endpoints."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.StateChangeListener.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.StateChangeListener.html",
    "title": "Delegate DXEndpoint.StateChangeListener | dxFeed Graal .NET API",
    "keywords": "Delegate DXEndpoint.StateChangeListener Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Notifies a change in the state of this endpoint. public delegate void DXEndpoint.StateChangeListener(DXEndpoint.State oldState, DXEndpoint.State newState) Parameters oldState DXEndpoint.State The old state of endpoint. newState DXEndpoint.State The new state of endpoint."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.html",
    "title": "Class DXEndpoint | dxFeed Graal .NET API",
    "keywords": "Class DXEndpoint Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Manages network connections to DXFeed or DXPublisher. Porting a Java class com.dxfeed.api.DXEndpoint. For more details see Javadoc. There are ready-to-use singleton instances that are available with GetInstance() and GetInstance(Role) methods as wel as factory methods Create() and Create(Role), and a number of configuration methods. Advanced properties can be configured with DXEndpoint.Builder (creates with NewBuilder()). Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. Lifetimes This class will not be garbage-collected and its resources will not be freed until Dispose(), Close() or CloseAndAwaitTermination() methods are called. Calling these methods ensures that instance can be safely garbage-collected when all outside references to it are lost. If a reference to an instance of this class is lost before calling the above methods, it causes a memory/resource leak. This behavior was implemented intentionally. Inner instances of DXFeed and DXPublisher have the same lifetime as DXEndpoint. DXFeed and DXPublisher have no public resource release methods, and exist as long as DXEndpoint exists. public sealed class DXEndpoint : IDisposable Inheritance object DXEndpoint Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples DXFeed feed = DXEndpoint.Create() .User(\"demo\").Password(\"demo\") .Connect(\"demo.dxfeed.com:7300\") .GetFeed(); Fields DXEndpointEventTimeProperty Set this property to true to enable EventTime support. By default, the endpoint does not support event time. The event time is available only when the corresponding DXEndpoint is created with this property and the data source has embedded event times. This is typically true only for data events that are read from historical tape files. Events that are coming from a network connections do not have an embedded event time information and event time is not available for them anyway. public const string DXEndpointEventTimeProperty = \"dxendpoint.eventTime\" Field Value string DXEndpointStoreEverythingProperty Set this property to to store all ILastingEvent and ILastingEvent events even when there is no subscription on them. By default, the endpoint stores only events from subscriptions. It works in the same way both for DXFeed and DXPublisher. Use this property with extreme care, since API does not currently provide any means to remove those events from the storage and there might be an effective memory leak if the spaces of symbols on which events are published grows without bound. public const string DXEndpointStoreEverythingProperty = \"dxendpoint.storeEverything\" Field Value string DXFeedAddressProperty Defines default connection address for an endpoint with role Feed or OnDemandFeed. Connection is established to this address by role Feed as soon as endpoint is created. By default, without this property, connection is not established until Connect(string) is invoked. Credentials for access to premium services may be configured with DXFeedUserProperty and DXFeedPasswordProperty. public const string DXFeedAddressProperty = \"dxfeed.address\" Field Value string See Also WithProperty(string, string) DXFeedAggregationPeriodProperty Defines data aggregation period an endpoint with role Feed that limits the rate of data notifications. For example, setting the value of this property to \"0.1s\" limits notification to once every 100ms (at most 10 per second). public const string DXFeedAggregationPeriodProperty = \"dxfeed.aggregationPeriod\" Field Value string See Also WithProperty(string, string) DXFeedPasswordProperty Defines default password for an endpoint with role Feed or OnDemandFeed. public const string DXFeedPasswordProperty = \"dxfeed.password\" Field Value string See Also Password(string) DXFeedPropertiesProperty Defines path to a file with properties for an endpoint with role Feed or OnDemandFeed. This file must be in the Java properties file format. This property can also be set using SetProperty(string, string), as the default property for all instances DXEndpoint with Feed or or OnDemandFeed role. When the path to this properties file not provided (SetProperty(string, string) and WithProperty(string, string)), the file \"dxfeed.properties\" loaded from current runtime directory. It means that the corresponding file can be placed into the current directory with any need to specify additional properties. public const string DXFeedPropertiesProperty = \"dxfeed.properties\" Field Value string See Also WithProperty(string, string) DXFeedThreadPoolSizeProperty Defines thread pool size for an endpoint with role Feed. By default, the thread pool size is equal to the number of available processors. public const string DXFeedThreadPoolSizeProperty = \"dxfeed.threadPoolSize\" Field Value string See Also WithProperty(string, string) DXFeedUserProperty Defines default user name for an endpoint with role Feed or OnDemandFeed. public const string DXFeedUserProperty = \"dxfeed.user\" Field Value string See Also User(string) DXFeedWildcardEnableProperty Set this property to true to turns on wildcard support. By default, the endpoint does not support wildcards. This property is needed for WildcardSymbol support and for the use of \"tape:...\" address in DXPublisher. public const string DXFeedWildcardEnableProperty = \"dxfeed.wildcard.enable\" Field Value string See Also WithProperty(string, string) DXPublisherAddressProperty Defines default connection address for an endpoint with role Publisher. Connection is established to this address as soon as endpoint is created. By default, connection is not established until Connect(string) is invoked. public const string DXPublisherAddressProperty = \"dxpublisher.address\" Field Value string See Also WithProperty(string, string) DXPublisherPropertiesProperty Defines path to a file with properties for an endpoint with role Publisher. This file must be in the Java properties file format. This property can also be set using SetProperty(string, string), as the default property for all instances DXEndpoint with Publisher role. When the path to this properties file not provided (SetProperty(string, string) and WithProperty(string, string)), the file \"dxpublisher.properties\" loaded from current runtime directory. It means that the corresponding file can be placed into the current directory with any need to specify additional properties. public const string DXPublisherPropertiesProperty = \"dxpublisher.properties\" Field Value string See Also WithProperty(string, string) DXPublisherThreadPoolSizeProperty Defines thread pool size for an endpoint with role Publisher. By default, the thread pool size is equal to the number of available processors. public const string DXPublisherThreadPoolSizeProperty = \"dxpublisher.threadPoolSize\" Field Value string See Also WithProperty(string, string) DXSchemeEnabledPropertyPrefix Defines whether a specified field from the scheme should be enabled instead of it's default behaviour. Use it according to following format: dxscheme.enabled.field_property_name=event_name_mask_glob For example, dxscheme.enabled.TimeNanoPart=Trade enables NanoTimePart internal field only in Trade events. There is a shortcut for turning on nano-time support using DXSchemeNanoTimeProperty. public const string DXSchemeEnabledPropertyPrefix = \"dxscheme.enabled.\" Field Value string DXSchemeNanoTimeProperty Set this property to true to turn on nanoseconds precision business time. By default, this feature is turned off. Business time in most events is available with millisecond precision by default, while Quote events business Time is available with seconds precision. This method provides a higher-level control than turning on individual properties that are responsible for nano-time via DXSchemeEnabledPropertyPrefix. The later can be used to override of fine-time nano-time support for individual fields. Setting this property to true is essentially equivalent to setting: dxscheme.enabled.Sequence=* dxscheme.enabled.TimeNanoPart=* public const string DXSchemeNanoTimeProperty = \"dxscheme.nanoTime\" Field Value string NameProperty Defines property for endpoint name that is used to distinguish multiple endpoints in the same JVM in logs and in other diagnostic means. Use WithProperty(string, string) method. This property is also changed by WithName(string) method. public const string NameProperty = \"name\" Field Value string Methods AddStateChangeListener(StateChangeListener) Adds listener that is notified about changes in GetState() property. Installed listener can be removed with RemoveStateChangeListener(StateChangeListener) method. public void AddStateChangeListener(DXEndpoint.StateChangeListener listener) Parameters listener DXEndpoint.StateChangeListener The listener to add. AwaitNotConnected() Waits while this endpoint DXEndpoint.State becomes NotConnected or Closed. It is a signal that any files that were opened with Connect(\"file:...\") method were finished reading, but not necessary were completely processed by the corresponding subscription listeners. Use CloseAndAwaitTermination() after this method returns to make sure that all processing has completed. This method is blocking. public void AwaitNotConnected() AwaitProcessed() Waits until this endpoint stops processing data (becomes quiescent). This is important when writing data to file via \"tape:...\" connector to make sure that all published data was written before closing this endpoint. This method is blocking. public void AwaitProcessed() Close() Closes this endpoint. All network connection are terminated as with Disconnect() method and no further connections can be established. The endpoint DXEndpoint.State immediately becomes Closed. This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. public void Close() CloseAndAwaitTermination() Closes this endpoint and wait until all pending data processing tasks are completed. This method performs the same actions as close Close(), but also awaits termination of all outstanding data processing tasks. It is designed to be used with StreamFeed role after AwaitNotConnected() method returns to make sure that file was completely processed. This method is blocking. This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. public void CloseAndAwaitTermination() Connect(string) Connects to the specified remote address. Previously established connections are closed if the new address is different from the old one. This method does nothing if address does not change or if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes Connecting otherwise. The address string is provided with the market data vendor agreement. Use \"demo.dxfeed.com:7300\" for a demo quote feed. host:port to establish a TCP/IP connection. :port to listen for a TCP/IP connection with a plain socket connector (good for up to a few hundred of connections). For premium services access credentials must be configured before invocation of Connect(string) method using User(string) and Password(string) methods. This method does not wait until connection actually gets established. The actual connection establishment happens asynchronously after the invocation of this method. However, this method waits until notification about state transition from NotConnected to Connecting gets processed by all DXEndpoint.StateChangeListener that were installed via AddStateChangeListener(StateChangeListener) method. public DXEndpoint Connect(string address) Parameters address string The data source address. Returns DXEndpoint Returns this DXEndpoint. Exceptions ArgumentNullException If address is null. JavaException If address string is malformed. Create() Creates an endpoint with a role Feed. public static DXEndpoint Create() Returns DXEndpoint The created DXEndpoint. Create(Role) Creates an endpoint with a specified DXEndpoint.Role. public static DXEndpoint Create(DXEndpoint.Role role) Parameters role DXEndpoint.Role The specified DXEndpoint.Role. Returns DXEndpoint The created DXEndpoint. Disconnect() Terminates all remote network connections. This method does nothing if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes NotConnected otherwise. This method does not release all resources that are associated with this endpoint. Use Close(), Dispose() or CloseAndAwaitTermination() methods to release all resources. public void Disconnect() DisconnectAndClear() Terminates all remote network connections and clears stored data. This method does nothing if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes NotConnected otherwise. This method does not release all resources that are associated with this endpoint. Use Close(), Dispose() or CloseAndAwaitTermination() methods to release all resources. public void DisconnectAndClear() Dispose() Closes this endpoint and releases all resources used by the current instance of the DXEndpoint class. This is the same as Close(). This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. public void Dispose() GetFeed() Gets DXFeed that is associated with this endpoint. public DXFeed GetFeed() Returns DXFeed The DXFeed. GetInstance() Gets a default application-wide singleton instance of DXEndpoint with a Feed role. Most applications use only a single data-source and should rely on this method to get one. public static DXEndpoint GetInstance() Returns DXEndpoint Returns singleton instance of DXEndpoint. GetInstance(Role) Gets a default application-wide singleton instance of DXEndpoint with a specific DXEndpoint.Role. Most applications use only a single data-source and should rely on this method to get one. public static DXEndpoint GetInstance(DXEndpoint.Role role) Parameters role DXEndpoint.Role The DXEndpoint.Role. Returns DXEndpoint Returns singleton instance of DXEndpoint. GetName() Gets endpoint name. public string GetName() Returns string Returns endpoint name. GetPublisher() Gets DXPublisher that is associated with this endpoint. public DXPublisher GetPublisher() Returns DXPublisher The DXPublisher. GetRole() Gets the DXEndpoint.Role of this endpoint. public DXEndpoint.Role GetRole() Returns DXEndpoint.Role The DXEndpoint.Role. GetState() Gets the DXEndpoint.State of this endpoint. public DXEndpoint.State GetState() Returns DXEndpoint.State The DXEndpoint.State. IsClosed() Gets a value indicating whether if this endpoint is closed. There is a shortcut for GetState() == Closed. public bool IsClosed() Returns bool Returns true if this endpoint is closed. NewBuilder() Creates new DXEndpoint.Builder instance. Use Build() to build an instance of DXEndpoint when all configuration properties were set. public static DXEndpoint.Builder NewBuilder() Returns DXEndpoint.Builder The created DXEndpoint.Builder instance. Password(string) Changes password for this endpoint. This method shall be called before Connect(string) together with User(string) to configure service access credentials. public DXEndpoint Password(string password) Parameters password string The user password. Returns DXEndpoint Returns this DXEndpoint. Exceptions ArgumentNullException If password is null. Reconnect() Terminates all established network connections and initiates connecting again with the same address. The effect of the method is alike to invoking Disconnect() and Connect(string) with the current address, but internal resources used for connections may be reused by implementation. TCP connections with multiple target addresses will try switch to an alternative address, configured reconnect timeouts will apply. Note: The method will not connect endpoint that was not initially connected with Connect(string) method or was disconnected with Disconnect() method. The method initiates a short-path way for reconnecting, so whether observers will have a chance to see an intermediate state NotConnected depends on the implementation. public void Reconnect() RemoveStateChangeListener(StateChangeListener) Removes listener that is notified about changes in GetState() property. It removes the listener that was previously installed with AddStateChangeListener(StateChangeListener) method. public void RemoveStateChangeListener(DXEndpoint.StateChangeListener listener) Parameters listener DXEndpoint.StateChangeListener The listener to remove. User(string) Changes user name for this endpoint. This method shall be called before Connect(string) together with Password(string) to configure service access credentials. public DXEndpoint User(string user) Parameters user string The user name. Returns DXEndpoint Returns this DXEndpoint. Exceptions ArgumentNullException If user is null."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeed.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeed.html",
    "title": "Class DXFeed | dxFeed Graal .NET API",
    "keywords": "Class DXFeed Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Main entry class for dxFeed API. This class is a wrapper for FeedNative. Read it first Javadoc. public class DXFeed Inheritance object DXFeed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSubscription(IEnumerable<Type>) Creates new subscription for a list of event types that is attached to this feed. public DXFeedSubscription CreateSubscription(IEnumerable<Type> eventTypes) Parameters eventTypes IEnumerable<Type> The list of event types. Events types must be implement IEventType and have EventCodeAttribute. Returns DXFeedSubscription The created subscription. Exceptions ArgumentException If one on the specified Type has no EventCodeAttribute. CreateSubscription(params Type[]) Creates new subscription for a list of event types that is attached to this feed. public DXFeedSubscription CreateSubscription(params Type[] eventTypes) Parameters eventTypes Type[] The list of event types. Events types must be implement IEventType and have EventCodeAttribute. Returns DXFeedSubscription The created DXFeedSubscription. Exceptions ArgumentException If one on the specified Type has no EventCodeAttribute. GetInstance() Gets a default application-wide singleton instance of feed. Most applications use only a single data-source and should rely on this method to get one. public static DXFeed GetInstance() Returns DXFeed The DXFeed. GetLastEventAsync<T>(object, CancellationToken) Requests the last event for the specified event type and symbol. This method works only for event types that implement ILastingEvent marker interface. This method requests the data from the the uplink data provider, creates new event of the specified event type, and Result the resulting task with this event. public Task<T?> GetLastEventAsync<T>(object symbol, CancellationToken token = default) where T : ILastingEvent Parameters symbol object The symbol. token CancellationToken The cancellation token. Returns Task<T> The task for the result of the request. Type Parameters T The type of event. GetTimeSeriesAsync<T>(object, long, long, CancellationToken) Requests time series of events for the specified event type, symbol, and a range of time. This method works only for event types that implement ITimeSeriesEvent interface. his method requests the data from the the uplink data provider, creates a list of events of the specified event type, and Result the resulting task with this list. public Task<IEnumerable<T>?> GetTimeSeriesAsync<T>(object symbol, long from, long to, CancellationToken token = default) where T : ITimeSeriesEvent Parameters symbol object The symbol. from long The time, inclusive, to request events from Time. to long The time, inclusive, to request events from Time. Use long.MaxValue to retrieve events without an upper limit on time. token CancellationToken The cancellation token. Returns Task<IEnumerable<T>> The task for the result of the request. Type Parameters T The event type."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeedEventListener.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeedEventListener.html",
    "title": "Delegate DXFeedEventListener | dxFeed Graal .NET API",
    "keywords": "Delegate DXFeedEventListener Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll The listener delegate for receiving events. Invoked when events of type are received. public delegate void DXFeedEventListener(IEnumerable<IEventType> events) Parameters events IEnumerable<IEventType> The collection of received events."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeedSubscription.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeedSubscription.html",
    "title": "Class DXFeedSubscription | dxFeed Graal .NET API",
    "keywords": "Class DXFeedSubscription Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Subscription for a set of symbols and event types. This class is a wrapper for SubscriptionNative. For more details see Javadoc. public sealed class DXFeedSubscription : IObservableSubscription, IDisposable Inheritance object DXFeedSubscription Implements IObservableSubscription IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsClosed Gets a value indicating whether if this subscription is closed. Javadoc. public bool IsClosed { get; } Property Value bool Methods AddEventListener(DXFeedEventListener) Adds listener for events. Event lister can be added only when subscription is not producing any events. The subscription must be either empty (no symbols have been added). This method does nothing if this subscription is closed. public void AddEventListener(DXFeedEventListener listener) Parameters listener DXFeedEventListener The event listener. AddSymbols(IEnumerable<object>) Adds the specified collection of symbols to the set of subscribed symbols. All registered event listeners will receive update on the last events for all newly added symbols. public void AddSymbols(IEnumerable<object> symbols) Parameters symbols IEnumerable<object> The collection of symbols. AddSymbols(params object[]) Adds the specified collection of symbols to the set of subscribed symbols. All registered event listeners will receive update on the last events for all newly added symbols. public void AddSymbols(params object[] symbols) Parameters symbols object[] The collection of symbols. Clear() Clears the set of subscribed symbols. public void Clear() Close() Closes this subscription and makes it permanently detached. public void Close() Dispose() Releases all resources used by the current instance of the DXFeedSubscription class. public void Dispose() GetEventTypes() Gets a set of subscribed event types. The resulting set cannot be modified. Javadoc. public IReadOnlySet<Type> GetEventTypes() Returns IReadOnlySet<Type> Returns a set of subscribed event types. IsContainsEventType(Type) Gets a value indicating whether if this subscription contains the corresponding event type. Javadoc. public bool IsContainsEventType(Type eventType) Parameters eventType Type The event type. Returns bool Returns true if this subscription contains the corresponding event type. RemoveEventListener(DXFeedEventListener) Removes listener for events. public void RemoveEventListener(DXFeedEventListener listener) Parameters listener DXFeedEventListener The event listener. RemoveSymbols(IEnumerable<object>) Removes the specified collection of symbols from the set of subscribed symbols. public void RemoveSymbols(IEnumerable<object> symbols) Parameters symbols IEnumerable<object> The collection of symbols. RemoveSymbols(params object[]) Removes the specified collection of symbols from the set of subscribed symbols. public void RemoveSymbols(params object[] symbols) Parameters symbols object[] The collection of symbols."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXPublisher.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXPublisher.html",
    "title": "Class DXPublisher | dxFeed Graal .NET API",
    "keywords": "Class DXPublisher Namespace DxFeed.Graal.Net.Api Assembly DxFeed.Graal.Net.dll Provides API for publishing of events to local or remote DXFeed. This class is a wrapper for DXPublisherHandle. For more details see Javadoc. public class DXPublisher Inheritance object DXPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetInstance() Gets a default application-wide singleton instance of DXPublisher. public static DXPublisher GetInstance() Returns DXPublisher The DXPublisher. PublishEvents(params IEventType[]) Publishes events to the corresponding feed. If the DXEndpoint of this publisher has Publisher role and it is connected, the published events will be delivered to the remote endpoints. Local GetFeed() will always receive published events. public void PublishEvents(params IEventType[] events) Parameters events IEventType[] The list of events to publish. PublishEvents(IEnumerable<IEventType>) Publishes events to the corresponding feed. If the DXEndpoint of this publisher has Publisher role and it is connected, the published events will be delivered to the remote endpoints. Local GetFeed() will always receive published events. public void PublishEvents(IEnumerable<IEventType> events) Parameters events IEnumerable<IEventType> The collection of events to publish."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IObservableSubscription.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IObservableSubscription.html",
    "title": "Interface IObservableSubscription | dxFeed Graal .NET API",
    "keywords": "Interface IObservableSubscription Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Observable set of subscription symbols for the specific event type. For more details see Javadoc. public interface IObservableSubscription Properties IsClosed Gets a value indicating whether if this subscription is closed. Javadoc. bool IsClosed { get; } Property Value bool Methods GetEventTypes() Gets a set of subscribed event types. The resulting set cannot be modified. Javadoc. IReadOnlySet<Type> GetEventTypes() Returns IReadOnlySet<Type> Returns a set of subscribed event types. IsContainsEventType(Type) Gets a value indicating whether if this subscription contains the corresponding event type. Javadoc. bool IsContainsEventType(Type eventType) Parameters eventType Type The event type. Returns bool Returns true if this subscription contains the corresponding event type."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol-1.html",
    "title": "Class IndexedEventSubscriptionSymbol<T> | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSubscriptionSymbol<T> Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. public class IndexedEventSubscriptionSymbol<T> Type Parameters T The type of event symbol. Inheritance object IndexedEventSubscriptionSymbol<T> Derived IndexedEventSubscriptionSymbol TimeSeriesSubscriptionSymbol<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IndexedEventSubscriptionSymbol(T, IndexedEventSource) Initializes a new instance of the IndexedEventSubscriptionSymbol<T> class with a specified event symbol and source. public IndexedEventSubscriptionSymbol(T eventSymbol, IndexedEventSource source) Parameters eventSymbol T The event symbol. source IndexedEventSource The event source. Exceptions ArgumentNullException If eventSymbol or source are null. Properties EventSymbol Gets event symbol. public T EventSymbol { get; } Property Value T Source Gets indexed event source. public IndexedEventSource Source { get; } Property Value IndexedEventSource Methods Equals(object?) Indicates whether some other indexed event subscription symbol has the same EventSymbol and Source. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol.html",
    "title": "Class IndexedEventSubscriptionSymbol | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSubscriptionSymbol Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. public class IndexedEventSubscriptionSymbol : IndexedEventSubscriptionSymbol<object> Inheritance object IndexedEventSubscriptionSymbol<object> IndexedEventSubscriptionSymbol Inherited Members IndexedEventSubscriptionSymbol<object>.EventSymbol IndexedEventSubscriptionSymbol<object>.Source IndexedEventSubscriptionSymbol<object>.ToString() IndexedEventSubscriptionSymbol<object>.Equals(object) IndexedEventSubscriptionSymbol<object>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IndexedEventSubscriptionSymbol(object, IndexedEventSource) Initializes a new instance of the IndexedEventSubscriptionSymbol class with a specified event symbol and source. public IndexedEventSubscriptionSymbol(object eventSymbol, IndexedEventSource source) Parameters eventSymbol object The event symbol. source IndexedEventSource The event source. Exceptions ArgumentNullException If eventSymbol or source are null."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol-1.html",
    "title": "Class TimeSeriesSubscriptionSymbol<T> | dxFeed Graal .NET API",
    "keywords": "Class TimeSeriesSubscriptionSymbol<T> Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Represents subscription to time-series of events. Instances of this class can be used with DXFeedSubscription to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. public class TimeSeriesSubscriptionSymbol<T> : IndexedEventSubscriptionSymbol<T> Type Parameters T The type of event symbol. Inheritance object IndexedEventSubscriptionSymbol<T> TimeSeriesSubscriptionSymbol<T> Derived TimeSeriesSubscriptionSymbol Inherited Members IndexedEventSubscriptionSymbol<T>.EventSymbol IndexedEventSubscriptionSymbol<T>.Source object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TimeSeriesSubscriptionSymbol(T, DateTimeOffset) Initializes a new instance of the TimeSeriesSubscriptionSymbol<T> class with a specified event symbol and from time in milliseconds since Unix epoch. public TimeSeriesSubscriptionSymbol(T eventSymbol, DateTimeOffset fromTime) Parameters eventSymbol T The event symbol. fromTime DateTimeOffset The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. TimeSeriesSubscriptionSymbol(T, long) Initializes a new instance of the TimeSeriesSubscriptionSymbol<T> class with a specified event symbol and from time in milliseconds since Unix epoch. public TimeSeriesSubscriptionSymbol(T eventSymbol, long fromTime) Parameters eventSymbol T The event symbol. fromTime long The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Properties FromTime Gets subscription time in milliseconds since Unix epoch. public long FromTime { get; } Property Value long Methods Equals(object?) Indicates whether some other time series event subscription symbol has the same EventSymbol. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol.html",
    "title": "Class TimeSeriesSubscriptionSymbol | dxFeed Graal .NET API",
    "keywords": "Class TimeSeriesSubscriptionSymbol Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Represents subscription to time-series of events. Instances of this class can be used with DXFeedSubscription to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. public class TimeSeriesSubscriptionSymbol : TimeSeriesSubscriptionSymbol<object> Inheritance object IndexedEventSubscriptionSymbol<object> TimeSeriesSubscriptionSymbol<object> TimeSeriesSubscriptionSymbol Inherited Members TimeSeriesSubscriptionSymbol<object>.FromTime TimeSeriesSubscriptionSymbol<object>.ToString() TimeSeriesSubscriptionSymbol<object>.Equals(object) TimeSeriesSubscriptionSymbol<object>.GetHashCode() IndexedEventSubscriptionSymbol<object>.EventSymbol IndexedEventSubscriptionSymbol<object>.Source object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TimeSeriesSubscriptionSymbol(object, DateTimeOffset) Initializes a new instance of the TimeSeriesSubscriptionSymbol class with a specified event symbol and from time in milliseconds since Unix epoch. public TimeSeriesSubscriptionSymbol(object eventSymbol, DateTimeOffset fromTime) Parameters eventSymbol object The event symbol. fromTime DateTimeOffset The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. TimeSeriesSubscriptionSymbol(object, long) Initializes a new instance of the TimeSeriesSubscriptionSymbol class with a specified event symbol and from time in milliseconds since Unix epoch. public TimeSeriesSubscriptionSymbol(object eventSymbol, long fromTime) Parameters eventSymbol object The event symbol. fromTime long The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.WildcardSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.WildcardSymbol.html",
    "title": "Class WildcardSymbol | dxFeed Graal .NET API",
    "keywords": "Class WildcardSymbol Namespace DxFeed.Graal.Net.Api.Osub Assembly DxFeed.Graal.Net.dll Represents [wildcard] subscription to all events of the specific event type. The All constant can be added to any DXFeedSubscription instance with AddSymbols(params object[]) method to the effect of subscribing to all possible event symbols. The corresponding subscription will start receiving all published events of the corresponding types. For more details see Javadoc. public class WildcardSymbol Inheritance object WildcardSymbol Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields All Represents [wildcard] subscription to all events of the specific event type. NOTE: Wildcard subscription can create extremely high network and CPU load for certain kinds of high-frequency events like quotes. It requires a special arrangement on the side of upstream data provider and is disabled by default in upstream feed configuration. Make that sure you have adequate resources and understand the impact before using it. It can be used for low-frequency events only (like Forex quotes), because each instance of DXFeedSubscription processes events in a single thread and there is no provision to load-balance wildcard subscription amongst multiple threads. public static readonly WildcardSymbol All Field Value WildcardSymbol ReservedPrefix Symbol prefix that is reserved for wildcard subscriptions. Any subscription starting with \"*\" is ignored with the exception of WildcardSymbol subscription. public const string ReservedPrefix = \"*\" Field Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.html",
    "title": "Namespace DxFeed.Graal.Net.Api.Osub | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Api.Osub Classes IndexedEventSubscriptionSymbol Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. IndexedEventSubscriptionSymbol<T> Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. TimeSeriesSubscriptionSymbol Represents subscription to time-series of events. Instances of this class can be used with DXFeedSubscription to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. TimeSeriesSubscriptionSymbol<T> Represents subscription to time-series of events. Instances of this class can be used with DXFeedSubscription to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. WildcardSymbol Represents [wildcard] subscription to all events of the specific event type. The All constant can be added to any DXFeedSubscription instance with AddSymbols(params object[]) method to the effect of subscribing to all possible event symbols. The corresponding subscription will start receiving all published events of the corresponding types. For more details see Javadoc. Interfaces IObservableSubscription Observable set of subscription symbols for the specific event type. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Api.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.html",
    "title": "Namespace DxFeed.Graal.Net.Api | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Api Classes DXEndpoint Manages network connections to DXFeed or DXPublisher. Porting a Java class com.dxfeed.api.DXEndpoint. For more details see Javadoc. There are ready-to-use singleton instances that are available with GetInstance() and GetInstance(Role) methods as wel as factory methods Create() and Create(Role), and a number of configuration methods. Advanced properties can be configured with DXEndpoint.Builder (creates with NewBuilder()). Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. Lifetimes This class will not be garbage-collected and its resources will not be freed until Dispose(), Close() or CloseAndAwaitTermination() methods are called. Calling these methods ensures that instance can be safely garbage-collected when all outside references to it are lost. If a reference to an instance of this class is lost before calling the above methods, it causes a memory/resource leak. This behavior was implemented intentionally. Inner instances of DXFeed and DXPublisher have the same lifetime as DXEndpoint. DXFeed and DXPublisher have no public resource release methods, and exist as long as DXEndpoint exists. DXEndpoint.Builder Builder class for DXEndpoint that supports additional configuration properties. Porting a Java class com.dxfeed.api.DXEndpoint.Builder. For more details see Javadoc. Default properties file The Build() method tries to load the default property file for the Feed, OnDemandFeed and Publisher role. The default properties file is loaded only if there are no system properties (SystemProperty) or user properties (WithProperty(string, string)) set with the same key (DXFeedPropertiesProperty, DXPublisherPropertiesProperty) and the file exists and is readable. This file must be in the Java properties file format. Endpoint name If no endpoint name has been specified (WithName(string)), the default name will be used. The default name includes a counter that increments each time an endpoint is created (\"qdnet\", \"qdnet-1\", etc.). To get the name of the created endpoint, call the GetName() method. Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. DXFeed Main entry class for dxFeed API. This class is a wrapper for FeedNative. Read it first Javadoc. DXFeedSubscription Subscription for a set of symbols and event types. This class is a wrapper for SubscriptionNative. For more details see Javadoc. DXPublisher Provides API for publishing of events to local or remote DXFeed. This class is a wrapper for DXPublisherHandle. For more details see Javadoc. Enums DXEndpoint.Role A list of endpoint roles. DXEndpoint.State A list of endpoint states. Delegates DXEndpoint.StateChangeListener Notifies a change in the state of this endpoint. DXFeedEventListener The listener delegate for receiving events. Invoked when events of type are received."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.Candle.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.Candle.html",
    "title": "Class Candle | dxFeed Graal .NET API",
    "keywords": "Class Candle Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Candle event with open, high, low, close prices and other information for a specific period. Candles are build with a specified CandlePeriod using a specified CandlePrice type with a data taken from the specified CandleExchange from the specified CandleSession with further details of aggregation provided by CandleAlignment. [EventCode(EventCodeNative.Candle)] public class Candle : ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Inheritance object Candle Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Candle() Initializes a new instance of the Candle class. public Candle() Candle(CandleSymbol) Initializes a new instance of the Candle class with the specified event symbol. public Candle(CandleSymbol eventSymbol) Parameters eventSymbol CandleSymbol The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties AskVolume Gets or sets ask volume in this candle as floating number with fractions. public double AskVolume { get; set; } Property Value double BidVolume Gets or sets bid volume in this candle as floating number with fractions. public double BidVolume { get; set; } Property Value double CandleSymbol Gets or sets candle symbol object. public CandleSymbol? CandleSymbol { get; set; } Property Value CandleSymbol Close Gets or sets the last (close) price of this candle. public double Close { get; set; } Property Value double Count Gets or sets total number of original trade (or quote) events in this candle. public long Count { get; set; } Property Value long EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. public string? EventSymbol { get; set; } Property Value string EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. public long EventTime { get; set; } Property Value long High Gets or sets the maximal (high) price of this candle. public double High { get; set; } Property Value double ImpVolatility Gets or sets implied volatility. public double ImpVolatility { get; set; } Property Value double Index Gets or sets unique per-symbol index of this time and sale event. Time and sale index is composed of Time and Sequence. Changing either time or sequence changes event index. Do not sets this value directly. Change Time and/or Sequence. public long Index { get; set; } Property Value long Low Gets or sets the minimal (low) price of this candle. public double Low { get; set; } Property Value double Open Gets or sets the first (open) price of this candle. public double Open { get; set; } Property Value double OpenInterest Gets or sets open interest as floating number with fractions. public double OpenInterest { get; set; } Property Value double Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long VWAP Gets or sets volume-weighted average price (VWAP) in this candle. Total turnover in this candle can be computed with VWAP * Volume. public double VWAP { get; set; } Property Value double Volume Gets or sets total volume in this candle as floating number with fractions. Total turnover in this candle can be computed with VWAP * Volume. public double Volume { get; set; } Property Value double Methods BaseFieldsToString() Returns string representation of this candle fields. protected string BaseFieldsToString() Returns string The string representation. ToString() Returns string representation of this candle event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.CandleAlignmentId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.CandleAlignmentId.html",
    "title": "Enum CandleAlignment.CandleAlignmentId | dxFeed Graal .NET API",
    "keywords": "Enum CandleAlignment.CandleAlignmentId Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll List of ids CandleAlignment. public enum CandleAlignment.CandleAlignmentId Fields Midnight = 0 Id associated with CandleAlignment.Midnight. Session = 1 Id associated with CandleAlignment.Session."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.html",
    "title": "Class CandleAlignment | dxFeed Graal .NET API",
    "keywords": "Class CandleAlignment Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Candle alignment attribute of CandleSymbol defines how candle are aligned with respect to time. For more details see Javadoc. public class CandleAlignment : ICandleSymbolProperty Inheritance object CandleAlignment Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AttributeKey The attribute key that is used to store the value of CandleAlignment in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"a\". The value that this key shall be set to is equal to the corresponding ToString(). public const string AttributeKey = \"a\" Field Value string Default Default alignment is Midnight. public static readonly CandleAlignment Default Field Value CandleAlignment Midnight Align candles on midnight. public static readonly CandleAlignment Midnight Field Value CandleAlignment Session Align candles on trading sessions. public static readonly CandleAlignment Session Field Value CandleAlignment Properties Id Gets CandleAlignment.CandleAlignmentId associated with this instance. public CandleAlignment.CandleAlignmentId Id { get; } Property Value CandleAlignment.CandleAlignmentId Name Gets full name this CandleAlignment instance. For example, Midnight returns \"Midnight\", Session returns \"Session\". public string Name { get; } Property Value string Value Returns string representation of this candle alignment. The string representation of candle alignment \"m\" for Midnight and \"s\" for Session. public string Value { get; } Property Value string The string representation. Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle alignment set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this candle alignment set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. GetAttributeForSymbol(string?) Gets candle alignment of the given candle symbol string. The result is Default if the symbol does not have candle alignment attribute. public static CandleAlignment GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandleAlignment The candle alignment of the given candle symbol string. GetById(CandleAlignmentId) Gets CandleAlignment associated with the specified CandleAlignment.CandleAlignmentId. public static CandleAlignment GetById(CandleAlignment.CandleAlignmentId id) Parameters id CandleAlignment.CandleAlignmentId The candle alignment id. Returns CandleAlignment The candle alignment. Exceptions ArgumentException If candle type id not exist. NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle alignment attribute. public static string? NormalizeAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns string Returns candle symbol string with the normalized representation of the candle alignment attribute. Parse(string) Parses string representation of candle alignment into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. public static CandleAlignment Parse(string s) Parameters s string The string representation of candle alignment. Returns CandleAlignment The candle alignment. Exceptions ArgumentException If the string representation is invalid. ToFullString() Returns full string representation of this candle alignment. It is contains attribute key and its value. For example, the full string representation of Midnight is \"a=m\". public string ToFullString() Returns string The string representation. ToString() Returns string representation of this candle alignment. The string representation of candle alignment \"m\" for Midnight and \"s\" for Session. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleExchange.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleExchange.html",
    "title": "Class CandleExchange | dxFeed Graal .NET API",
    "keywords": "Class CandleExchange Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Exchange attribute of CandleSymbol defines exchange identifier where data is taken from to build the candles. For more details see Javadoc. public class CandleExchange : ICandleSymbolProperty Inheritance object CandleExchange Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Composite Composite exchange where data is taken from all exchanges. public static readonly CandleExchange Composite Field Value CandleExchange Default Default exchange is Composite. public static readonly CandleExchange Default Field Value CandleExchange Properties ExchangeCode Gets exchange code. It is '\\0' for Composite exchange. public char ExchangeCode { get; } Property Value char Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle exchange set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this candle exchange set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetAttributeForSymbol(string?) Gets exchange attribute object of the given candle symbol string. The result is Default if the symbol does not have exchange attribute. public static CandleExchange GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandleExchange The exchange attribute object of the given candle symbol string. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. ToString() Returns string representation of this exchange. It is the string \"COMPOSITE\" for Composite exchange or exchange character otherwise. public override string ToString() Returns string The string representation. ValueOf(char) Returns exchange attribute object that corresponds to the specified exchange code character. public static CandleExchange ValueOf(char exchangeCode) Parameters exchangeCode char The exchange code character. Returns CandleExchange The exchange attribute object."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePeriod.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePeriod.html",
    "title": "Class CandlePeriod | dxFeed Graal .NET API",
    "keywords": "Class CandlePeriod Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Period attribute of CandleSymbol defines aggregation period of the candles. Aggregation period is defined as pair of a Value and Type. For more details see Javadoc. public class CandlePeriod : ICandleSymbolProperty Inheritance object CandlePeriod Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AttributeKey The attribute key that is used to store the value of CandlePeriod in a symbol string using methods of MarketEventSymbols class. The value of this constant is an empty string, because this is the main attribute that every CandleSymbol must have. The value that this key shall be set to is equal to the corresponding ToString(). public const string AttributeKey = \"\" Field Value string Day Day aggregation where each candle represents a day. public static readonly CandlePeriod Day Field Value CandlePeriod Default Default period is Tick. public static readonly CandlePeriod Default Field Value CandlePeriod Tick Tick aggregation where each candle represents an individual tick. public static readonly CandlePeriod Tick Field Value CandlePeriod Properties PeriodIntervalMillis Gets aggregation period in milliseconds as closely as possible. Certain aggregation types like Second and Day span a specific number of milliseconds. Month, OptExp and Year are approximate. Candle period of Tick, Volume, Price, PriceMomentum and PriceRenko is not defined and this method returns 0. The result of this method is equal to: (long) (this.Type.PeriodIntervalMillis * this.Value) public long PeriodIntervalMillis { get; } Property Value long Type Gets aggregation period type. public CandleType Type { get; } Property Value CandleType Value Gets aggregation period value. For example, the value of 5 with the candle type of Minute represents 5 minute aggregation period. public double Value { get; } Property Value double Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this aggregation period set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this aggregation period set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. Equals(object?) Determines whether the specified object is equal to the current object. The same aggregation period has the same Value} and Type. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetAttributeForSymbol(string?) Gets candle period of the given candle symbol string. The result is Default if the symbol does not have candle period attribute. public static CandlePeriod GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandlePeriod The candle period of the given candle symbol string. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. NormalizeAttributeForSymbol(string?) Returns candle symbol string with the normalized representation of the candle period attribute. public static string? NormalizeAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns string The candle symbol string with the normalized representation of the the candle period attribute. Parse(string) Parses string representation of aggregation period into object. Any string that was returned by ToString() can be parsed. This method is flexible in the way candle types can be specified. See Parse(string) for details. public static CandlePeriod Parse(string s) Parameters s string string representation of aggregation period. Returns CandlePeriod aggregation period object. Exceptions ArgumentNullException If input string is null. FormatException If input string does not represent a number in a valid format. OverflowException If input string represents a number that is less than MinValue or greater than MaxValue. ToString() Returns string representation of this aggregation period. The string representation is composed of value and type string. For example, 5 minute aggregation is represented as \"5m\". The value of 1 is omitted in the string representation, so Day (one day) is represented as \"d\". This string representation can be converted back into object with Parse(string) method. public override string ToString() Returns string The string representation. ValueOf(double, CandleType) Returns candle period with the given value and type. public static CandlePeriod ValueOf(double value, CandleType type) Parameters value double The value candle period value. type CandleType The candle period type. Returns CandlePeriod The candle period with the given value and type."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.CandlePriceId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.CandlePriceId.html",
    "title": "Enum CandlePrice.CandlePriceId | dxFeed Graal .NET API",
    "keywords": "Enum CandlePrice.CandlePriceId Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll List of ids CandlePrice.CandlePriceId. public enum CandlePrice.CandlePriceId Fields Ask = 2 Id associated with CandlePrice.Ask. Bid = 1 Id associated with CandlePrice.Bid. Last = 0 Id associated with CandlePrice.Last. Mark = 3 Id associated with CandlePrice.Mark. Settlement = 4 Id associated with CandlePrice.Settlement."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.html",
    "title": "Class CandlePrice | dxFeed Graal .NET API",
    "keywords": "Class CandlePrice Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Price type attribute of CandleSymbol defines price that is used to build the candles. For more details see Javadoc. public class CandlePrice : ICandleSymbolProperty Inheritance object CandlePrice Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Ask Quote ask price. public static readonly CandlePrice Ask Field Value CandlePrice AttributeKey The attribute key that is used to store the value of CandlePrice in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"price\". The value that this key shall be set to is equal to the corresponding ToString(). public const string AttributeKey = \"price\" Field Value string Bid Quote bid price. public static readonly CandlePrice Bid Field Value CandlePrice Default Default price type is Last. public static readonly CandlePrice Default Field Value CandlePrice Last Last trading price. public static readonly CandlePrice Last Field Value CandlePrice Mark Market price defined as average between quote bid and ask prices. public static readonly CandlePrice Mark Field Value CandlePrice Settlement Official settlement price that is defined by exchange or last trading price otherwise. It updates based on all PriceType values: PriceType.Indicative, PriceType.Preliminary, and PriceType.Final. public static readonly CandlePrice Settlement Field Value CandlePrice Properties Id Gets CandlePrice.CandlePriceId associated with this instance. public CandlePrice.CandlePriceId Id { get; } Property Value CandlePrice.CandlePriceId Name Gets full name this CandlePrice instance. For example, Last returns \"Last\", Bid returns \"Bid\". public string Name { get; } Property Value string Value Returns string representation of this candle price type. The string representation of candle price type is a lower case string that corresponds to its name. For example, Last is represented as \"last\". public string Value { get; } Property Value string The string representation. Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle price type set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this candle price type set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. GetAttributeForSymbol(string?) Gets candle price type of the given candle symbol string. The result is Default if the symbol does not have candle price type attribute. public static CandlePrice GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandlePrice The candle price of the given candle symbol string. GetById(CandlePriceId) Gets CandlePrice associated with the specified CandlePrice.CandlePriceId. public static CandlePrice GetById(CandlePrice.CandlePriceId id) Parameters id CandlePrice.CandlePriceId The candle price type id. Returns CandlePrice The price type type. Exceptions ArgumentException If candle type id not exist. NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle price type attribute. public static string? NormalizeAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns string Returns candle symbol string with the normalized representation of the candle price type attribute. Parse(string) Parses string representation of candle price type into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. public static CandlePrice Parse(string s) Parameters s string The string representation of candle price. Returns CandlePrice The candle price. Exceptions ArgumentException If the string representation is invalid. ToFullString() Returns full string representation of this candle price type. It is contains attribute key and its value. For example, the full string representation of Last is \"price=last\". public string ToFullString() Returns string The string representation. ToString() Returns string representation of this candle price type. The string representation of candle price type is a lower case string that corresponds to its name. For example, Last is represented as \"last\". public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePriceLevel.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePriceLevel.html",
    "title": "Class CandlePriceLevel | dxFeed Graal .NET API",
    "keywords": "Class CandlePriceLevel Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Candle price level attribute of CandleSymbol defines how candles shall be aggregated in respect to price interval. The negative or infinite values of price interval are treated as exceptional. Price interval may be equal to zero. It means every unique price creates a particular candle to aggregate all events with this price for the chosen CandlePeriod. Non-zero price level creates sequence of intervals starting from 0: ...,[-pl;0),[0;pl),[pl;2*pl),...,[n*pl,n*pl+pl). Events aggregated by chosen CandlePeriod and price intervals. For more details see Javadoc. public class CandlePriceLevel : ICandleSymbolProperty Inheritance object CandlePriceLevel Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AttributeKey The attribute key that is used to store the value of CandlePriceLevel in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"pl\". The value that this key shall be set to is equal to the corresponding ToString(). public const string AttributeKey = \"pl\" Field Value string Default Default candle price level double.NaN. public static readonly CandlePriceLevel Default Field Value CandlePriceLevel Properties Value Gets a price level value. For example, the value of 1 represents [0;1), [1;2) and so on intervals to build candles. public double Value { get; } Property Value double Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle price level set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this candle price level set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. Equals(object?) Determines whether the specified object is equal to the current object. The same price level has the same Value. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetAttributeForSymbol(string?) Gets candle price level of the given candle symbol string. The result is Default if the symbol does not have candle price level attribute. public static CandlePriceLevel GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandlePriceLevel The candle price level of the given candle symbol string. GetHashCode() Returns a hash code value for this object. public override int GetHashCode() Returns int A hash code value for this object. NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle price level attribute. public static string? NormalizeAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns string Returns candle symbol string with the normalized representation of the candle price level attribute. Parse(string) Parses string representation of candle price level into object. Any string that was returned by ToString() can be parsed. and case is ignored for parsing. public static CandlePriceLevel Parse(string s) Parameters s string The string representation of candle candle price level attribute. Returns CandlePriceLevel The candle price level attribute. ToFullString() Returns full string representation of this candle price level attribute. It is contains attribute key and its value. For example, the full string representation of price level = 0.5 is \"pl=0.5\". public string ToFullString() Returns string The full string representation of a candle price level attribute. ToString() Returns string representation of this candle price level attribute. The string representation is composed of value. This string representation can be converted back into object with Parse(string) method. public override string ToString() Returns string The string representation. ValueOf(double) Returns candle price level object that corresponds to the specified value. public static CandlePriceLevel ValueOf(double value) Parameters value double The candle price level value. Returns CandlePriceLevel The candle price level with the given value and type."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.CandleSessionId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.CandleSessionId.html",
    "title": "Enum CandleSession.CandleSessionId | dxFeed Graal .NET API",
    "keywords": "Enum CandleSession.CandleSessionId Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll List of ids CandleSession. public enum CandleSession.CandleSessionId Fields Any = 0 Id associated with CandleSession.Any. Regular = 1 Id associated with CandleSession.Regular."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.html",
    "title": "Class CandleSession | dxFeed Graal .NET API",
    "keywords": "Class CandleSession Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Session attribute of CandleSymbol defines trading that is used to build the candles. For more details see Javadoc. public class CandleSession : ICandleSymbolProperty Inheritance object CandleSession Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Any All trading sessions are used to build candles. public static readonly CandleSession Any Field Value CandleSession AttributeKey The attribute key that is used to store the value of CandleSession in a symbol string using methods of MarketEventSymbols class. class. The value of this constant is \"tho\", which is an abbreviation for \"trading hours only\". The value that this key shall be set to is equal to the corresponding ToString(). public const string AttributeKey = \"tho\" Field Value string Default Default trading session is Any. public static readonly CandleSession Default Field Value CandleSession Regular Only regular trading session data is used to build candles. public static readonly CandleSession Regular Field Value CandleSession Properties Id Gets CandleSession.CandleSessionId associated with this instance. public CandleSession.CandleSessionId Id { get; } Property Value CandleSession.CandleSessionId Name Gets full name this CandleSession instance. For example, Any returns \"Any\", Regular returns \"Regular\". public string Name { get; } Property Value string Value Returns string representation of this candle session attribute. The string representation of candle session attribute is a lower case string that corresponds to its type name. For example, Any is represented as \"false\". public string Value { get; } Property Value string The string representation. Methods ChangeAttributeForSymbol(string?) Returns candle event symbol string with this session attribute set. public string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string The candle event symbol string with this session attribute set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. public void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic. GetAttributeForSymbol(string?) Gets candle session of the given candle symbol string. The result is Default if the symbol does not have candle session attribute. public static CandleSession GetAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns CandleSession The candle session attribute of the given candle symbol string. NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle session attribute. public static string? NormalizeAttributeForSymbol(string? symbol) Parameters symbol string The candle symbol string. Returns string Returns candle symbol string with the normalized representation of the candle session attribute. Parse(string) Parses string representation of candle session attribute into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. public static CandleSession Parse(string s) Parameters s string The string representation of candle price. Returns CandleSession Returns instance of CandleSession. Exceptions ArgumentException If the string representation is invalid. ToFullString() Returns full string representation of this candle session attribute. It is contains attribute key and its value. For example, the full string representation of Any is \"tho=false\". public string ToFullString() Returns string The string representation. ToString() Returns string representation of this candle session attribute. The string representation of candle session attribute is a lower case string that corresponds to its type name. For example, Any is represented as \"false\". public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSymbol.html",
    "title": "Class CandleSymbol | dxFeed Graal .NET API",
    "keywords": "Class CandleSymbol Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Symbol that should be used with DXFeedSubscription class to subscribe for Candle events. DXFeedSubscription also accepts a string representation of the candle symbol for subscription. For more details see Javadoc. public class CandleSymbol Inheritance object CandleSymbol Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Alignment Gets alignment attribute of this symbol. public CandleAlignment? Alignment { get; } Property Value CandleAlignment BaseSymbol Gets base market symbol without attributes. public string? BaseSymbol { get; } Property Value string Exchange Gets exchange attribute of this symbol. public CandleExchange? Exchange { get; } Property Value CandleExchange Period Gets aggregation period of this symbol. public CandlePeriod? Period { get; } Property Value CandlePeriod Price Gets price type attribute of this symbol. public CandlePrice? Price { get; } Property Value CandlePrice PriceLevel Gets price level attribute of this symbol. public CandlePriceLevel? PriceLevel { get; } Property Value CandlePriceLevel Session Gets session attribute of this symbol. public CandleSession? Session { get; } Property Value CandleSession Symbol Returns string representation of this symbol. The string representation can be transformed back into symbol object using ValueOf(string?) method. public string? Symbol { get; } Property Value string The string representation. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code value for this symbol. public override int GetHashCode() Returns int A hash code value for this symbol. ToString() Returns string representation of this symbol. The string representation can be transformed back into symbol object using ValueOf(string?) method. public override string ToString() Returns string The string representation. ValueOf(string?) Converts the given string symbol into the candle symbol object. public static CandleSymbol ValueOf(string? symbol) Parameters symbol string The string symbol. Returns CandleSymbol The candle symbol object. Exceptions ArgumentException If the string does not represent a valid symbol. ValueOf(string?, params ICandleSymbolProperty[]) Converts the given string symbol into the candle symbol object with the specified attribute set. public static CandleSymbol ValueOf(string? symbol, params ICandleSymbolProperty[] attributes) Parameters symbol string The string symbol. attributes ICandleSymbolProperty[] The attributes to set. Returns CandleSymbol The candle symbol object. Exceptions ArgumentException If the string does not represent a valid symbol."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.CandleTypeId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.CandleTypeId.html",
    "title": "Enum CandleType.CandleTypeId | dxFeed Graal .NET API",
    "keywords": "Enum CandleType.CandleTypeId Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll List of ids CandleType. public enum CandleType.CandleTypeId Fields Day = 4 Id associated with CandleType.Day. Hour = 3 Id associated with CandleType.Hour. Minute = 2 Id associated with CandleType.Minute. Month = 6 Id associated with CandleType.Month. OptExp = 7 Id associated with CandleType.OptExp. Price = 10 Id associated with CandleType.Price. PriceMomentum = 11 Id associated with CandleType.PriceMomentum. PriceRenko = 12 Id associated with CandleType.PriceRenko. Second = 1 Id associated with CandleType.Second. Tick = 0 Id associated with CandleType.Tick. Volume = 9 Id associated with CandleType.Volume. Week = 5 Id associated with CandleType.Week. Year = 8 Id associated with CandleType.Year."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.html",
    "title": "Class CandleType | dxFeed Graal .NET API",
    "keywords": "Class CandleType Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Type of the candle aggregation period constitutes CandlePeriod type together its actual Value. For more details see Javadoc. public class CandleType Inheritance object CandleType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Day Certain number of days. public static readonly CandleType Day Field Value CandleType Hour Certain number of hours. public static readonly CandleType Hour Field Value CandleType Minute Certain number of minutes. public static readonly CandleType Minute Field Value CandleType Month Certain number of months. public static readonly CandleType Month Field Value CandleType OptExp Certain number of option expirations. public static readonly CandleType OptExp Field Value CandleType Price Certain price change, calculated according to the following rules: high(n) - low(n) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = close(n) where n is the number of the bar. public static readonly CandleType Price Field Value CandleType PriceMomentum Certain price change, calculated according to the following rules: high(n) - low(n) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = close(n) + tick size, if close(n) = high(n) open(n+1) = close(n) - tick size, if close(n) = low(n) where n is the number of the bar. public static readonly CandleType PriceMomentum Field Value CandleType PriceRenko Certain price change, calculated according to the following rules: high(n+1) - high(n) = price range or low(n) - low(n+1) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = high(n), if high(n+1) - high(n) = price range open(n+1) = low(n), if low(n) - low(n+1) = price range where n is the number of the bar. public static readonly CandleType PriceRenko Field Value CandleType Second Certain number of seconds. public static readonly CandleType Second Field Value CandleType Tick Certain number of ticks. public static readonly CandleType Tick Field Value CandleType Volume Certain volume of trades. public static readonly CandleType Volume Field Value CandleType Week Certain number of weeks. public static readonly CandleType Week Field Value CandleType Year Certain number of years. public static readonly CandleType Year Field Value CandleType Properties Id Gets CandleType.CandleTypeId associated with this instance. public CandleType.CandleTypeId Id { get; } Property Value CandleType.CandleTypeId Name Gets full name this CandleType instance. For example, Tick (Value == \"t\") returns \"Tick\", Month (Value == \"mo\") returns \"Month\". public string Name { get; } Property Value string PeriodIntervalMillis Gets candle type period in milliseconds (aggregation period) as closely as possible. Certain types like Second and Day span a specific number of milliseconds. Month, OptExp and Year are approximate. Candle type period of Tick, Volume, Price, PriceMomentum and PriceRenko is not defined and this method returns 0. public long PeriodIntervalMillis { get; } Property Value long Value Returns string representation of this candle type. The string representation of candle type is the shortest unique prefix of the lower case string that corresponds to its Name. For example, Tick is represented as \"t\", while Month is represented as \"mo\" to distinguish it from Minute that is represented as \"m\". public string Value { get; } Property Value string The string representation. Methods GetById(CandleTypeId) Gets CandleType associated with the specified CandleType.CandleTypeId. public static CandleType GetById(CandleType.CandleTypeId id) Parameters id CandleType.CandleTypeId The candle type id. Returns CandleType The candle type. Exceptions ArgumentException If candle type id not exist. Parse(string) Parses string representation of candle type into object. Any string that is a prefix of candle type Name can be parsed (including the one that was returned by ToString()) and case is ignored for parsing. public static CandleType Parse(string s) Parameters s string The string representation of candle type. Returns CandleType The candle type. Exceptions ArgumentException If the string representation is invalid. ToString() Returns string representation of this candle type. The string representation of candle type is the shortest unique prefix of the lower case string that corresponds to its Name. For example, Tick is represented as \"t\", while Month is represented as \"mo\" to distinguish it from Minute that is represented as \"m\". public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.ICandleSymbolProperty.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.ICandleSymbolProperty.html",
    "title": "Interface ICandleSymbolProperty | dxFeed Graal .NET API",
    "keywords": "Interface ICandleSymbolProperty Namespace DxFeed.Graal.Net.Events.Candles Assembly DxFeed.Graal.Net.dll Property of the CandleSymbol. public interface ICandleSymbolProperty Methods ChangeAttributeForSymbol(string?) Change candle event symbol string with this attribute set and returns new candle event symbol string. string? ChangeAttributeForSymbol(string? symbol) Parameters symbol string The original candle event symbol. Returns string Returns candle event symbol string with this attribute set. CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. void CheckInAttribute(CandleSymbol candleSymbol) Parameters candleSymbol CandleSymbol The candle symbol. Exceptions InvalidOperationException If used outside of internal initialization logic."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Candles | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Candles Classes Candle Candle event with open, high, low, close prices and other information for a specific period. Candles are build with a specified CandlePeriod using a specified CandlePrice type with a data taken from the specified CandleExchange from the specified CandleSession with further details of aggregation provided by CandleAlignment. CandleAlignment Candle alignment attribute of CandleSymbol defines how candle are aligned with respect to time. For more details see Javadoc. CandleExchange Exchange attribute of CandleSymbol defines exchange identifier where data is taken from to build the candles. For more details see Javadoc. CandlePeriod Period attribute of CandleSymbol defines aggregation period of the candles. Aggregation period is defined as pair of a Value and Type. For more details see Javadoc. CandlePrice Price type attribute of CandleSymbol defines price that is used to build the candles. For more details see Javadoc. CandlePriceLevel Candle price level attribute of CandleSymbol defines how candles shall be aggregated in respect to price interval. The negative or infinite values of price interval are treated as exceptional. Price interval may be equal to zero. It means every unique price creates a particular candle to aggregate all events with this price for the chosen CandlePeriod. Non-zero price level creates sequence of intervals starting from 0: ...,[-pl;0),[0;pl),[pl;2*pl),...,[n*pl,n*pl+pl). Events aggregated by chosen CandlePeriod and price intervals. For more details see Javadoc. CandleSession Session attribute of CandleSymbol defines trading that is used to build the candles. For more details see Javadoc. CandleSymbol Symbol that should be used with DXFeedSubscription class to subscribe for Candle events. DXFeedSubscription also accepts a string representation of the candle symbol for subscription. For more details see Javadoc. CandleType Type of the candle aggregation period constitutes CandlePeriod type together its actual Value. For more details see Javadoc. Interfaces ICandleSymbolProperty Property of the CandleSymbol. Enums CandleAlignment.CandleAlignmentId List of ids CandleAlignment. CandlePrice.CandlePriceId List of ids CandlePrice.CandlePriceId. CandleSession.CandleSessionId List of ids CandleSession. CandleType.CandleTypeId List of ids CandleType."
  },
  "docs/api/DxFeed.Graal.Net.Events.EventCodeAttribute.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.EventCodeAttribute.html",
    "title": "Class EventCodeAttribute | dxFeed Graal .NET API",
    "keywords": "Class EventCodeAttribute Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Indicates that the attributed class contains event code native. [AttributeUsage(AttributeTargets.Class)] public sealed class EventCodeAttribute : Attribute Inheritance object Attribute EventCodeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EventCodeAttribute(EventCodeNative) Initializes a new instance of the EventCodeAttribute class. public EventCodeAttribute(EventCodeNative eventCode) Parameters eventCode EventCodeNative The native event code. Properties EventCode Gets native event code. public EventCodeNative EventCode { get; } Property Value EventCodeNative Methods GetEventCode(Type) Gets native event code from specified type. public static EventCodeNative GetEventCode(Type type) Parameters type Type The specified type. Returns EventCodeNative Returns native event code. Exceptions ArgumentException If specified type has no EventCodeAttribute. GetEventCodes(params Type[]) Gets native event codes from specified types. public static IEnumerable<EventCodeNative> GetEventCodes(params Type[] types) Parameters types Type[] The specified types. Returns IEnumerable<EventCodeNative> Returns set containing native event codes. Exceptions ArgumentException If one on the specified type has no EventCodeAttribute."
  },
  "docs/api/DxFeed.Graal.Net.Events.IEventType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IEventType.html",
    "title": "Interface IEventType | dxFeed Graal .NET API",
    "keywords": "Interface IEventType Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Marks all event types that can be received via dxFeed API. Events are considered instantaneous, non-persistent, and unconflateable (each event is individually delivered) unless they implement one of interfaces defined in this package to further refine their meaning. For more details see Javadoc. public interface IEventType Properties EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. string? EventSymbol { get; set; } Property Value string EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. long EventTime { get; set; } Property Value long Methods GetEventTypes() Gets all types that implement this interface. public static IEnumerable<Type> GetEventTypes() Returns IEnumerable<Type> Returns a collection of event types."
  },
  "docs/api/DxFeed.Graal.Net.Events.IIndexedEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IIndexedEvent.html",
    "title": "Interface IIndexedEvent | dxFeed Graal .NET API",
    "keywords": "Interface IIndexedEvent Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Represents an indexed collection of up-to-date information about some condition or state of an external entity that updates in real-time. For example, Order represents an order to buy or to sell some market instrument that is currently active on a market exchange and multiple orders are active for each symbol at any given moment in time. For more details see Javadoc. public interface IIndexedEvent : IEventType Inherited Members IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes() Fields RemoveEvent Indicates that the event with the corresponding index has to be removed. public const int RemoveEvent = 2 Field Value int SnapShotMode Is used to instruct dxFeed to use snapshot mode. It is intended to be used only for publishing to activate (if not yet activated) snapshot mode. The difference from SnapshotBegin flag is that SnapShotMode only switches on snapshot mode without starting snapshot synchronization protocol. public const int SnapShotMode = 64 Field Value int SnapshotBegin Indicates when the loading of a snapshot starts. public const int SnapshotBegin = 4 Field Value int SnapshotEnd SnapshotEnd or SnapshotSnip indicates the end of a snapshot. The difference between SnapshotEnd and SnapshotSnip is the following: SnapshotEnd indicates that the data source sent all the data pertaining to the subscription for the corresponding indexed event, while SnapshotSnip indicates that some limit on the amount of data was reached and while there still might be more data available, it will not be provided. public const int SnapshotEnd = 8 Field Value int SnapshotSnip SnapshotEnd or SnapshotSnip indicates the end of a snapshot. The difference between SnapshotEnd and SnapshotSnip is the following: SnapshotEnd indicates that the data source sent all the data pertaining to the subscription for the corresponding indexed event, while SnapshotSnip indicates that some limit on the amount of data was reached and while there still might be more data available, it will not be provided. public const int SnapshotSnip = 16 Field Value int TxPending Indicates a pending transactional update. When TxPending is 1, it means that an ongoing transaction update, that spans multiple events, is in process. public const int TxPending = 1 Field Value int Properties EventFlags Gets or sets transactional event flags. int EventFlags { get; set; } Property Value int EventSource Gets source of this event. IndexedEventSource EventSource { get; } Property Value IndexedEventSource Index Gets or sets unique per-symbol index of this event. long Index { get; set; } Property Value long"
  },
  "docs/api/DxFeed.Graal.Net.Events.ILastingEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.ILastingEvent.html",
    "title": "Interface ILastingEvent | dxFeed Graal .NET API",
    "keywords": "Interface ILastingEvent Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Represents up-to-date information about some condition or state of an external entity that updates in real-time. For example, a Quote is an up-to-date information about best bid and best offer for a specific symbol. For more details see Javadoc. public interface ILastingEvent : IEventType Inherited Members IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes()"
  },
  "docs/api/DxFeed.Graal.Net.Events.ITimeSeriesEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.ITimeSeriesEvent.html",
    "title": "Interface ITimeSeriesEvent | dxFeed Graal .NET API",
    "keywords": "Interface ITimeSeriesEvent Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Represents time-series snapshots of some process that is evolving in time or actual events in some external system that have an associated time stamp and can be uniquely identified. For example, TimeAndSale events represent the actual sales that happen on a market exchange at specific time moments, while Candle events represent snapshots of aggregate information about trading over a specific time period. For more details see Javadoc. public interface ITimeSeriesEvent : IIndexedEvent, IEventType Inherited Members IIndexedEvent.TxPending IIndexedEvent.RemoveEvent IIndexedEvent.SnapshotBegin IIndexedEvent.SnapshotEnd IIndexedEvent.SnapshotSnip IIndexedEvent.SnapShotMode IIndexedEvent.EventFlags IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes() Properties EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. IndexedEventSource EventSource { get; } Property Value IndexedEventSource Index Gets or sets unique per-symbol index of this event. Event indices are unique within event symbol. Typically, event index for a time series event includes Time inside. Implementation notes The most common scheme for event indices is to set highest 32 bits of event index to event timestamp in seconds. The lowest 32 bits are then split as follows. Bits 22 to 31 encode milliseconds of time stamp, and bits 0 to 21 encode some kind of a sequence number. Ultimately, the scheme for event indices is specific for each even type. The actual classes for specific event types perform the corresponding encoding. long Index { get; set; } Property Value long Time Gets or sets timestamp of the event. The timestamp is in milliseconds from midnight, January 1, 1970 UTC. long Time { get; set; } Property Value long"
  },
  "docs/api/DxFeed.Graal.Net.Events.IndexedEventSource.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IndexedEventSource.html",
    "title": "Class IndexedEventSource | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSource Namespace DxFeed.Graal.Net.Events Assembly DxFeed.Graal.Net.dll Source identifier for IIndexedEvent. For more details see Javadoc. public class IndexedEventSource Inheritance object IndexedEventSource Derived OrderSource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IndexedEventSource(int, string) Initializes a new instance of the IndexedEventSource class. public IndexedEventSource(int id, string name) Parameters id int The identifier. name string The name of identifier. Fields DEFAULT The default source with zero identifier for all events that do not support multiple sources. public static readonly IndexedEventSource DEFAULT Field Value IndexedEventSource Properties Id Gets a source identifier. Source identifier is non-negative. public int Id { get; } Property Value int Name Gets a name of identifier. public string Name { get; } Property Value string Methods Equals(object?) Indicates whether some other indexed event source has the same id. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code value for this object. The result of this method is equal to Id. public override int GetHashCode() Returns int A hash code value for this object. ToString() Returns a string representation of the object. public override string ToString() Returns string A string representation of the object. See Also EventSource"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.AnalyticOrder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.AnalyticOrder.html",
    "title": "Class AnalyticOrder | dxFeed Graal .NET API",
    "keywords": "Class AnalyticOrder Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Represents an extension of Order introducing analytics information, e.g. adding to this order iceberg related information (IcebergPeakSize, IcebergHiddenSize, IcebergExecutedSize). The collection of analytic order events of a symbol represents the most recent analytic information that is available about orders on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.AnalyticOrder)] public class AnalyticOrder : Order, IIndexedEvent, IEventType Inheritance object MarketEvent OrderBase Order AnalyticOrder Implements IIndexedEvent IEventType Inherited Members Order.MarketMaker OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AnalyticOrder() Initializes a new instance of the AnalyticOrder class. public AnalyticOrder() AnalyticOrder(string?) Initializes a new instance of the AnalyticOrder class with the specified event symbol. public AnalyticOrder(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Properties IcebergExecutedSize Gets or sets iceberg executed size of this analytic order. public double IcebergExecutedSize { get; set; } Property Value double IcebergHiddenSize Gets or sets iceberg hidden size of this analytic order. public double IcebergHiddenSize { get; set; } Property Value double IcebergPeakSize Gets or sets iceberg peak size of this analytic order. public double IcebergPeakSize { get; set; } Property Value double IcebergType Gets or sets iceberg type of this analytic order. public IcebergType IcebergType { get; set; } Property Value IcebergType Methods ToString() Returns string representation of this spread order event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Direction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Direction.html",
    "title": "Enum Direction | dxFeed Graal .NET API",
    "keywords": "Enum Direction Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Direction of the price movement. For example tick direction for last trade price. For more details see Javadoc. public enum Direction Fields Down = 1 Current price is lower than previous price. Undefined = 0 Direction is undefined, unknown or inapplicable. It includes cases with undefined price value or when direction computation was not performed. Up = 5 Current price is higher than previous price. Zero = 3 Current price is equal to the only known price value suitable for price direction computation. Unlike Undefined the Zero direction implies that current price is defined and direction computation was duly performed but has failed to detect any upward or downward price movement. It is also reported for cases when price sequence was broken and direction computation was restarted anew. ZeroDown = 2 Current price is the same as previous price and is lower than the last known price of different value. ZeroUp = 4 Current price is the same as previous price and is higher than the last known price of different value."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.IcebergType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.IcebergType.html",
    "title": "Enum IcebergType | dxFeed Graal .NET API",
    "keywords": "Enum IcebergType Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Type of an iceberg order. public enum IcebergType Fields Native = 1 Represents native (exchange-managed) iceberg type. Synthetic = 2 Represents synthetic (managed outside of the exchange) iceberg type. Undefined = 0 Iceberg type is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.MarketEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.MarketEvent.html",
    "title": "Class MarketEvent | dxFeed Graal .NET API",
    "keywords": "Class MarketEvent Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Abstract base class for all market events. All market events are objects that extend this class. Market event classes are simple beans with setter and getter methods for their properties and minimal business logic. All market events have EventSymbol property that is defined by this class. For more details see Javadoc. public abstract class MarketEvent : IEventType Inheritance object MarketEvent Implements IEventType Derived OptionSale OrderBase Profile Quote Summary TimeAndSale TradeBase Greeks Series TheoPrice Underlying Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MarketEvent() Initializes a new instance of the MarketEvent class. protected MarketEvent() MarketEvent(string?) Initializes a new instance of the MarketEvent class with the specified event symbol. protected MarketEvent(string? eventSymbol) Parameters eventSymbol string The event symbol. Properties EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. public string? EventSymbol { get; set; } Property Value string EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. public long EventTime { get; set; } Property Value long"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.MarketEventSymbols.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.MarketEventSymbols.html",
    "title": "Class MarketEventSymbols | dxFeed Graal .NET API",
    "keywords": "Class MarketEventSymbols Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Helper class to compose and parse symbols for market events. Regional symbols Regional symbol subscription receives events only from a designated exchange, marketplace, or venue instead of receiving composite events from all venues (by default). Regional symbol is composed from a base symbol, ampersand character ('&'), and an exchange code character. For example, \"SPY\" is the symbol for composite events for SPDR S&P 500 ETF from all exchanges, \"SPY&N\" is the symbol for event for SPDR S&P 500 ETF that originate only from NYSE marketplace. Symbol attributes Market event symbols can have a number of attributes attached to then in curly braces with \"<key>=<value>\" paris separated by commas. For example, \"SPY{price=bid}\" is the market symbol \"SPY\" with an attribute key \"price\" set to value \"bid\". \"SPY(=5m,tho=true}\" is the market symbol \"SPY\" with two attributes. One has an empty key and value \"5m\", while the other has key \"tho\" and value \"true\". The methods in this class always maintain attribute keys in alphabetic order. For more details see Javadoc. public static class MarketEventSymbols Inheritance object MarketEventSymbols Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChangeAttributeStringByKey(string?, string?, string?) Changes value of one attribute value while leaving exchange code and other attributes intact. The null symbol is interpreted as empty one by this method. public static string? ChangeAttributeStringByKey(string? symbol, string? key, string? value) Parameters symbol string The old symbol. key string The attribute key. value string The attribute value. Returns string Returns new symbol with key attribute with the specified value and everything else from the old symbol. Exceptions ArgumentNullException If key is null. ChangeBaseSymbol(string?, string) Changes base symbol while leaving exchange code and attributes intact. The result is null if old symbol is null. public static string ChangeBaseSymbol(string? symbol, string baseSymbol) Parameters symbol string The old symbol. baseSymbol string The new base symbol. Returns string Returns new symbol with new base symbol and old symbol's exchange code and attributes. ChangeExchangeCode(string?, char) Changes exchange code of the specified symbol or removes it if new exchange code is '\\0'. The result is null if old symbol is null. public static string? ChangeExchangeCode(string? symbol, char exchangeCode) Parameters symbol string The old symbol. exchangeCode char The new exchange code. Returns string Returns new symbol with the changed exchange code. GetAttributeStringByKey(string?, string) Returns value of the attribute with the specified key. The result is null if attribute with the specified key is not found. The result is null if symbol is null. public static string? GetAttributeStringByKey(string? symbol, string key) Parameters symbol string The symbol. key string The attribute key. Returns string Returns value of the attribute with the specified key. Exceptions ArgumentNullException If key is null. GetBaseSymbol(string?) Returns base symbol without exchange code and attributes. The result is null if symbol is null. public static string? GetBaseSymbol(string? symbol) Parameters symbol string The specified symbol. Returns string Returns base symbol without exchange code and attributes. GetExchangeCode(string?) Returns exchange code of the specified symbol or '\\0' if none is defined. The result is '\\0' if symbol is null. public static char GetExchangeCode(string? symbol) Parameters symbol string The specified symbol. Returns char Returns exchange code of the specified symbol or '\\0' if none is defined. HasAttributes(string?) Checks if the specified symbol has any attributes. public static bool HasAttributes(string? symbol) Parameters symbol string The symbol. Returns bool Returns true if the specified symbol has any attributes. HasExchangeCode(string?) Checks if the specified symbol has the exchange code specification. The result is false if symbol is null. public static bool HasExchangeCode(string? symbol) Parameters symbol string The specified symbol. Returns bool Returns true is the specified symbol has the exchange code specification. RemoveAttributeStringByKey(string?, string?) Removes one attribute with the specified key while leaving exchange code and other attributes intact. The result is null if symbol is null. public static string? RemoveAttributeStringByKey(string? symbol, string? key) Parameters symbol string The old symbol. key string The attribute key. Returns string Returns new symbol without the specified key and everything else from the old symbol. Exceptions ArgumentNullException If key is null."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OptionSale.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OptionSale.html",
    "title": "Class OptionSale | dxFeed Graal .NET API",
    "keywords": "Class OptionSale Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Option Sale event represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying. Option Sales are intended to provide information about option trades in a continuous time slice with the additional metrics, like Option Volatility, Option Delta, and Underlying Price. Option Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. [EventCode(EventCodeNative.OptionSale)] public class OptionSale : MarketEvent, IIndexedEvent, IEventType Inheritance object MarketEvent OptionSale Implements IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OptionSale() Initializes a new instance of the OptionSale class. public OptionSale() OptionSale(string?) Initializes a new instance of the OptionSale class with the specified event symbol. public OptionSale(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties AggressorSide Gets or sets aggressor side of this option sale event. public Side AggressorSide { get; set; } Property Value Side AskPrice Gets or sets the current ask price on the market when this option sale event had occurred. public double AskPrice { get; set; } Property Value double BidPrice Gets or sets the current bid price on the market when this option sale event had occurred. public double BidPrice { get; set; } Property Value double Delta Gets or sets option delta at the time of this option sale event. Delta is the first derivative of an option price by an underlying price. public double Delta { get; set; } Property Value double EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource ExchangeCode Gets or sets exchange code of this option sale event. public char ExchangeCode { get; set; } Property Value char ExchangeSaleConditions Gets or sets sale conditions provided for this event by data feed. This field format is specific for every particular data feed. public string? ExchangeSaleConditions { get; set; } Property Value string Index Gets or sets unique per-symbol index of this option sale event. public long Index { get; set; } Property Value long IsCancel Gets a value indicating whether this is a cancellation of a previous event. It is false for newly created option sale event. true if this is a cancellation of a previous event. public bool IsCancel { get; } Property Value bool IsCorrection Gets a value indicating whether this is a correction of a previous event. It is false for newly created optionsale event. true if this is a correction of a previous event. public bool IsCorrection { get; } Property Value bool IsExtendedTradingHours Gets or sets a value indicating whether this event represents an extended trading hours sale. public bool IsExtendedTradingHours { get; set; } Property Value bool IsNew Gets a value indicating whether this is a new event (not cancellation or correction). It is true for newly created option sale event. public bool IsNew { get; } Property Value bool IsSpreadLeg Gets or sets a value indicating whether this event represents a spread leg. public bool IsSpreadLeg { get; set; } Property Value bool IsValidTick Gets or sets a value indicating whether this event represents a valid intraday tick. Note, that a correction for a previously distributed valid tick represents a new valid tick itself, but a cancellation of a previous valid tick does not. public bool IsValidTick { get; set; } Property Value bool OptionSymbol Gets or sets option symbol of this event. public string? OptionSymbol { get; set; } Property Value string Price Gets or sets price of this option sale event. public double Price { get; set; } Property Value double Sequence Gets or sets sequence number sequence number of this order to distinguish orders that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Size Gets or sets size this option sale event as floating number with fractions. public double Size { get; set; } Property Value double Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long TimeNanoPart Gets or sets microseconds and nanoseconds time part of event. public int TimeNanoPart { get; set; } Property Value int TimeNanos Gets or sets time of the last trade in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. public long TimeNanos { get; set; } Property Value long TimeSequence Gets or sets time and sequence of of this event. Do not set this property directly. Sets Time and/or Sequence. public long TimeSequence { get; set; } Property Value long TradeThroughExempt Gets or sets TradeThroughExempt flag of this option sale event. public char TradeThroughExempt { get; set; } Property Value char Type Gets or sets type of this option sale event. public TimeAndSaleType Type { get; set; } Property Value TimeAndSaleType UnderlyingPrice Gets or sets underlying price at the time of this option sale event. public double UnderlyingPrice { get; set; } Property Value double Volatility Gets or sets Black-Scholes implied volatility of the option at the time of this option sale event. public double Volatility { get; set; } Property Value double Methods ToString() Returns string representation of this option sale event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Order.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Order.html",
    "title": "Class Order | dxFeed Graal .NET API",
    "keywords": "Class Order Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Order event is a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order events give information on several levels of details, called scopes - see Scope. Scope of an order is available via Scopeproperty. For more details see Javadoc. [EventCode(EventCodeNative.Order)] public class Order : OrderBase, IIndexedEvent, IEventType Inheritance object MarketEvent OrderBase Order Implements IIndexedEvent IEventType Derived AnalyticOrder Inherited Members OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Order() Initializes a new instance of the Order class. public Order() Order(string?) Initializes a new instance of the Order class with the specified event symbol. public Order(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Properties MarketMaker Gets or sets market maker or other aggregate identifier of this order. This value is defined for Aggregate and Order orders. public string? MarketMaker { get; set; } Property Value string Methods ToString() Returns string representation of this order event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderAction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderAction.html",
    "title": "Enum OrderAction | dxFeed Graal .NET API",
    "keywords": "Enum OrderAction Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Action enum for the Full Order Book (FOB) Orders. Action describes business meaning of the Order event: whether order was added or replaced, partially or fully executed, etc. public enum OrderAction Fields Bust = 8 Prior Trade/Order Execution bust. Order's Size and Price will be equals to 0. Full Order Book fields: OrderId - always empty. TradeId - always present. TradeSize and TradePrice - always empty. Delete = 4 Order is fully canceled and removed from Order Book. Order's Size will be equal to 0. Full Order Book fields: OrderId - always present. AuxOrderId - ID of the new order replacing this order - if available. Trade fields will be empty. Execute = 6 Order is fully executed and removed from Order Book. Order's Size will be equals to 0. Full Order Book fields: OrderId - always present. AuxOrderId - aggressor order ID, if available. TradeId - if available. TradeSize and TradePrice - contain size and price of this execution - always present. Modify = 3 Order is modified without changing its price-time-priority (usually due to partial cancel by user). Order's Size will contain new updated size. Full Order Book fields: OrderId - always present. Trade fields will be empty. New = 1 New Order is added to Order Book. Full Order Book fields: OrderId - always present. AuxOrderId - ID of the order replaced by this new order - if available. Trade fields will be empty Partial = 5 Size is changed (usually reduced) due to partial order execution. Order's Size will be updated to show current outstanding size. Full Order Book fields: OrderId - always present. AuxOrderId - aggressor order ID, if available. TradeId - if available. TradeSize and TradePrice - contain size and price of this execution. Replace = 2 Order is modified and price-time-priority is not maintained (i.e. order has re-entered Order Book). Order EventSymbol and OrderSide will remain the same. Full Order Book fields: OrderId - always present. Trade fields will be empty. Trade = 7 Non-Book Trade - this Trade not refers to any entry in Order Book. Order's Size and Price will be equals to 0. Full Order Book fields: OrderId - always empty. TradeId - if available. TradeSize and TradePrice - contain size and price of this trade - always present. Undefined = 0 Default enum value for orders that do not support \"Full Order Book\" and for backward compatibility - action must be derived from other Order fields. All Full Order Book related fields for this action will be empty."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderBase.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderBase.html",
    "title": "Class OrderBase | dxFeed Graal .NET API",
    "keywords": "Class OrderBase Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Base class for common fields of Order, AnalyticOrder and SpreadOrder events. Order events represent a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order event represents market depth for a specific symbol. AnalyticOrder event represents market depth for a specific symbol extended with an analytic information, for example, whether particular order represent an iceberg or not. SpreadOrder event represents market depth for all spreads on a given underlying symbol. For more details see Javadoc. public abstract class OrderBase : MarketEvent, IIndexedEvent, IEventType Inheritance object MarketEvent OrderBase Implements IIndexedEvent IEventType Derived Order SpreadOrder Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OrderBase() Initializes a new instance of the OrderBase class. protected OrderBase() OrderBase(string?) Initializes a new instance of the OrderBase class with specified event symbol. protected OrderBase(string? eventSymbol) Parameters eventSymbol string The event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties Action Gets or sets action of this order. Returns order action if available, otherwise - Undefined. public OrderAction Action { get; set; } Property Value OrderAction ActionTime Gets or sets time of the last Action. public long ActionTime { get; set; } Property Value long AuxOrderId Gets or sets order ID if available. Returns auxiliary order ID if available:. in New - ID of the order replaced by this new order. in Delete - ID of the order that replaces this deleted order. in Partial - ID of the aggressor order. in Execute - ID of the aggressor order. public long AuxOrderId { get; set; } Property Value long Count Gets or sets number of individual orders in this aggregate order. public long Count { get; set; } Property Value long EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets or sets order source of this event. The source is stored in the highest bits of the Index of this event. public OrderSource EventSource { get; set; } Property Value OrderSource ExchangeCode Gets or sets exchange code of this order. public char ExchangeCode { get; set; } Property Value char Exceptions ArgumentException If exchange code is greater than 127. ExecutedSize Gets or sets executed size of this order. public double ExecutedSize { get; set; } Property Value double HasSize Gets a value indicating whether this order has some size (Size is neither 0 nor NaN). public bool HasSize { get; } Property Value bool Index Gets or sets unique per-symbol index of this order. Index is non-negative. Note, that this method also changes EventSource, whose id occupies highest bits of index. Use EventSource after invocation of this method to set the desired value of source. public long Index { get; set; } Property Value long Exceptions ArgumentException When index is negative. OrderId Gets or sets order ID if available. Some actions Trade, Bust have no order ID since they are not related to any order in Order book. public long OrderId { get; set; } Property Value long OrderSide Gets or sets side of this order. public Side OrderSide { get; set; } Property Value Side Price Gets or sets price of this order event. public double Price { get; set; } Property Value double Scope Gets or sets scope of this order. public Scope Scope { get; set; } Property Value Scope Sequence Gets or sets sequence number sequence number of this order to distinguish orders that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Size Gets or sets size of this order event as floating number with fractions. public double Size { get; set; } Property Value double Time Gets or sets time of this order. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long TimeNanoPart Gets or sets microseconds and nanoseconds time part of this order. public int TimeNanoPart { get; set; } Property Value int TimeNanos Gets or sets timestamp of the original event in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. public long TimeNanos { get; set; } Property Value long TimeSequence Gets or sets time and sequence of this order packaged into single long value This method is intended for efficient order time priority comparison. Do not set their property directly. Change Time and/or Sequence. public long TimeSequence { get; set; } Property Value long TradeId Gets or sets trade (order execution) ID for events containing trade-related action. Returns 0 if trade ID not available. public long TradeId { get; set; } Property Value long TradePrice Gets or sets trade price for events containing trade-related action. public double TradePrice { get; set; } Property Value double TradeSize Gets or sets trade size for events containing trade-related action. public double TradeSize { get; set; } Property Value double Methods BaseFieldsToString() Returns string representation of this order fields. protected string BaseFieldsToString() Returns string The string representation. ToString() Returns string representation of this base order event's. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderSource.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderSource.html",
    "title": "Class OrderSource | dxFeed Graal .NET API",
    "keywords": "Class OrderSource Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Identifies source of Order, AnalyticOrder and SpreadOrder events. Synthetic sources COMPOSITE_BID, COMPOSITE_ASK, REGIONAL_BID and REGIONAL_ASK are provided for convenience of a consolidated order book and are automatically generated based on the corresponding Quote events. Aggregate sources AGGREGATE_BID and AGGREGATE_ASK provide futures depth (aggregated by price level) and NASDAQ Level II (top of book for each market maker). These source cannot be directly published to via dxFeed API. IsPublishable(Type) sources DEFAULT, NTV and ISE support full range of dxFeed API features. For more details see Javadoc. public class OrderSource : IndexedEventSource Inheritance object IndexedEventSource OrderSource Inherited Members IndexedEventSource.Id IndexedEventSource.Name IndexedEventSource.ToString() IndexedEventSource.Equals(object) IndexedEventSource.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields ABE ABE (abe.io) exchange. public static readonly OrderSource ABE Field Value OrderSource AGGREGATE_ASK Ask side of an aggregate order book (futures depth and NASDAQ Level II). This source cannot be directly published via dxFeed API, but otherwise it is fully operational. public static readonly OrderSource AGGREGATE_ASK Field Value OrderSource AGGREGATE_BID Bid side of an aggregate order book (futures depth and NASDAQ Level II). This source cannot be directly published via dxFeed API, but otherwise it is fully operational. public static readonly OrderSource AGGREGATE_BID Field Value OrderSource BATE Bats Europe BXE Exchange. public static readonly OrderSource BATE Field Value OrderSource BI20 Borsa Istanbul Exchange. Record for particular top 20 order book. public static readonly OrderSource BI20 Field Value OrderSource BXTR Bats Europe TRF. public static readonly OrderSource BXTR Field Value OrderSource BYX Bats BYX Exchange. public static readonly OrderSource BYX Field Value OrderSource BZX Bats BZX Exchange. public static readonly OrderSource BZX Field Value OrderSource C2OX CBOE Options C2 Exchange. public static readonly OrderSource C2OX Field Value OrderSource CEUX Bats Europe DXE Exchange. public static readonly OrderSource CEUX Field Value OrderSource CFE CBOE Futures Exchange. public static readonly OrderSource CFE Field Value OrderSource CHIX Bats Europe CXE Exchange. public static readonly OrderSource CHIX Field Value OrderSource COMPOSITE_ASK Ask side of a composite Quote. It is a synthetic source. The subscription on composite Quote event is observed when this source is subscribed to. public static readonly OrderSource COMPOSITE_ASK Field Value OrderSource COMPOSITE_BID Bid side of a composite Quote. It is a synthetic source. The subscription on composite Quote event is observed when this source is subscribed to. public static readonly OrderSource COMPOSITE_BID Field Value OrderSource DEA Direct-Edge EDGA Exchange. public static readonly OrderSource DEA Field Value OrderSource DEFAULT Default source for publishing custom order books. public static readonly OrderSource DEFAULT Field Value OrderSource DEX Direct-Edge EDGX Exchange. public static readonly OrderSource DEX Field Value OrderSource ERIS Eris Exchange group of companies. public static readonly OrderSource ERIS Field Value OrderSource ESPD NASDAQ eSpeed. public static readonly OrderSource ESPD Field Value OrderSource FAIR FAIR (FairX) exchange. public static readonly OrderSource FAIR Field Value OrderSource GLBX CME Globex. public static readonly OrderSource GLBX Field Value OrderSource ICE Intercontinental Exchange. public static readonly OrderSource ICE Field Value OrderSource ISE International Securities Exchange. public static readonly OrderSource ISE Field Value OrderSource IST Borsa Istanbul Exchange. public static readonly OrderSource IST Field Value OrderSource MEMX Members Exchange. public static readonly OrderSource MEMX Field Value OrderSource NFX NASDAQ Futures Exchange. public static readonly OrderSource NFX Field Value OrderSource NTV NASDAQ Total View. public static readonly OrderSource NTV Field Value OrderSource REGIONAL_ASK Ask side of a regional Quote. It is a synthetic source. The subscription on regional Quote event is observed when this source is subscribed to. public static readonly OrderSource REGIONAL_ASK Field Value OrderSource REGIONAL_BID Bid side of a regional Quote. It is a synthetic source. The subscription on regional Quote event is observed when this source is subscribed to. public static readonly OrderSource REGIONAL_BID Field Value OrderSource SMFE Small Exchange. public static readonly OrderSource SMFE Field Value OrderSource XEUR Eurex Exchange. public static readonly OrderSource XEUR Field Value OrderSource XNFI NASDAQ Fixed Income. public static readonly OrderSource XNFI Field Value OrderSource glbx CME Globex. Record for price level book. public static readonly OrderSource glbx Field Value OrderSource iex Investors exchange. Record for price level book. public static readonly OrderSource iex Field Value OrderSource memx Members Exchange. Record for price level book. public static readonly OrderSource memx Field Value OrderSource ntv NASDAQ Total View. Record for price level book. public static readonly OrderSource ntv Field Value OrderSource smfe Small Exchange. Record for price level book. public static readonly OrderSource smfe Field Value OrderSource xeur Eurex Exchange. Record for price level book. public static readonly OrderSource xeur Field Value OrderSource Properties IsFullOrderBook Gets a value indicating whether this source supports Full Order Book. public bool IsFullOrderBook { get; } Property Value bool Methods GetEventTypeMask(Type) Gets type mask by specified event type. public static int GetEventTypeMask(Type eventType) Parameters eventType Type The type of event. Returns int Returns type mask. Exceptions ArgumentException If the eventType does not inherit OrderBase. OrderBase. IsPublishable(Type) Gets a value indicating whether the given event type can be directly published with this source. Subscription on such sources can be observed directly via DXPublisher. Subscription on such sources is observed via instances of IndexedEventSubscriptionSymbol<T> class. public bool IsPublishable(Type eventType) Parameters eventType Type Typeof Order or AnalyticOrder or SpreadOrder. Returns bool true if Order , AnalyticOrder and SpreadOrder events can be directly published with this source. Exceptions ArgumentException If eventType differs from Order , AnalyticOrder, SpreadOrder. IsSpecialSourceId(int) Determines whether specified source identifier refers to special order source. Special order sources are used for wrapping non-order events into order events. public static bool IsSpecialSourceId(int sourceId) Parameters sourceId int The source identifier. Returns bool Returns true if it is a special source identifier. ValueOf(int) Returns order source for the specified source identifier. public static OrderSource ValueOf(int sourceId) Parameters sourceId int The source identifier. Returns OrderSource Return OrderSource. Exceptions ArgumentException If sourceId is negative or zero. ValueOf(string) Returns order source for the specified source name. The name must be either predefined, or contain at most 4 alphanumeric characters. public static OrderSource ValueOf(string name) Parameters name string The name of the source. Returns OrderSource Return OrderSource. Exceptions ArgumentException If name is malformed.."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.PriceType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.PriceType.html",
    "title": "Enum PriceType | dxFeed Graal .NET API",
    "keywords": "Enum PriceType Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Type of the price value. public enum PriceType Fields Final = 3 Final price (final settlement price). Indicative = 1 Indicative price (derived via math formula). Preliminary = 2 Preliminary price (preliminary settlement price), usually posted prior to Finalprice. Regular = 0 Regular price."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Profile.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Profile.html",
    "title": "Class Profile | dxFeed Graal .NET API",
    "keywords": "Class Profile Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Profile information snapshot that contains security instrument description. It represents the most recent information that is available about the traded security on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Profile)] public class Profile : MarketEvent, ILastingEvent, IEventType Inheritance object MarketEvent Profile Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Profile() Initializes a new instance of the Profile class. public Profile() Profile(string?) Initializes a new instance of the Profile class with the specified event symbol. public Profile(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Properties Beta Gets or sets the correlation coefficient of the instrument to the S&P500 index. public double Beta { get; set; } Property Value double Description Gets or sets description of the security instrument. public string? Description { get; set; } Property Value string DividendFrequency Gets or sets the frequency of cash dividends payments per year (calculated). public double DividendFrequency { get; set; } Property Value double EarningsPerShare Gets or sets the earnings per share (the company’s profits divided by the number of shares). public double EarningsPerShare { get; set; } Property Value double ExDividendAmount Gets or sets the amount of the last paid dividend. public double ExDividendAmount { get; set; } Property Value double ExDividendDayId Gets or sets the identifier of the day of the last dividend payment (ex-dividend date). Identifier of the day is the number of days passed since January 1, 1970. public int ExDividendDayId { get; set; } Property Value int FreeFloat Gets or sets the free-float - the number of shares outstanding that are available to the public for trade. public double FreeFloat { get; set; } Property Value double HaltEndTime Gets or sets ending time of the trading halt interval. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long HaltEndTime { get; set; } Property Value long HaltStartTime Gets or sets starting time of the trading halt interval. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long HaltStartTime { get; set; } Property Value long High52WeekPrice Gets or sets the maximal (high) price in last 52 weeks. public double High52WeekPrice { get; set; } Property Value double HighLimitPrice Gets or sets the maximal (high) allowed price. public double HighLimitPrice { get; set; } Property Value double IsShortSaleRestricted Gets a value indicating whether short sale of the security instrument is restricted. public bool IsShortSaleRestricted { get; } Property Value bool IsTradingHalted Gets a value indicating whether trading of the security instrument is halted. public bool IsTradingHalted { get; } Property Value bool Low52WeekPrice Gets or sets the minimal (low) price in last 52 weeks. public double Low52WeekPrice { get; set; } Property Value double LowLimitPrice Gets or sets the minimal (low) allowed price. public double LowLimitPrice { get; set; } Property Value double Shares Gets or sets the the number of shares outstanding. public double Shares { get; set; } Property Value double ShortSaleRestriction Gets or sets short sale restriction of the security instrument. public ShortSaleRestriction ShortSaleRestriction { get; set; } Property Value ShortSaleRestriction StatusReason Gets or sets description of the reason that trading was halted. public string? StatusReason { get; set; } Property Value string TradingStatus Gets or sets trading status of the security instrument. public TradingStatus TradingStatus { get; set; } Property Value TradingStatus Methods BaseFieldsToString() Returns string representation of this order fields. protected string BaseFieldsToString() Returns string The string representation. ToString() Returns string representation of this profile event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Quote.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Quote.html",
    "title": "Class Quote | dxFeed Graal .NET API",
    "keywords": "Class Quote Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Quote event is a snapshot of the best bid and ask prices, and other fields that change with each quote. It represents the most recent information that is available about the best quote on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Quote)] public class Quote : MarketEvent, ILastingEvent, IEventType Inheritance object MarketEvent Quote Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Quote() Initializes a new instance of the Quote class. public Quote() Quote(string?) Initializes a new instance of the Quote class with the specified event symbol. public Quote(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties AskExchangeCode Gets or sets ask exchange code. public char AskExchangeCode { get; set; } Property Value char AskPrice Gets or sets ask price. public double AskPrice { get; set; } Property Value double AskSize Gets or sets ask size. public double AskSize { get; set; } Property Value double AskTime Gets or sets time of the last ask change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. This time is always transmitted with seconds precision, so the result of this method is usually a multiple of 1000. You can set the actual millisecond-precision time here to publish event and the millisecond part will make the time of this quote even precise up to a millisecond. public long AskTime { get; set; } Property Value long BidExchangeCode Gets or sets bid exchange code. public char BidExchangeCode { get; set; } Property Value char BidPrice Gets or sets bid price. public double BidPrice { get; set; } Property Value double BidSize Gets or sets bid size. public double BidSize { get; set; } Property Value double BidTime Gets or sets time of the last bid change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. This time is always transmitted with seconds precision, so the result of this method is usually a multiple of 1000. You can set the actual millisecond-precision time here to publish event and the millisecond part will make the time of this quote even precise up to a millisecond. public long BidTime { get; set; } Property Value long Sequence Gets or sets sequence number of this quote to distinguish quotes that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Time Gets time of the last bid or ask change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; } Property Value long TimeNanoPart Gets or sets microseconds and nanoseconds part of time of the last bid or ask change. This method changes TimeNanos result. public int TimeNanoPart { get; set; } Property Value int TimeNanos Gets time of the last bid or ask change in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. public long TimeNanos { get; } Property Value long Methods ToString() Returns string representation of this quote event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Scope.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Scope.html",
    "title": "Enum Scope | dxFeed Graal .NET API",
    "keywords": "Enum Scope Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Scope of an order. public enum Scope Fields Aggregate = 2 Represents aggregate information for a given price level or best bid or best offer for a given market maker. Composite = 0 Represents best bid or best offer for the whole market. Order = 3 Represents individual order on the market. Regional = 1 Represents best bid or best offer for a given exchange code."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.ShortSaleRestriction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.ShortSaleRestriction.html",
    "title": "Enum ShortSaleRestriction | dxFeed Graal .NET API",
    "keywords": "Enum ShortSaleRestriction Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Short sale restriction on an instrument. public enum ShortSaleRestriction Fields Active = 1 Short sale restriction is active. Inactive = 2 Short sale restriction is inactive. Undefined = 0 Short sale restriction is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Side.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Side.html",
    "title": "Enum Side | dxFeed Graal .NET API",
    "keywords": "Enum Side Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Side of an order or a trade. For more details see Javadoc. public enum Side Fields Buy = 1 Buy side (bid). Sell = 2 Sell side (ask or offer). Undefined = 0 Side is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.SpreadOrder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.SpreadOrder.html",
    "title": "Class SpreadOrder | dxFeed Graal .NET API",
    "keywords": "Class SpreadOrder Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Spread order event is a snapshot for a full available market depth for all spreads on a given underlying symbol. The collection of spread order events of a symbol represents the most recent information that is available about spread orders on the market at any given moment of time. Spread order is similar to a regular Order, but it has a SpreadSymbol property that contains the symbol of the actual spread that is being represented by spread order object. EventSymbol property contains the underlying symbol that was used in subscription. For more details see Javadoc. [EventCode(EventCodeNative.SpreadOrder)] public class SpreadOrder : OrderBase, IIndexedEvent, IEventType Inheritance object MarketEvent OrderBase SpreadOrder Implements IIndexedEvent IEventType Inherited Members OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SpreadOrder() Initializes a new instance of the SpreadOrder class. public SpreadOrder() SpreadOrder(string?) Initializes a new instance of the SpreadOrder class with the specified event symbol. public SpreadOrder(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Properties SpreadSymbol Gets or sets spread symbol of this event. public string? SpreadSymbol { get; set; } Property Value string Methods ToString() Returns string representation of this spread order event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Summary.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Summary.html",
    "title": "Class Summary | dxFeed Graal .NET API",
    "keywords": "Class Summary Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Summary information snapshot about the trading session including session highs, lows, etc. It represents the most recent information that is available about the trading session in the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Summary)] public class Summary : MarketEvent, ILastingEvent, IEventType Inheritance object MarketEvent Summary Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Summary() Initializes a new instance of the Summary class. public Summary() Summary(string?) Initializes a new instance of the Summary class with the specified event symbol. public Summary(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Properties DayClosePrice Gets or sets the last (close) price for the day. public double DayClosePrice { get; set; } Property Value double DayClosePriceType Gets or sets the price type of the last (close) price for the day. public PriceType DayClosePriceType { get; set; } Property Value PriceType DayHighPrice Gets or sets the maximal (high) price for the day. public double DayHighPrice { get; set; } Property Value double DayId Gets or sets identifier of the day that this summary represents. Identifier of the day is the number of days passed since January 1, 1970. public int DayId { get; set; } Property Value int DayLowPrice Gets or sets the minimal (low) price for the day. public double DayLowPrice { get; set; } Property Value double DayOpenPrice Gets or sets the first (open) price for the day. public double DayOpenPrice { get; set; } Property Value double OpenInterest Gets or sets open interest of the symbol as the number of open contracts. public long OpenInterest { get; set; } Property Value long PrevDayClosePrice Gets or sets the last (close) price for the previous day. public double PrevDayClosePrice { get; set; } Property Value double PrevDayClosePriceType Gets or sets the price type of the last (close) price for the previous day. public PriceType PrevDayClosePriceType { get; set; } Property Value PriceType PrevDayId Gets or sets identifier of the previous day that this summary represents. Identifier of the day is the number of days passed since January 1, 1970. public int PrevDayId { get; set; } Property Value int PrevDayVolume Gets or sets total volume traded for the previous day. public double PrevDayVolume { get; set; } Property Value double Methods ToString() Returns string representation of this summary event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSale.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSale.html",
    "title": "Class TimeAndSale | dxFeed Graal .NET API",
    "keywords": "Class TimeAndSale Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Time and Sale represents a trade or other market event with price, like market open/close price, etc. Time and Sales are intended to provide information about trades in a continuous time slice (unlike Trade events which are supposed to provide snapshot about the current last trade). Time and Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. [EventCode(EventCodeNative.TimeAndSale)] public class TimeAndSale : MarketEvent, ITimeSeriesEvent, IIndexedEvent, IEventType Inheritance object MarketEvent TimeAndSale Implements ITimeSeriesEvent IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TimeAndSale() Initializes a new instance of the TimeAndSale class. public TimeAndSale() TimeAndSale(string?) Initializes a new instance of the TimeAndSale class with the specified event symbol. public TimeAndSale(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties AggressorSide Gets or sets aggressor side of this time and sale event. public Side AggressorSide { get; set; } Property Value Side AskPrice Gets or sets the current ask price on the market when this time and sale event had occurred. public double AskPrice { get; set; } Property Value double BidPrice Gets or sets the current bid price on the market when this time and sale event had occurred. public double BidPrice { get; set; } Property Value double Buyer Gets or sets buyer of this time and sale event. public string? Buyer { get; set; } Property Value string EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource ExchangeCode Gets or sets exchange code of this time and sale event. public char ExchangeCode { get; set; } Property Value char ExchangeSaleConditions Gets or sets sale conditions provided for this event by data feed. This field format is specific for every particular data feed. public string? ExchangeSaleConditions { get; set; } Property Value string Index Gets or sets unique per-symbol index of this time and sale event. Time and sale index is composed of Time and Sequence. Changing either time or sequence changes event index. Do not sets this value directly. Change Time and/or Sequence. public long Index { get; set; } Property Value long IsCancel Gets a value indicating whether this is a cancellation of a previous event. It is false for newly created time and sale event. true if this is a cancellation of a previous event. public bool IsCancel { get; } Property Value bool IsCorrection Gets a value indicating whether this is a correction of a previous event. It is false for newly created time and sale event. true if this is a correction of a previous event. public bool IsCorrection { get; } Property Value bool IsExtendedTradingHours Gets or sets a value indicating whether this event represents an extended trading hours sale. public bool IsExtendedTradingHours { get; set; } Property Value bool IsNew Gets a value indicating whether this is a new event (not cancellation or correction). It is true for newly created time and sale event. public bool IsNew { get; } Property Value bool IsSpreadLeg Gets or sets a value indicating whether this event represents a spread leg. public bool IsSpreadLeg { get; set; } Property Value bool IsValidTick Gets or sets a value indicating whether this event represents a valid intraday tick. Note, that a correction for a previously distributed valid tick represents a new valid tick itself, but a cancellation of a previous valid tick does not. public bool IsValidTick { get; set; } Property Value bool Price Gets or sets price of this time and sale event. public double Price { get; set; } Property Value double Seller Gets or sets seller of this time and sale event. public string? Seller { get; set; } Property Value string Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Size Gets or sets size of this time and sale event as floating number with fractions. public double Size { get; set; } Property Value double Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long TimeNanoPart Gets or sets microseconds and nanoseconds time part of event. public int TimeNanoPart { get; set; } Property Value int TimeNanos Gets or sets timestamp of the original event in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. public long TimeNanos { get; set; } Property Value long TradeThroughExempt Gets or sets TradeThroughExempt flag of this time and sale event. public char TradeThroughExempt { get; set; } Property Value char Type Gets or sets type of this time and sale event. public TimeAndSaleType Type { get; set; } Property Value TimeAndSaleType Methods ToString() Returns string representation of this time and sale event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSaleType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSaleType.html",
    "title": "Enum TimeAndSaleType | dxFeed Graal .NET API",
    "keywords": "Enum TimeAndSaleType Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Type of a time and sale event. For more details see Javadoc. public enum TimeAndSaleType Fields Cancel = 2 Represents cancel time and sale event. Correction = 1 Represents correction time and sale event. New = 0 Represents new time and sale event."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Trade.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Trade.html",
    "title": "Class Trade | dxFeed Graal .NET API",
    "keywords": "Class Trade Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Trade event is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover. It represents the most recent information that is available about the regular last trade on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Trade)] public class Trade : TradeBase, ILastingEvent, IEventType Inheritance object MarketEvent TradeBase Trade Implements ILastingEvent IEventType Inherited Members TradeBase.MaxSequence TradeBase.TimeSequence TradeBase.Time TradeBase.TimeNanos TradeBase.TimeNanoPart TradeBase.Sequence TradeBase.ExchangeCode TradeBase.Price TradeBase.Size TradeBase.DayId TradeBase.DayVolume TradeBase.DayTurnover TradeBase.TickDirection TradeBase.IsExtendedTradingHours TradeBase.Change TradeBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Trade() Initializes a new instance of the Trade class. public Trade() Trade(string?) Initializes a new instance of the Trade class with the specified event symbol. public Trade(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Methods ToString() Returns string representation of this trade event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradeBase.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradeBase.html",
    "title": "Class TradeBase | dxFeed Graal .NET API",
    "keywords": "Class TradeBase Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Base class for common fields of Trade and TradeETH events. Trade events represent the most recent information that is available about the last trade on the market at any given moment of time. For more details see Javadoc. public abstract class TradeBase : MarketEvent, ILastingEvent, IEventType Inheritance object MarketEvent TradeBase Implements ILastingEvent IEventType Derived Trade TradeETH Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TradeBase() Initializes a new instance of the TradeBase class. protected TradeBase() TradeBase(string?) Initializes a new instance of the TradeBase class with the specified event symbol. protected TradeBase(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties Change Gets or sets change of the last trade. public double Change { get; set; } Property Value double DayId Gets or sets identifier of the current trading day. Identifier of the day is the number of days passed since January 1, 1970. public int DayId { get; set; } Property Value int DayTurnover Gets or sets total turnover traded for a day. Day VWAP can be computed with DayTurnover / DayVolume. public double DayTurnover { get; set; } Property Value double DayVolume Gets or sets total volume traded for a day as floating number with fractions. public double DayVolume { get; set; } Property Value double ExchangeCode Gets or sets exchange code of the last trade. public char ExchangeCode { get; set; } Property Value char IsExtendedTradingHours Gets or sets a value indicating whether last trade was in extended trading hours. public bool IsExtendedTradingHours { get; set; } Property Value bool Price Gets or sets price of the last trade. public double Price { get; set; } Property Value double Sequence Gets or sets sequence number of the last trade to distinguish trades that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Size Gets or sets size of this last trade event as floating number with fractions. public double Size { get; set; } Property Value double TickDirection Gets or sets tick direction of the last trade. public Direction TickDirection { get; set; } Property Value Direction Time Gets or sets time of the last trade. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long TimeNanoPart Gets or sets microseconds and nanoseconds time part of the last trade. public int TimeNanoPart { get; set; } Property Value int TimeNanos Gets or sets time of the last trade in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. public long TimeNanos { get; set; } Property Value long TimeSequence Gets or sets time and sequence of last trade packaged into single long value. Do not set this property directly. Sets Time and/or Sequence. public long TimeSequence { get; set; } Property Value long Methods BaseFieldsToString() Returns string representation of this trade fields. protected string BaseFieldsToString() Returns string The string representation. ToString() Returns string representation of this base trade event's. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradeETH.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradeETH.html",
    "title": "Class TradeETH | dxFeed Graal .NET API",
    "keywords": "Class TradeETH Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll TradeETH event is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover. This event is defined only for symbols (typically stocks and ETFs) with a designated extended trading hours (ETH, pre market and post market trading sessions). It represents the most recent information that is available about ETH last trade on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.TradeETH)] public class TradeETH : TradeBase, ILastingEvent, IEventType Inheritance object MarketEvent TradeBase TradeETH Implements ILastingEvent IEventType Inherited Members TradeBase.MaxSequence TradeBase.TimeSequence TradeBase.Time TradeBase.TimeNanos TradeBase.TimeNanoPart TradeBase.Sequence TradeBase.ExchangeCode TradeBase.Price TradeBase.Size TradeBase.DayId TradeBase.DayVolume TradeBase.DayTurnover TradeBase.TickDirection TradeBase.IsExtendedTradingHours TradeBase.Change TradeBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TradeETH() Initializes a new instance of the TradeETH class. public TradeETH() TradeETH(string?) Initializes a new instance of the TradeETH class with the specified event symbol. public TradeETH(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Methods ToString() Returns string representation of this trade event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradingStatus.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradingStatus.html",
    "title": "Enum TradingStatus | dxFeed Graal .NET API",
    "keywords": "Enum TradingStatus Namespace DxFeed.Graal.Net.Events.Market Assembly DxFeed.Graal.Net.dll Trading status of an instrument. public enum TradingStatus Fields Active = 2 Trading is active. Halted = 1 Trading is halted. Undefined = 0 Trading status is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Market | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Market Classes AnalyticOrder Represents an extension of Order introducing analytics information, e.g. adding to this order iceberg related information (IcebergPeakSize, IcebergHiddenSize, IcebergExecutedSize). The collection of analytic order events of a symbol represents the most recent analytic information that is available about orders on the market at any given moment of time. For more details see Javadoc. MarketEvent Abstract base class for all market events. All market events are objects that extend this class. Market event classes are simple beans with setter and getter methods for their properties and minimal business logic. All market events have EventSymbol property that is defined by this class. For more details see Javadoc. MarketEventSymbols Helper class to compose and parse symbols for market events. Regional symbols Regional symbol subscription receives events only from a designated exchange, marketplace, or venue instead of receiving composite events from all venues (by default). Regional symbol is composed from a base symbol, ampersand character ('&'), and an exchange code character. For example, \"SPY\" is the symbol for composite events for SPDR S&P 500 ETF from all exchanges, \"SPY&N\" is the symbol for event for SPDR S&P 500 ETF that originate only from NYSE marketplace. Symbol attributes Market event symbols can have a number of attributes attached to then in curly braces with \"<key>=<value>\" paris separated by commas. For example, \"SPY{price=bid}\" is the market symbol \"SPY\" with an attribute key \"price\" set to value \"bid\". \"SPY(=5m,tho=true}\" is the market symbol \"SPY\" with two attributes. One has an empty key and value \"5m\", while the other has key \"tho\" and value \"true\". The methods in this class always maintain attribute keys in alphabetic order. For more details see Javadoc. OptionSale Option Sale event represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying. Option Sales are intended to provide information about option trades in a continuous time slice with the additional metrics, like Option Volatility, Option Delta, and Underlying Price. Option Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Order Order event is a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order events give information on several levels of details, called scopes - see Scope. Scope of an order is available via Scopeproperty. For more details see Javadoc. OrderBase Base class for common fields of Order, AnalyticOrder and SpreadOrder events. Order events represent a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order event represents market depth for a specific symbol. AnalyticOrder event represents market depth for a specific symbol extended with an analytic information, for example, whether particular order represent an iceberg or not. SpreadOrder event represents market depth for all spreads on a given underlying symbol. For more details see Javadoc. OrderSource Identifies source of Order, AnalyticOrder and SpreadOrder events. Synthetic sources COMPOSITE_BID, COMPOSITE_ASK, REGIONAL_BID and REGIONAL_ASK are provided for convenience of a consolidated order book and are automatically generated based on the corresponding Quote events. Aggregate sources AGGREGATE_BID and AGGREGATE_ASK provide futures depth (aggregated by price level) and NASDAQ Level II (top of book for each market maker). These source cannot be directly published to via dxFeed API. IsPublishable(Type) sources DEFAULT, NTV and ISE support full range of dxFeed API features. For more details see Javadoc. Profile Profile information snapshot that contains security instrument description. It represents the most recent information that is available about the traded security on the market at any given moment of time. For more details see Javadoc. Quote Quote event is a snapshot of the best bid and ask prices, and other fields that change with each quote. It represents the most recent information that is available about the best quote on the market at any given moment of time. For more details see Javadoc. SpreadOrder Spread order event is a snapshot for a full available market depth for all spreads on a given underlying symbol. The collection of spread order events of a symbol represents the most recent information that is available about spread orders on the market at any given moment of time. Spread order is similar to a regular Order, but it has a SpreadSymbol property that contains the symbol of the actual spread that is being represented by spread order object. EventSymbol property contains the underlying symbol that was used in subscription. For more details see Javadoc. Summary Summary information snapshot about the trading session including session highs, lows, etc. It represents the most recent information that is available about the trading session in the market at any given moment of time. For more details see Javadoc. TimeAndSale Time and Sale represents a trade or other market event with price, like market open/close price, etc. Time and Sales are intended to provide information about trades in a continuous time slice (unlike Trade events which are supposed to provide snapshot about the current last trade). Time and Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Trade Trade event is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover. It represents the most recent information that is available about the regular last trade on the market at any given moment of time. For more details see Javadoc. TradeBase Base class for common fields of Trade and TradeETH events. Trade events represent the most recent information that is available about the last trade on the market at any given moment of time. For more details see Javadoc. TradeETH TradeETH event is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover. This event is defined only for symbols (typically stocks and ETFs) with a designated extended trading hours (ETH, pre market and post market trading sessions). It represents the most recent information that is available about ETH last trade on the market at any given moment of time. For more details see Javadoc. Enums Direction Direction of the price movement. For example tick direction for last trade price. For more details see Javadoc. IcebergType Type of an iceberg order. OrderAction Action enum for the Full Order Book (FOB) Orders. Action describes business meaning of the Order event: whether order was added or replaced, partially or fully executed, etc. PriceType Type of the price value. Scope Scope of an order. ShortSaleRestriction Short sale restriction on an instrument. Side Side of an order or a trade. For more details see Javadoc. TimeAndSaleType Type of a time and sale event. For more details see Javadoc. TradingStatus Trading status of an instrument."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Greeks.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Greeks.html",
    "title": "Class Greeks | dxFeed Graal .NET API",
    "keywords": "Class Greeks Namespace DxFeed.Graal.Net.Events.Options Assembly DxFeed.Graal.Net.dll Greeks event is a snapshot of the option price, Black-Scholes volatility and greeks. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Greeks)] public class Greeks : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Inheritance object MarketEvent Greeks Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Greeks() Initializes a new instance of the Greeks class. public Greeks() Greeks(string?) Initializes a new instance of the Greeks class with the specified event symbol. public Greeks(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties Delta Gets or sets option delta. Delta is the first derivative of an option price by an underlying price. public double Delta { get; set; } Property Value double EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource Gamma Gets or sets option gamma. Gamma is the second derivative of an option price by an underlying price. public double Gamma { get; set; } Property Value double Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. public long Index { get; set; } Property Value long Price Gets or sets option market price. public double Price { get; set; } Property Value double Rho Gets or sets option rho. Rho is the first derivative of an option price by percentage interest rate. public double Rho { get; set; } Property Value double Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Theta Gets or sets option theta. Theta is the first derivative of an option price by a number of days to expiration. public double Theta { get; set; } Property Value double Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long Vega Gets or sets vega. Vega is the first derivative of an option price by percentage volatility. public double Vega { get; set; } Property Value double Volatility Gets or sets Black-Scholes implied volatility of the option. public double Volatility { get; set; } Property Value double Methods ToString() Returns string representation of this greeks event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Series.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Series.html",
    "title": "Class Series | dxFeed Graal .NET API",
    "keywords": "Class Series Namespace DxFeed.Graal.Net.Events.Options Assembly DxFeed.Graal.Net.dll Series event is a snapshot of computed values that are available for all option series for a given underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Series)] public class Series : MarketEvent, IIndexedEvent, IEventType Inheritance object MarketEvent Series Implements IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Series() Initializes a new instance of the Series class. public Series() Series(string?) Initializes a new instance of the Series class with the specified event symbol. public Series(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties CallVolume Gets or sets call options traded volume for a day. public double CallVolume { get; set; } Property Value double Dividend Gets or sets implied simple dividend return of the corresponding option series. public double Dividend { get; set; } Property Value double EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source for this event. This method always returns DEFAULT. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource Expiration Gets or sets day id of expiration. public int Expiration { get; set; } Property Value int Examples DayUtil.GetDayIdByYearMonthDay(20090117) See Also GetDayIdByYearMonthDay(int) ForwardPrice Gets or sets implied forward price for this option series. public double ForwardPrice { get; set; } Property Value double Index Gets or sets unique per-symbol index of this event. public long Index { get; set; } Property Value long Interest Gets or sets implied simple interest return of the corresponding option series. public double Interest { get; set; } Property Value double OptionVolume Gets options traded volume for a day. public double OptionVolume { get; } Property Value double PutCallRatio Gets or sets ratio of put options traded volume to call options traded volume for a day. public double PutCallRatio { get; set; } Property Value double PutVolume Gets or sets put options traded volume for a day. public double PutVolume { get; set; } Property Value double Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long TimeSequence Gets or sets time and sequence of this series packaged into single long value. This method is intended for efficient series time priority comparison. Do not use this method directly. Change Time and/or Sequence. public long TimeSequence { get; set; } Property Value long Volatility Gets or sets implied volatility index for this series based on VIX methodology. public double Volatility { get; set; } Property Value double Methods ToString() Returns string representation of this series event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.TheoPrice.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.TheoPrice.html",
    "title": "Class TheoPrice | dxFeed Graal .NET API",
    "keywords": "Class TheoPrice Namespace DxFeed.Graal.Net.Events.Options Assembly DxFeed.Graal.Net.dll Theo price is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation. It represents the most recent information that is available about the corresponding values at any given moment of time. The values include first and second order derivative of the price curve by price, so that the real-time theoretical option price can be estimated on real-time changes of the underlying price in the vicinity. For more details see Javadoc. [EventCode(EventCodeNative.TheoPrice)] public class TheoPrice : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Inheritance object MarketEvent TheoPrice Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TheoPrice() Initializes a new instance of the TheoPrice class. public TheoPrice() TheoPrice(string?) Initializes a new instance of the TheoPrice class with the specified event symbol. public TheoPrice(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties Delta Gets or sets delta of the theoretical price. Delta is the first derivative of an option price by an underlying price. public double Delta { get; set; } Property Value double Dividend Gets or sets implied simple dividend return of the corresponding option series. public double Dividend { get; set; } Property Value double EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source for this event. This method always returns DEFAULT. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource Gamma Gets or sets gamma of the theoretical price. Gamma is the second derivative of an option price by an underlying price. public double Gamma { get; set; } Property Value double Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. public long Index { get; set; } Property Value long Interest Gets or sets implied simple interest return of the corresponding option series. public double Interest { get; set; } Property Value double Price Gets or sets theoretical option price. public double Price { get; set; } Property Value double Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long UnderlyingPrice Gets or sets underlying price at the time of theo price computation. public double UnderlyingPrice { get; set; } Property Value double Methods ToString() Returns string representation of this theo price event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Underlying.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Underlying.html",
    "title": "Class Underlying | dxFeed Graal .NET API",
    "keywords": "Class Underlying Namespace DxFeed.Graal.Net.Events.Options Assembly DxFeed.Graal.Net.dll Underlying event is a snapshot of computed values that are available for an option underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. [EventCode(EventCodeNative.Underlying)] public class Underlying : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Inheritance object MarketEvent Underlying Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Underlying() Initializes a new instance of the Underlying class. public Underlying() Underlying(string?) Initializes a new instance of the Underlying class with the specified event symbol. public Underlying(string? eventSymbol) Parameters eventSymbol string The specified event symbol. Fields MaxSequence Maximum allowed sequence value. Sequence public const int MaxSequence = 4194303 Field Value int Properties BackVolatility Gets or sets back month implied volatility for this underlying based on VIX methodology. public double BackVolatility { get; set; } Property Value double CallVolume Gets or sets call options traded volume for a day. public double CallVolume { get; set; } Property Value double EventFlags Gets or sets transactional event flags. public int EventFlags { get; set; } Property Value int EventSource Gets a source for this event. This method always returns DEFAULT. public IndexedEventSource EventSource { get; } Property Value IndexedEventSource Expiration Gets or sets day id of expiration. public int Expiration { get; set; } Property Value int Examples DayUtil.GetDayIdByYearMonthDay(20090117) See Also GetDayIdByYearMonthDay(int) FrontVolatility Gets or sets front month implied volatility for this underlying based on VIX methodology. public double FrontVolatility { get; set; } Property Value double Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. public long Index { get; set; } Property Value long OptionVolume Gets options traded volume for a day. public double OptionVolume { get; } Property Value double PutCallRatio Gets or sets ratio of put options traded volume to call options traded volume for a day. public double PutCallRatio { get; set; } Property Value double PutVolume Gets or sets put options traded volume for a day. public double PutVolume { get; set; } Property Value double Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. public int Sequence { get; set; } Property Value int Exceptions ArgumentException If sequence out of range. Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. public long Time { get; set; } Property Value long Volatility Gets or sets 30-day implied volatility for this underlying based on VIX methodology. public double Volatility { get; set; } Property Value double Methods BaseFieldsToString() Returns string representation of this underlying fields. protected string BaseFieldsToString() Returns string The string representation. ToString() Returns string representation of this underlying event. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Options | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Options Classes Greeks Greeks event is a snapshot of the option price, Black-Scholes volatility and greeks. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. Series Series event is a snapshot of computed values that are available for all option series for a given underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. TheoPrice Theo price is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation. It represents the most recent information that is available about the corresponding values at any given moment of time. The values include first and second order derivative of the price curve by price, so that the real-time theoretical option price can be estimated on real-time changes of the underlying price in the vicinity. For more details see Javadoc. Underlying Underlying event is a snapshot of computed values that are available for an option underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Events.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.html",
    "title": "Namespace DxFeed.Graal.Net.Events | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events Classes EventCodeAttribute Indicates that the attributed class contains event code native. IndexedEventSource Source identifier for IIndexedEvent. For more details see Javadoc. Interfaces IEventType Marks all event types that can be received via dxFeed API. Events are considered instantaneous, non-persistent, and unconflateable (each event is individually delivered) unless they implement one of interfaces defined in this package to further refine their meaning. For more details see Javadoc. IIndexedEvent Represents an indexed collection of up-to-date information about some condition or state of an external entity that updates in real-time. For example, Order represents an order to buy or to sell some market instrument that is currently active on a market exchange and multiple orders are active for each symbol at any given moment in time. For more details see Javadoc. ILastingEvent Represents up-to-date information about some condition or state of an external entity that updates in real-time. For example, a Quote is an up-to-date information about best bid and best offer for a specific symbol. For more details see Javadoc. ITimeSeriesEvent Represents time-series snapshots of some process that is evolving in time or actual events in some external system that have an associated time stamp and can be uniquely identified. For example, TimeAndSale events represent the actual sales that happen on a market exchange at specific time moments, while Candle events represent snapshots of aggregate information about trading over a specific time period. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfile.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfile.html",
    "title": "Class InstrumentProfile | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfile Namespace DxFeed.Graal.Net.Ipf Assembly DxFeed.Graal.Net.dll Represents basic profile information about market instrument. Please see Instrument Profile Format documentation for complete description. public class InstrumentProfile Inheritance object InstrumentProfile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InstrumentProfile() Initializes a new instance of the InstrumentProfile class. public InstrumentProfile() InstrumentProfile(InstrumentProfile) Initializes a new instance of the InstrumentProfile class, creating a deep copy of the provided instrument profile. public InstrumentProfile(InstrumentProfile ip) Parameters ip InstrumentProfile The InstrumentProfile instance to copy. Remarks This constructor is used for creating a new instance of the InstrumentProfile class with the same properties as the given instance. It performs a deep copy, ensuring that the new instance does not share references with the original, making it safe from modifications to the original instance. Properties AdditionalUnderlyings Gets or sets additional underlyings for options, including additional cash. It shall use following format: <VALUE> ::= <empty> | <LIST> <LIST> ::= <AU> | <AU> <semicolon> <space> <LIST> <AU> ::= <UNDERLYING> <space> <SPC> the list shall be sorted by <UNDERLYING>. public string AdditionalUnderlyings { get; set; } Property Value string Examples \"SE 50\", \"FIS 53; US$ 45.46\". BaseCurrency Gets or sets base currency of currency pair (FOREX instruments). It shall use three-letter currency code similarly to Currency. public string BaseCurrency { get; set; } Property Value string CFI Gets or sets classification of Financial Instruments code. It is a mandatory field for OPTION instruments as it is the only way to distinguish Call/Put type, American/European exercise, Cash/Physical delivery. It shall use six-letter CFI code from ISO 10962 standard. It is allowed to use 'X' extensively and to omit trailing letters (assumed to be 'X'). See ISO 10962 on Wikipedia. public string CFI { get; set; } Property Value string Examples \"ESNTPB\", \"ESXXXX\", \"ES\", \"OPASPS\". CUSIP Gets or sets committee on Uniform Security Identification Procedures code. It shall use nine-letter code assigned by CUSIP Services Bureau. See CUSIP on Wikipedia. public string CUSIP { get; set; } Property Value string Examples \"38259P508\". Country Gets or sets country of origin (incorporation) of corresponding company or parent entity. It shall use two-letter country code from ISO 3166-1 standard. See ISO 3166-1 on Wikipedia. public string Country { get; set; } Property Value string Examples \"US\", \"RU\". Currency Gets or sets currency of quotation, pricing and trading. It shall use three-letter currency code from ISO 4217 standard. See ISO 4217 on Wikipedia. public string Currency { get; set; } Property Value string Examples \"USD\", \"RUB\". Description Gets or sets description of instrument, preferable an international one in Latin alphabet. public string Description { get; set; } Property Value string Examples \"Google Inc.\", \"Mini Gold Futures,Jun-2009,ETH\". ExchangeData Gets or sets exchange-specific data required to properly identify instrument when communicating with exchange. It uses exchange-specific format. public string ExchangeData { get; set; } Property Value string Exchanges Gets or sets list of exchanges where instrument is quoted or traded. Its shall use the following format: <VALUE> ::= <empty> | <LIST> <IST> ::= <MIC> | <MIC> <semicolon> <LIST> the list shall be sorted by MIC. public string Exchanges { get; set; } Property Value string Examples \"ARCX;CBSX;XNAS;XNYS\". Expiration Gets or sets day id of expiration. public int Expiration { get; set; } Property Value int Examples DayUtil.GetYearMonthDayByDayId(20090117). ExpirationStyle Gets or sets expiration cycle style, such as \"Weeklys\", \"Quarterlys\". public string ExpirationStyle { get; set; } Property Value string ICB Gets or sets industry Classification Benchmark. It shall use four-digit number from ICB catalog. See ICB on Wikipedia or ICB homepage. public int ICB { get; set; } Property Value int Examples \"9535\". ISIN Gets or sets international Securities Identifying Number. It shall use twelve-letter code from ISO 6166 standard. See ISO 6166 on Wikipedia or ISIN on Wikipedia. public string ISIN { get; set; } Property Value string Examples \"DE0007100000\", \"US38259P5089\". LastTrade Gets or sets day id of last trading day. public int LastTrade { get; set; } Property Value int Examples DayUtil.GetYearMonthDayByDayId(20090117). LocalDescription Gets or sets description of instrument in national language. It shall be empty if same as Description. public string LocalDescription { get; set; } Property Value string LocalSymbol Gets or sets identifier of instrument in national language. It shall be empty if same as Symbol. public string LocalSymbol { get; set; } Property Value string MMY Gets or sets maturity month-year as provided for corresponding FIX tag (200). It can use several different formats depending on data source. YYYYMM – if only year and month are specified YYYYMMDD – if full date is specified YYYYMMwN – if week number (within a month) is specified public string MMY { get; set; } Property Value string Multiplier Gets or sets market value multiplier. public double Multiplier { get; set; } Property Value double Examples \"100\", \"33.2\". OPOL Gets or sets official Place Of Listing, the organization that have listed this instrument. Instruments with multiple listings shall use separate profiles for each listing. It shall use Market Identifier Code (MIC) from ISO 10383 standard. See ISO 10383 on Wikipedia or MIC homepage. public string OPOL { get; set; } Property Value string Examples \"XNAS\", \"RTSX\". OptionType Gets or sets type of option. It shall use one of following values. STAN = Standard Options LEAP = Long-term Equity AnticiPation Securities SDO = Special Dated Options BINY = Binary Options FLEX = FLexible EXchange Options VSO = Variable Start Options RNGE = Range public string OptionType { get; set; } Property Value string PriceIncrements Gets or sets minimum allowed price increments with corresponding price ranges. It shall use following format: <VALUE> ::= <empty> | <LIST> <LIST> ::= <INCREMENT> | <RANGE> <semicolon> <space> <LIST> <RANGE> ::= <INCREMENT> <space> <UPPER_LIMIT> the list shall be sorted by <UPPER_LIMIT>. public string PriceIncrements { get; set; } Property Value string Examples \"0.25\", \"0.01 3; 0.05\". Product Gets or sets product for futures and options on futures (underlying asset name). public string Product { get; set; } Property Value string Examples \"/YG\". SEDOL Gets or sets stock Exchange Daily Official List. It shall use seven-letter code assigned by London Stock Exchange. See SEDOL on Wikipedia or SEDOL on LSE. public string SEDOL { get; set; } Property Value string Examples \"2310967\", \"5766857\". SIC Gets or sets standard Industrial Classification. It shall use four-digit number from SIC catalog. See SIC on Wikipedia or SIC structure. public int SIC { get; set; } Property Value int Examples \"7371\". SPC Gets or sets shares per contract for options. public double SPC { get; set; } Property Value double Examples \"1\", \"100\". SettlementStyle Gets or sets settlement price determination style, such as \"Open\", \"Close\". public string SettlementStyle { get; set; } Property Value string Strike Gets or sets strike price for options. public double Strike { get; set; } Property Value double Examples \"80\", \"22.5\". Symbol Gets or sets identifier of instrument, preferable an international one in Latin alphabet. It is a mandatory field. It may not be empty. public string Symbol { get; set; } Property Value string Examples \"GOOG\", \"/YGM9\", \".ZYEAD\". TradingHours Gets or sets trading hours specification. public string TradingHours { get; set; } Property Value string Type Gets or sets type of instrument. It takes precedence in conflict cases with other fields. It is a mandatory field. It may not be empty. public string Type { get; set; } Property Value string Examples \"STOCK\", \"FUTURE\", \"OPTION\". Underlying Gets or sets primary underlying symbol for options. public string Underlying { get; set; } Property Value string Examples \"C\", \"/YGM9\". Methods ToString() Returns a string representation of the instrument profile. public override string ToString() Returns string The string representation."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileReader.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileReader.html",
    "title": "Class InstrumentProfileReader | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileReader Namespace DxFeed.Graal.Net.Ipf Assembly DxFeed.Graal.Net.dll Reads instrument profiles from the stream using Instrument Profile Format (IPF). Please see Instrument Profile Format documentation for complete description. This reader automatically uses data formats as specified in the stream. This reader is intended for \"one time only\" usage: create new instances for new IPF reads. For backward compatibility reader can be configured with system property \"com.dxfeed.ipf.complete\" to control the strategy for missing \"##COMPLETE\" tag when reading IPF, possible values are: warn - show warning in the log (default) error - throw exception (future default) ignore - do nothing (for backward compatibility) public class InstrumentProfileReader Inheritance object InstrumentProfileReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLastModified() Returns last modification time (in milliseconds) from last ReadFromFile(string) operation or zero if it is unknown. public long GetLastModified() Returns long The last modification time. ReadFromFile(string) Reads and returns instrument profiles from specified file. This method recognizes data compression formats \"zip\" and \"gzip\" automatically. In case of zip the first file entry will be read and parsed as a plain data stream. In case of gzip compressed content will be read and processed. In other cases data considered uncompressed and will be parsed as is. Authentication information can be supplied to this method as part of URL user info like \"http://user:password@host:port/path/file.ipf\". This operation updates GetLastModified() and WasComplete(). public List<InstrumentProfile> ReadFromFile(string address) Parameters address string The URL of file to read from. Returns List<InstrumentProfile> The list of instrument profiles. ReadFromFile(string, string?, string?) Reads and returns instrument profiles from specified file. This method recognizes data compression formats \"zip\" and \"gzip\" automatically. In case of zip the first file entry will be read and parsed as a plain data stream. In case of gzip compressed content will be read and processed. In other cases data considered uncompressed and will be parsed as is. Specified user and password take precedence over authentication information that is supplied to this method as part of URL user info like \"http://user:password@host:port/path/file.ipf\". This operation updates GetLastModified() and WasComplete(). public List<InstrumentProfile> ReadFromFile(string address, string? user, string? password) Parameters address string The URL of file to read from. user string The user name (may be null). password string The password (may be null). Returns List<InstrumentProfile> The list of instrument profiles. ResolveSourceUrl(string) Resolves the given address specification into its corresponding URL format, particularly transforming simple \"host:port\" address specifications into a full HTTP URL. public static string? ResolveSourceUrl(string address) Parameters address string The address specification to be resolved into a URL. Returns string The resolved URL corresponding to the specified address. Remarks If the provided address appears to be a \"host:port\" pattern without any forward slashes, this method will attempt to convert it to a standardized HTTP URL format targeting an \"ipf/all.ipf.gz\" endpoint. If the address contains a query parameter (e.g., \"host:port?param=value\"), the parameter will be preserved in the resulting URL. Addresses that do not fit the \"host:port\" pattern, or that have invalid port numbers, are returned unchanged. WasComplete() Returns true if IPF was fully read on last ReadFromFile(string) operation. public bool WasComplete() Returns bool true if IPF was fully read; otherwise, false."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileType.html",
    "title": "Class InstrumentProfileType | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileType Namespace DxFeed.Graal.Net.Ipf Assembly DxFeed.Graal.Net.dll Defines standard types of InstrumentProfile. Note that other (unknown) types can be used without listing in this class - use it for convenience only. Please see Instrument Profile Format documentation for complete description. public class InstrumentProfileType Inheritance object InstrumentProfileType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BOND Debt instruments, excluding money market funds. public static readonly InstrumentProfileType BOND Field Value InstrumentProfileType CFD Contract for differences, an arrangement where the differences in the settlement between the open and closing trade prices are cash-settled. public static readonly InstrumentProfileType CFD Field Value InstrumentProfileType CURRENCY The currency type. public static readonly InstrumentProfileType CURRENCY Field Value InstrumentProfileType ETF Exchange-traded fund. public static readonly InstrumentProfileType ETF Field Value InstrumentProfileType FOREX Foreign exchange market or cryptocurrency. public static readonly InstrumentProfileType FOREX Field Value InstrumentProfileType FUTURE Futures contract, derivative instrument. public static readonly InstrumentProfileType FUTURE Field Value InstrumentProfileType INDEX Non-tradable market performance indicators. public static readonly InstrumentProfileType INDEX Field Value InstrumentProfileType MONEY_MARKET_FUND Funds that invest in short-term debt instruments. public static readonly InstrumentProfileType MONEY_MARKET_FUND Field Value InstrumentProfileType MUTUAL_FUND Investment funds, excluding ETFs and money market funds. public static readonly InstrumentProfileType MUTUAL_FUND Field Value InstrumentProfileType OPTION Option contract, derivative instrument. public static readonly InstrumentProfileType OPTION Field Value InstrumentProfileType OTHER Non-tradable miscellaneous instruments. public static readonly InstrumentProfileType OTHER Field Value InstrumentProfileType PRODUCT Grouping instrument for futures, aka futures product. public static readonly InstrumentProfileType PRODUCT Field Value InstrumentProfileType REMOVED Special instrument type indicating instrument removal. public static readonly InstrumentProfileType REMOVED Field Value InstrumentProfileType SPREAD Composite virtual instrument consisting of two or several individual instruments that represent multileg order. public static readonly InstrumentProfileType SPREAD Field Value InstrumentProfileType STOCK Tradable equities, excluding ETFs and mutual funds. public static readonly InstrumentProfileType STOCK Field Value InstrumentProfileType WARRANT Derivative that gives the right, but not the obligation, to buy or sell a security at a certain price before expiration. public static readonly InstrumentProfileType WARRANT Field Value InstrumentProfileType Properties Name Gets full name this InstrumentProfileType instance. public string Name { get; } Property Value string Methods CompareTypes(string, string) Compares two specified instrument profile types for order. public static int CompareTypes(string type1, string type2) Parameters type1 string The first instrument profile type to compare. type2 string The second instrument profile type to compare. Returns int A negative integer if type1 is less than type2, zero if they are equal, or a positive integer if type1 is greater than type2. If an unknown type is encountered, it's ordered alphabetically after recognized types. Remarks This method returns a negative integer if the first type is less than the second, zero if they are equal, or a positive integer if the first type is greater than the second. Unlike the natural ordering of the InstrumentProfile class itself, this method supports unknown types, ordering them alphabetically after the recognized types. It's designed primarily for arranging data representation in a file and is not intended for business logic evaluations. Find(string) Retrieves the corresponding InstrumentProfileType for the given name. public static InstrumentProfileType? Find(string name) Parameters name string The name of the InstrumentProfileType to be retrieved. Returns InstrumentProfileType The associated InstrumentProfileType if found, otherwise returns null."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileCollector.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileCollector.html",
    "title": "Class InstrumentProfileCollector | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileCollector Namespace DxFeed.Graal.Net.Ipf.Live Assembly DxFeed.Graal.Net.dll Collects instrument profile updates and provides the live list of instrument profiles. This class contains a map that keeps a unique instrument profile per symbol. This class is intended to be used with InstrumentProfileConnection as a repository that keeps profiles of all known instruments. As set of instrument profiles stored in this collector can be accessed with view method. A snapshot plus a live stream of updates can be accessed with addUpdateListener method. Removal of instrument profile is represented by an InstrumentProfile instance with a type equal to InstrumentProfileType.REMOVED. public class InstrumentProfileCollector Inheritance object InstrumentProfileCollector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddUpdateListener(InstrumentProfileUpdateListener) Adds listener that is notified about any updates in the set of instrument profiles. If a set of instrument profiles is not empty, then this listener will be immediately notified. public void AddUpdateListener(InstrumentProfileUpdateListener listener) Parameters listener InstrumentProfileUpdateListener The profile update listener. GetLastUpdateTime() Gets last modification time (in milliseconds) of instrument profiles or zero if it is unknown. Note, that while the time is represented in milliseconds, the actual granularity of time here is a second. public long GetLastUpdateTime() Returns long Last modification time (in milliseconds) of instrument profiles or zero if it is unknown. RemoveUpdateListener(InstrumentProfileUpdateListener) Removes listener that is notified about any updates in the set of instrument profiles. public void RemoveUpdateListener(InstrumentProfileUpdateListener listener) Parameters listener InstrumentProfileUpdateListener The profile update listener. View() Gets a concurrent view of the set of instrument profiles. Note, that removal of instrument profile is represented by an InstrumentProfile instance with a InstrumentProfileType equal to InstrumentProfileType.REMOVED Normally, this view exposes only non-removed profiles. However, if iteration is concurrent with removal, then a removed instrument profile (with a removed type) can be exposed by this view. public IEnumerable<InstrumentProfile> View() Returns IEnumerable<InstrumentProfile> A concurrent view of the set of instrument profiles."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileConnection.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileConnection.html",
    "title": "Class InstrumentProfileConnection | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileConnection Namespace DxFeed.Graal.Net.Ipf.Live Assembly DxFeed.Graal.Net.dll Connects to an instrument profile URL and reads instrument profiles with support of streaming live updates. Please see Instrument Profile Format documentation for complete description. The key different between this class and InstrumentProfileReader is that the later just reads a snapshot of a set of instrument profiles, while this classes allows to track live updates, e.g. addition and removal of instruments. To use this class you need an address of the data source from you data provider. The name of the IPF file can also serve as an address for debugging purposes. The recommended usage of this class to receive a live stream of instrument profile updates is: public class InstrumentProfileConnection Inheritance object InstrumentProfileConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Close() Closes this instrument profile connection. public void Close() CreateConnection(string, InstrumentProfileCollector) Creates instrument profile connection with a specified address and collector. Address may be just \"<host>:<port>\" of server, URL, or a file path. The \"[update=<period>]\" clause can be optionally added at the end of the address to specify an {@link #getUpdatePeriod() update period} via an address string. Default update period is 1 minute. public static InstrumentProfileConnection CreateConnection(string address, InstrumentProfileCollector collector) Parameters address string The connection address. collector InstrumentProfileCollector The instrument profile collector to push updates into. Returns InstrumentProfileConnection New instrument profile connection. GetAddress() Returns the address of this instrument profile connection. It does not include additional options specified as part of the address. public string GetAddress() Returns string The address of this instrument profile connection. GetLastModified() Returns last modification time (in milliseconds) of instrument profiles or zero if it is unknown. Note, that while the time is represented in milliseconds, the actual granularity of time here is a second. public long GetLastModified() Returns long Last modification time (in milliseconds) of instrument profiles or zero if it is unknown. GetUpdatePeriod() Returns update period in milliseconds. It is period of an update check when the instrument profiles source does not support live updates and/or when connection is dropped. public long GetUpdatePeriod() Returns long The update period in milliseconds. SetUpdatePeriod(long) Changes update period in milliseconds. public void SetUpdatePeriod(long updatePeriod) Parameters updatePeriod long The update period in milliseconds. Start() Starts this instrument profile connection. public void Start()"
  },
  "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileUpdateListener.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.Live.InstrumentProfileUpdateListener.html",
    "title": "Delegate InstrumentProfileUpdateListener | dxFeed Graal .NET API",
    "keywords": "Delegate InstrumentProfileUpdateListener Namespace DxFeed.Graal.Net.Ipf.Live Assembly DxFeed.Graal.Net.dll Notifies about instrument profile changes. public delegate void InstrumentProfileUpdateListener(List<InstrumentProfile> profiles) Parameters profiles List<InstrumentProfile> Notifies about instrument profile changes."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.Live.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.Live.html",
    "title": "Namespace DxFeed.Graal.Net.Ipf.Live | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Ipf.Live Classes InstrumentProfileCollector Collects instrument profile updates and provides the live list of instrument profiles. This class contains a map that keeps a unique instrument profile per symbol. This class is intended to be used with InstrumentProfileConnection as a repository that keeps profiles of all known instruments. As set of instrument profiles stored in this collector can be accessed with view method. A snapshot plus a live stream of updates can be accessed with addUpdateListener method. Removal of instrument profile is represented by an InstrumentProfile instance with a type equal to InstrumentProfileType.REMOVED. InstrumentProfileConnection Connects to an instrument profile URL and reads instrument profiles with support of streaming live updates. Please see Instrument Profile Format documentation for complete description. The key different between this class and InstrumentProfileReader is that the later just reads a snapshot of a set of instrument profiles, while this classes allows to track live updates, e.g. addition and removal of instruments. To use this class you need an address of the data source from you data provider. The name of the IPF file can also serve as an address for debugging purposes. The recommended usage of this class to receive a live stream of instrument profile updates is: Delegates InstrumentProfileUpdateListener Notifies about instrument profile changes."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.html",
    "title": "Namespace DxFeed.Graal.Net.Ipf | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Ipf Classes InstrumentProfile Represents basic profile information about market instrument. Please see Instrument Profile Format documentation for complete description. InstrumentProfileReader Reads instrument profiles from the stream using Instrument Profile Format (IPF). Please see Instrument Profile Format documentation for complete description. This reader automatically uses data formats as specified in the stream. This reader is intended for \"one time only\" usage: create new instances for new IPF reads. For backward compatibility reader can be configured with system property \"com.dxfeed.ipf.complete\" to control the strategy for missing \"##COMPLETE\" tag when reading IPF, possible values are: warn - show warning in the log (default) error - throw exception (future default) ignore - do nothing (for backward compatibility) InstrumentProfileType Defines standard types of InstrumentProfile. Note that other (unknown) types can be used without listing in this class - use it for convenience only. Please see Instrument Profile Format documentation for complete description."
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalErrorCode.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalErrorCode.html",
    "title": "Enum GraalErrorCode | dxFeed Graal .NET API",
    "keywords": "Enum GraalErrorCode Namespace DxFeed.Graal.Net.Native.ErrorHandling Assembly DxFeed.Graal.Net.dll Errors returned when calling GraalVM functions. The error description was obtained from GraalVM GitHub. public enum GraalErrorCode Fields AllocationFailed = 3 Memory allocation failed, the OS is probably out of memory. ArgumentParsingFailed = 22 The isolate arguments could not be parsed. AuxImagePrimaryImageMismatch = 21 The auxiliary image was built from a different primary image. AuxImageUnsupported = 18 Auxiliary images are not supported on this platform or edition. CpuFeatureCheckFailed = 23 Current target does not support the CPU features that are required by the image. DynamicMethodAddressResolutionGotFdCreateFailed = 25 Creating an in-memory file for the GOT failed. DynamicMethodAddressResolutionGotFdInvalid = 30 Mapping the GOT before an isolate's heap failed (invalid file). DynamicMethodAddressResolutionGotFdMapFailed = 27 Mapping and populating the in-memory file for the GOT failed. DynamicMethodAddressResolutionGotFdResizeFailed = 26 Resizing the in-memory file for the GOT failed. DynamicMethodAddressResolutionGotMmapFailed = 28 Mapping the GOT before an isolate's heap failed (no mapping). DynamicMethodAddressResolutionGotUniqueFileCreateFailed = 31 Could not create unique GOT file even after retrying. DynamicMethodAddressResolutionGotWrongMmap = 29 Mapping the GOT before an isolate's heap failed (wrong mapping). FreeAddressSpaceFailed = 19 Releasing the isolate's address space failed. FreeImageHeapFailed = 20 Releasing the isolate's image heap memory failed. InsufficientAddressSpace = 802 The image heap does not fit in the available address space. InsufficientAuxImageMemory = 17 Insufficient memory for the auxiliary image. IsolateInitializationFailed = 13 Initialization the isolate failed. LocateImageFailed = 6 Locating the image file failed. MapAuxImageFailed = 16 Mapping the auxiliary image file into memory failed. MapHeapFailed = 8 Mapping the heap from the image file into memory failed. NoError = 0 No error occurred. NullArgument = 2 An argument was NULL. OpenAuxImageFailed = 14 Opening the located auxiliary image file failed. OpenImageFailed = 7 Opening the located image file failed. PageSizeCheckFailed = 24 Image page size is incompatible with run-time page size. Rebuild image with -H:PageSize=[pagesize] to set appropriately. ProtectHeapFailed = 9 Setting the protection of the heap memory failed. ReadAuxImageMetaFailed = 15 Reading the opened auxiliary image file failed. ReserveAddressSpaceFailed = 801 Reserving address space for the new isolate failed. ThreadingInitializationFailed = 11 Initialization of threading in the isolate failed. UnattachedThread = 4 The specified thread is not attached to the isolate. UncaughtException = 12 Some exception is not caught. UninitializedIsolate = 5 The specified isolate is unknown. UnknownStackBoundaries = 32 Could not determine the stack boundaries. Unspecified = 1 An unspecified error occurred. UnsupportedIsolateParametersVersion = 10 The version of the specified isolate parameters is unsupported."
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalException.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalException.html",
    "title": "Class GraalException | dxFeed Graal .NET API",
    "keywords": "Class GraalException Namespace DxFeed.Graal.Net.Native.ErrorHandling Assembly DxFeed.Graal.Net.dll An exception class representing errors that occur during calls to GraalVM functions in interop scenarios. [Serializable] public sealed class GraalException : Exception, ISerializable Inheritance object Exception GraalException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Remarks This class encapsulates detailed information about errors encountered in GraalVM operations, including specific error codes and descriptive messages. Constructors GraalException(GraalErrorCode) Initializes a new instance of the GraalException class. public GraalException(GraalErrorCode errorCode) Parameters errorCode GraalErrorCode The error code associated with the GraalVM error. Properties ErrorCode Gets the GraalVM error code associated with this exception. public GraalErrorCode ErrorCode { get; } Property Value GraalErrorCode Methods GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the SerializationInfo with information about the exception. public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. Exceptions ArgumentNullException The info parameter is a null reference (Nothing in Visual Basic)."
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.JavaException.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.JavaException.html",
    "title": "Class JavaException | dxFeed Graal .NET API",
    "keywords": "Class JavaException Namespace DxFeed.Graal.Net.Native.ErrorHandling Assembly DxFeed.Graal.Net.dll An exception class representing errors that occur within Java code during interop scenarios. [Serializable] public sealed class JavaException : Exception, ISerializable Inheritance object Exception JavaException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Remarks This class encapsulates detailed information about Java exceptions, including the class name, message, and stack trace from the originating Java exception. Constructors JavaException(string?, string?, string?) Initializes a new instance of the JavaException class. public JavaException(string? message, string? className, string? stackTrace) Parameters message string The message that describes the error. className string The class name of the Java exception. stackTrace string The stack trace of the Java exception. Properties JavaClassName Gets the class name of the Java exception. public string? JavaClassName { get; } Property Value string JavaStackTrace Gets the stack trace of the Java exception. public string? JavaStackTrace { get; } Property Value string StackTrace Gets a string representation of the immediate frames on the call stack. public override string StackTrace { get; } Property Value string A string that describes the immediate frames of the call stack. Methods GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the SerializationInfo with information about the exception. public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. Exceptions ArgumentNullException The info parameter is a null reference (Nothing in Visual Basic)."
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.html",
    "title": "Namespace DxFeed.Graal.Net.Native.ErrorHandling | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Native.ErrorHandling Classes GraalException An exception class representing errors that occur during calls to GraalVM functions in interop scenarios. JavaException An exception class representing errors that occur within Java code during interop scenarios. Enums GraalErrorCode Errors returned when calling GraalVM functions. The error description was obtained from GraalVM GitHub."
  },
  "docs/api/DxFeed.Graal.Net.Native.Events.EventCodeNative.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Events.EventCodeNative.html",
    "title": "Enum EventCodeNative | dxFeed Graal .NET API",
    "keywords": "Enum EventCodeNative Namespace DxFeed.Graal.Net.Native.Events Assembly DxFeed.Graal.Net.dll A list of all events, that can be passed to/from native code, represented as a numeric code. In a particular case, these are implementations IEventType. public enum EventCodeNative Fields AnalyticOrder = 15 AnalyticOrder. Candle = 4 Candle. Configuration = 10 Not implemented. DailyCandle = 5 Deprecated. Doesn't need to be implemented. Greeks = 3 Greeks. Message = 11 Not implemented. OptionSale = 18 OptionSale. Order = 14 Order. OrderBase = 13 OrderBase. Doesn't need to be implemented. Abstract class. Profile = 1 Profile. Quote = 0 Quote. Series = 17 Series. SpreadOrder = 16 SpreadOrder. Summary = 2 Summary. TheoPrice = 7 TheoPrice. TimeAndSale = 12 TimeAndSale. Trade = 8 Trade. TradeETH = 9 TradeETH. Underlying = 6 Underlying."
  },
  "docs/api/DxFeed.Graal.Net.Native.Events.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Events.html",
    "title": "Namespace DxFeed.Graal.Net.Native.Events | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Native.Events Enums EventCodeNative A list of all events, that can be passed to/from native code, represented as a numeric code. In a particular case, these are implementations IEventType."
  },
  "docs/api/DxFeed.Graal.Net.SystemProperty.html": {
    "href": "docs/api/DxFeed.Graal.Net.SystemProperty.html",
    "title": "Class SystemProperty | dxFeed Graal .NET API",
    "keywords": "Class SystemProperty Namespace DxFeed.Graal.Net Assembly DxFeed.Graal.Net.dll Native wrapper over the Java java.lang.System class, contains work with property getter/setter methods. In Java world, these properties can be set by passing the \"-Dprop=value\" argument in command line or calls java.lang.System.setProperty(String key, String value). The location of the imported functions is in the header files \"dxfg_system.h\". public static class SystemProperty Inheritance object SystemProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples -Ddxfeed.address=\"demo.dxfeed.com:7400\". Methods GetProperty(string) Gets the system property indicated by the specified key. public static string? GetProperty(string key) Parameters key string The name of the system property. Returns string The string value of the system property, or null if there is no property with that key. SetProperties(IReadOnlyDictionary<string, string>) Sets the system properties from the provided key-value collection. public static void SetProperties(IReadOnlyDictionary<string, string> properties) Parameters properties IReadOnlyDictionary<string, string> The key-value collection. SetProperty(string, string) Sets the system property indicated by the specified key. public static void SetProperty(string key, string value) Parameters key string The name of the system property. value string The value of the system property."
  },
  "docs/api/DxFeed.Graal.Net.Utils.AttributeUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.AttributeUtil.html",
    "title": "Class AttributeUtil | dxFeed Graal .NET API",
    "keywords": "Class AttributeUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Provides utility methods for retrieving custom Attribute. public static class AttributeUtil Inheritance object AttributeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCustomAttribute<T>(Type) A generic version of GetCustomAttribute(MemberInfo, Type, bool) for Type. Retrieves a custom attribute applied to the type. Parameters specify the type with the custom attribute, the type of the custom attribute to search for. Doesn't look up the element's ancestors for custom attributes. public static T? GetCustomAttribute<T>(Type type) where T : Attribute Parameters type Type The type to which the custom attribute is applied. Returns T A reference to the single custom attribute of type T that is applied to element, or null if there is no such attribute. Type Parameters T The type, or a base type, of the custom attribute to search for. Exceptions ArgumentNullException type is null. AmbiguousMatchException More than one of the requested attributes was found. TypeLoadException A custom attribute type cannot be loaded. GetCustomAttribute<T>(Type, bool) A generic version of GetCustomAttribute(MemberInfo, Type, bool) for Type. Retrieves a custom attribute applied to the type. Parameters specify the type with the custom attribute, the type of the custom attribute to search for, and whether to search ancestors of the type. public static T? GetCustomAttribute<T>(Type type, bool inherit) where T : Attribute Parameters type Type The type to which the custom attribute is applied. inherit bool If true, specifies to also search the ancestors of element for custom attributes. Returns T A reference to the single custom attribute of type T that is applied to element, or null if there is no such attribute. Type Parameters T The type, or a base type, of the custom attribute to search for. Exceptions ArgumentNullException type is null. AmbiguousMatchException More than one of the requested attributes was found. TypeLoadException A custom attribute type cannot be loaded."
  },
  "docs/api/DxFeed.Graal.Net.Utils.BitUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.BitUtil.html",
    "title": "Class BitUtil | dxFeed Graal .NET API",
    "keywords": "Class BitUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of utility methods for bitwise operations. Ports the Java class com.dxfeed.event.market.Util. public static class BitUtil Inheritance object BitUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBits(int, int, int) Extracts bits from the specified value. public static int GetBits(int value, int mask, int shift) Parameters value int The specified value from which bits are extracted. mask int The bit mask. shift int The number of positions to shift the value. Returns int The extracted bits. SetBits(int, int, int, int) Sets bits in the specified value. public static int SetBits(int value, int mask, int shift, int bits) Parameters value int The specified value in which bits are to be set. mask int The bit mask. shift int The number of positions to shift the value. bits int The bits to be set. Returns int A value with the specified bits set."
  },
  "docs/api/DxFeed.Graal.Net.Utils.CmdArgsUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.CmdArgsUtil.html",
    "title": "Class CmdArgsUtil | dxFeed Graal .NET API",
    "keywords": "Class CmdArgsUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of static helper methods for parses command-line arguments. public static class CmdArgsUtil Inheritance object CmdArgsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseFromTime(string) Converts the specified string representation of a date and time to its DateTimeOffset in current TimeZoneInfo and InvariantCulture. If no time zone is specified in the parsed string, the string is assumed to denote a local time, and converted to current TimeZoneInfo. It accepts the following formats. 0 is parsed as zero time in UTC. <long-value-in-milliseconds> The value in milliseconds since Unix epoch since Unix epoch. It should be positive and have at least 9 digits (otherwise it could not be distinguished from date in format 'yyyymmdd' ). Each date since 1970-01-03 can be represented in this form. <date>[<time>][<timezone>] If time is missing it is supposed to be '00:00:00' . <date> is one of: yyyy-MM-dd yyyyMMdd <time> is one of: HH:mm:ss[.sss] HHmmss[.sss] <timezone> is one of: [+-]HH:mm [+-]HHmm Z for UTC. public static DateTimeOffset ParseFromTime(string fromTime) Parameters fromTime string Returns DateTimeOffset Returns DateTimeOffset parsed from input value. Exceptions ArgumentException If input value has wrong format. ParseProperties(string) Parses the input collection of strings and returns a collection of key-value properties. The input strings should look like comma-separated: \"key=value\". public static IReadOnlyDictionary<string, string> ParseProperties(string properties) Parameters properties string The input comma-separated key-value pairs. Returns IReadOnlyDictionary<string, string> Returns collection of key-value properties. Exceptions ArgumentException If string has wrong format. ParseSymbols(string) Parses an input string and returns a set of symbols. public static IEnumerable<string> ParseSymbols(string symbols) Parameters symbols string The coma-separated list of symbols. Returns IEnumerable<string> Returns created a set of parsed symbols. ParseTypes(string) Parses an input string and returns a set of event types. public static IEnumerable<Type> ParseTypes(string types) Parameters types string The coma-separated list of event types. Returns IEnumerable<Type> Returns a set of parsed types. Exceptions ArgumentException If the passed type is not available."
  },
  "docs/api/DxFeed.Graal.Net.Utils.ConcurrentSet-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.ConcurrentSet-1.html",
    "title": "Class ConcurrentSet<T> | dxFeed Graal .NET API",
    "keywords": "Class ConcurrentSet<T> Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll This is a simple wrapper over ConcurrentDictionary<TKey, TValue>, to provide an interface as a Set (.NET does not provide a built-in concurrent hashset type) for more consistent. public class ConcurrentSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : notnull Type Parameters T The type of elements in the set. Inheritance object ConcurrentSet<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConcurrentSet() Initializes a new instance of the ConcurrentSet<T> class. public ConcurrentSet() Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. Methods Add(T) Adds the specified element to a set. public bool Add(T item) Parameters item T The element to add to the set. Returns bool true if the element is added to the ConcurrentSet<T> object; false if the element is already present. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(T item) Parameters item T The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only."
  },
  "docs/api/DxFeed.Graal.Net.Utils.DayUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.DayUtil.html",
    "title": "Class DayUtil | dxFeed Graal .NET API",
    "keywords": "Class DayUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of static utility methods for manipulation of int day id, that is the number of days since Unix epoch of January 1, 1970. Ports the Java class com.devexperts.util.DayUtil. public static class DayUtil Inheritance object DayUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDayIdByYearMonthDay(int) Gets the day identifier for specified yyyymmdd integer in Gregorian calendar. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. The yyyymmdd integer is equal to yearSign * (abs(year) * 10000 + month * 100 + day), where year, month, and day are in Gregorian calendar, month is between 1 and 12 inclusive, and day is counted from 1. public static int GetDayIdByYearMonthDay(int yyyymmdd) Parameters yyyymmdd int The yyyymmdd integer in Gregorian calendar. Returns int The day id. Examples DayUtil.GetDayIdByYearMonthDay(19691231) == -1 DayUtil.GetDayIdByYearMonthDay(19700101) == 0 DayUtil.GetDayIdByYearMonthDay(19700102) == 1 Exceptions ArgumentException If the month is less than 1 or greater than 12. See Also GetDayIdByYearMonthDay(int, int, int) GetDayIdByYearMonthDay(int, int, int) Gets the day identifier for specified year, month and day in Gregorian calendar. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. Month must be between 1 and 12 inclusive. Year and day might take arbitrary values assuming proleptic Gregorian calendar. The value returned by this method for an arbitrary day value always satisfies the following equality: GetDayIdByYearMonthDay(year, month, day) == GetDayIdByYearMonthDay(year, month, 0) + day public static int GetDayIdByYearMonthDay(int year, int month, int day) Parameters year int The year. month int The month between 1 and 12 inclusive. day int The day. Returns int The day id. Exceptions ArgumentException If the month is less than 1 or greater than 12. GetYearMonthDayByDayId(int) Gets the integer yyyymmdd in Gregorian calendar for a specified day identifier. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. The result is equal to: yearSign * (abs(year) * 10000 + month * 100 + day) where year, month, and day are in Gregorian calendar, month is between 1 and 12 inclusive, and day is counted from 1. public static int GetYearMonthDayByDayId(int dayId) Parameters dayId int A number of whole days since Unix epoch of January 1, 1970. Returns int The yyyymmdd integer in Gregorian calendar. Examples DayUtil.GetYearMonthDayByDayId(-1) == 19691231 DayUtil.GetYearMonthDayByDayId(0) == 19700101 DayUtil.GetYearMonthDayByDayId(1) == 19700102"
  },
  "docs/api/DxFeed.Graal.Net.Utils.EnumUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.EnumUtil.html",
    "title": "Class EnumUtil | dxFeed Graal .NET API",
    "keywords": "Class EnumUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Provides utility methods for manipulating enumerations. public static class EnumUtil Inheritance object EnumUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateEnumArrayByValue<T>(T, int) Creates an array containing elements of the specified enum type T, of the specified length. If the length is greater than the number of enum values, the remaining elements are filled with a default value, otherwise array are truncated. public static T[] CreateEnumArrayByValue<T>(T defaultValue, int length) where T : Enum Parameters defaultValue T The default value that will fill the elements of an array if its size is greater than the number of enum values. length int The length of result array. Returns T[] The created array. Type Parameters T The specified enum type. Remarks The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). Exceptions ArgumentException If length is less than zero. CreateEnumBitMaskArrayByValue<T>(T) Creates an array containing elements of the specified enum type T, where the length of the array is rounded to the nearest power of two, which is greater than or equal to the number of enum values. If the calculated length is greater than the number of enum values, the remaining elements are filled with a default value. The idea is to quickly convert an int value to an enum value by using the array index. However, the size of the array is limited by a bit mask. If the number of enum values isn't a power of two, the array is expanded and the additional elements are filled with the default value. public static T[] CreateEnumBitMaskArrayByValue<T>(T defaultValue) where T : struct, Enum Parameters defaultValue T The default value that will fill the elements of an array if its size is greater than the number of enum values. Returns T[] The created array. Type Parameters T The specified enum type. Remarks The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). See Also CreateEnumArrayByValue<T>(T, int) GetCountValues<T>() Gets the number of values for the specified enum type. public static int GetCountValues<T>() where T : struct, Enum Returns int Returns the number of values of the specified enum type. Type Parameters T The specified enum type. ValueOf<T>(T) Returns an enum constant of the specified enum type with the specified value, or throws ArgumentException if the specified enum type does not have a constant with the specified value. public static T ValueOf<T>(T value) where T : struct, Enum Parameters value T The specified value. Returns T An enum constant of the specified enum type with the specified value. Type Parameters T The specified enum type. Exceptions ArgumentException If the specified enum type does not have a constant with the specified value. ValueOf<T>(T, T) Returns an enum constant of the specified enum type with the specified value, or a default value if the specified enum type does not have a constant with the specified value. public static T ValueOf<T>(T value, T defaultValue) where T : struct, Enum Parameters value T The specified value. defaultValue T The default enum value. Returns T The enum constant of the specified enum type with the specified value or default value, if specified enum type has no constant with the specified value. Type Parameters T The specified enum type."
  },
  "docs/api/DxFeed.Graal.Net.Utils.MathUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.MathUtil.html",
    "title": "Class MathUtil | dxFeed Graal .NET API",
    "keywords": "Class MathUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of static utility methods for mathematics. Porting Java class java.lang.Math and com.devexperts.util.MathUtil. public static class MathUtil Inheritance object MathUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Abs(int) Method like a Abs(int), but not throws OverflowException exception, when argument the argument is equal to the value of MinValue. Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of MinValue, the most negative representable int value, the result is that same value, which is negative. public static int Abs(int a) Parameters a int The argument whose absolute value is to be determined. Returns int The absolute value of the argument. Div(int, int) Returns quotient according to number theory - i.e. when remainder is zero or positive. public static int Div(int a, int b) Parameters a int The dividend. b int The divisor. Returns int The quotient according to number theory. FloorDiv(long, long) Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the long.MinValue and the divisor is -1, then integer overflow occurs and the result is equal to the long.MinValue. Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results than truncation when the exact result is negative. public static long FloorDiv(long x, long y) Parameters x long The dividend. y long The divisor. Returns long The largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. FloorMod(long, long) Returns the floor modulus of the int arguments. public static long FloorMod(long x, long y) Parameters x long The dividend. y long The divisor. Returns long The floor modulus: x - (FloorDiv(x, y) * y) IsNegativeZero(double) Checks if the specified number is a -0.0 (negative zero). public static bool IsNegativeZero(double x) Parameters x double The specified number. Returns bool Returns true if x is equals -0.0. IsPowerOfTwo(long) Checks if the specified number is a power of two. public static bool IsPowerOfTwo(long x) Parameters x long The specified number. Returns bool Returns true if x represents a power of two."
  },
  "docs/api/DxFeed.Graal.Net.Utils.PlatformUtils.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.PlatformUtils.html",
    "title": "Class PlatformUtils | dxFeed Graal .NET API",
    "keywords": "Class PlatformUtils Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Provides information to identify the current platform. public static class PlatformUtils Inheritance object PlatformUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsAppleSilicon Indicates whether the current application is running on Apple Silicon SoC. public static readonly bool IsAppleSilicon Field Value bool IsLinux Indicates whether the current application is running on Linux. public static readonly bool IsLinux Field Value bool IsMacOs Indicates whether the current application is running on macOS. public static readonly bool IsMacOs Field Value bool IsMono Indicates whether the current application is running on Mono .NET Runtime. public static readonly bool IsMono Field Value bool IsWindows Indicates whether the current application is running on Windows. public static readonly bool IsWindows Field Value bool LogicalCoreCount Gets the number of logical processors on the machine. If the process is running with CPU affinity, the number of processors that the process is affinitized to. If the process is running with a CPU utilization limit, the CPU utilization limit rounded up to the next whole number. public static readonly int LogicalCoreCount Field Value int OsArch Gets the platform architecture on which the current app is running. The returned value is intended to represent the actual architecture of the underlying operating system. It is a best effort to ignore the architecture emulation infrastructure that may be involved to run the process. The returned value takes into account emulation built into Windows and macOS operating systems. The returned value does not take into account emulation using QEMU that is typically used on Linux operating system. public static readonly Architecture OsArch Field Value Architecture OsNameAndVersion Gets os name and version. public static readonly string OsNameAndVersion Field Value string PlatformDiagInfo Gets string contains the name and version of the OS, architecture, number of cores. Used for debugging and logging purposes. public static readonly string PlatformDiagInfo Field Value string"
  },
  "docs/api/DxFeed.Graal.Net.Utils.QdsUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.QdsUtil.html",
    "title": "Class QdsUtil | dxFeed Graal .NET API",
    "keywords": "Class QdsUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Provides utility methods for running qds-tools using the DxFeed Graal.NET infrastructure. public static class QdsUtil Inheritance object QdsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RunTool(IEnumerable<string>) Executes a qds-tools with the specified arguments. public static void RunTool(IEnumerable<string> args) Parameters args IEnumerable<string> The arguments to pass to the qds-tools. These arguments control the tool's behavior. Remarks This method converts the provided string arguments into a native format suitable for the QDS tool, handles any errors during the execution, and ensures proper resource management within the native interop context."
  },
  "docs/api/DxFeed.Graal.Net.Utils.ReflectionUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.ReflectionUtil.html",
    "title": "Class ReflectionUtil | dxFeed Graal .NET API",
    "keywords": "Class ReflectionUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Simple utility class for working with the reflection API. Used to manipulate types. public static class ReflectionUtil Inheritance object ReflectionUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateTypesDictionary(IEnumerable<Type>) Creates a dictionary from specified types where the key is the type name and value is the type. public static IDictionary<string, Type> CreateTypesDictionary(IEnumerable<Type> types) Parameters types IEnumerable<Type> The specified types. Returns IDictionary<string, Type> Returns dictionary with inherited types. CreateTypesString(IDictionary<string, Type>) Creates a coma-separated string with types names from types dictionary. public static string CreateTypesString(IDictionary<string, Type> types) Parameters types IDictionary<string, Type> The specified types. Returns string Returns comma-separated string with inherited types. CreateTypesString(IEnumerable<Type>) Creates a coma-separated string with types names from types enumerable. public static string CreateTypesString(IEnumerable<Type> types) Parameters types IEnumerable<Type> The specified types. Returns string Returns comma-separated string with inherited types. GetInheritedTypes(Type) Gets all inherited types form the specified type. Abstract classes and interfaces ignored. public static IEnumerable<Type> GetInheritedTypes(Type type) Parameters type Type The specified type. Returns IEnumerable<Type> Returns enumerable with inherited types. Exceptions NullReferenceException If cannot find specified type. GetInheritedTypesDictionary(Type) Gets all inherited types form the specified type, and creates a dictionary where the key is the type name and value is the type. Abstract classes and interfaces ignored. public static IDictionary<string, Type> GetInheritedTypesDictionary(Type type) Parameters type Type The specified type. Returns IDictionary<string, Type> Returns dictionary with inherited types. Exceptions NullReferenceException If cannot find specified type. GetInheritedTypesString(Type) Gets all inherited types form the specified type, and creates a coma-separated string with types names. Abstract classes and interfaces ignored. public static string GetInheritedTypesString(Type type) Parameters type Type The specified type. Returns string Returns comma-separated string with inherited types. Exceptions NullReferenceException If cannot find specified type."
  },
  "docs/api/DxFeed.Graal.Net.Utils.StringUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.StringUtil.html",
    "title": "Class StringUtil | dxFeed Graal .NET API",
    "keywords": "Class StringUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Provides utility methods for working with strings. public static class StringUtil Inheritance object StringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckChar(char, int, string) Check that the specified char fits in the bit mask. public static void CheckChar(char c, int mask, string name) Parameters c char The char. mask int The bit mask. name string The char name. Used in the exception message. Exceptions ArgumentException If the specified char dont fits in the mask. EncodeChar(char) Encodes char to string. If the value of char falls within the range of printable ASCII characters [32-126], then returns a string containing that character, otherwise return unicode number \"(\\uffff)\". For zero char returns \"\\0\". public static string EncodeChar(char c) Parameters c char The char. Returns string Returns the encoded string. EncodeNullableString(string?) Encodes specified nullable string. If string equals null, returns \"null\" string; otherwise returns specified string. public static string EncodeNullableString(string? s) Parameters s string The specified string. Returns string Return specified string or \"null\" string."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeFormat.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeFormat.html",
    "title": "Class TimeFormat | dxFeed Graal .NET API",
    "keywords": "Class TimeFormat Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll Utility class for parsing and formatting dates and times in ISO-compatible format. public class TimeFormat Inheritance object TimeFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Local Gets instance TimeFormat with TimeZoneInfo.Local. public static TimeFormat Local { get; } Property Value TimeFormat Utc Gets instance TimeFormat with TimeZoneInfo.Utc. public static TimeFormat Utc { get; } Property Value TimeFormat Methods AsFullIso() Sets the current format as Full Iso. public TimeFormat AsFullIso() Returns TimeFormat Returns TimeFormat. Examples 1970-01-01T00:00:00.0000000+00:00. AsOnlyDate() Sets the current format as Only Date. public TimeFormat AsOnlyDate() Returns TimeFormat Returns TimeFormat. Examples Create(Func<TimeZoneInfo>) Creates a new instance of TimeFormat with a specified TimeZoneInfo encapsulates in Func<TResult> and DefaultFormat. The TimeZoneInfo is made as a func because, you should always access the local time zone through the TimeZoneInfo.Local (same for TimeZoneInfo.Utc) property rather than assigning the local time zone to a TimeZoneInfo object variable. public static TimeFormat Create(Func<TimeZoneInfo> timeZone) Parameters timeZone Func<TimeZoneInfo> The specified TimeZoneInfo encapsulates in Func<TResult>. Returns TimeFormat Returns new instance TimeFormat. Create(TimeZoneInfo) Creates a new instance of TimeFormat with a specified TimeZoneInfo and DefaultFormat. public static TimeFormat Create(TimeZoneInfo timeZone) Parameters timeZone TimeZoneInfo The specified TimeZoneInfo. Returns TimeFormat Returns new instance TimeFormat. Format(DateTimeOffset) Converts the value of the specified DateTimeOffset object to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. public string Format(DateTimeOffset dateTimeOffset) Parameters dateTimeOffset DateTimeOffset The DateTimeOffset object. Returns string The string representation. FormatFromMillis(long) Converts the value in milliseconds since Unix epoch to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. public string FormatFromMillis(long timeMillis) Parameters timeMillis long The time measured in milliseconds since Unix epoch. Returns string The string representation of the date, or \"0\" if timeMillis is 0. FormatFromSeconds(long) Converts the value in seconds since Unix epoch to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. public string FormatFromSeconds(long timeSeconds) Parameters timeSeconds long The time measured in seconds since Unix epoch. Returns string The string representation of the date, or \"0\" if timeSeconds is 0. Parse(string) Converts the specified string representation of a date and time to its DateTimeOffset in current TimeZoneInfo and InvariantCulture. If no time zone is specified in the parsed string, the string is assumed to denote a local time, and converted to current TimeZoneInfo. It accepts the following formats. 0 is parsed as zero time in UTC. <long-value-in-milliseconds> The value in milliseconds since Unix epoch since Unix epoch. It should be positive and have at least 9 digits (otherwise it could not be distinguished from date in format 'yyyymmdd' ). Each date since 1970-01-03 can be represented in this form. <date>[<time>][<timezone>] If time is missing it is supposed to be '00:00:00' . <date> is one of: yyyy-MM-dd yyyyMMdd <time> is one of: HH:mm:ss[.sss] HHmmss[.sss] <timezone> is one of: [+-]HH:mm [+-]HHmm Z for UTC. public DateTimeOffset Parse(string value) Parameters value string The input value for parse. Returns DateTimeOffset Returns DateTimeOffset parsed from input value. Exceptions ArgumentException If input value has wrong format. WithMillis() Adds milliseconds to the current format string. public TimeFormat WithMillis() Returns TimeFormat Returns TimeFormat. Examples 19700101-000000.000. WithTimeZone() Adds Time Zone to the current format string. public TimeFormat WithTimeZone() Returns TimeFormat Returns TimeFormat. Examples 19700101-000000+00:00."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeNanosUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeNanosUtil.html",
    "title": "Class TimeNanosUtil | dxFeed Graal .NET API",
    "keywords": "Class TimeNanosUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of static utility methods for manipulation of time measured in nanoseconds since Unix epoch. Porting Java class com.dxfeed.event.impl.TimeNanosUtil. public static class TimeNanosUtil Inheritance object TimeNanosUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMillisFromNanos(long) Returns time measured in milliseconds since Unix epoch from the time in nanoseconds. Idea is that nano part of time shall be within [0..999999] interval so that the following equation always holds: GetMillisFromNanos(timeNanos) * 1_000_000 + GetNanoPartFromNanos(timeNanos) == timeNanos GetNanoPartFromNanos(long) public static long GetMillisFromNanos(long timeNanos) Parameters timeNanos long The time measured in nanoseconds since Unix epoch. Returns long The time measured in milliseconds since Unix epoch. GetNanoPartFromNanos(long) Returns nano part of time. Idea is that nano part of time shall be within [0..999999] interval so that the following equation always holds: GetMillisFromNanos(timeNanos) * 1_000_000 + GetNanoPartFromNanos(timeNanos) == timeNanos GetMillisFromNanos(long) public static int GetNanoPartFromNanos(long timeNanos) Parameters timeNanos long The time measured in nanoseconds since Unix epoch. Returns int The time measured in milliseconds since Unix epoch. GetNanosFromMillisAndNanoPart(long, int) Returns time measured in nanoseconds since Unix epoch from the time in milliseconds and its nano part. The result of this method is timeMillis * 1_000_000 + timeNanoPart. public static long GetNanosFromMillisAndNanoPart(long timeMillis, int timeNanoPart) Parameters timeMillis long The time in milliseconds since Unix epoch. timeNanoPart int The nanoseconds part that shall lie within [0..999999] interval. Returns long The time measured in nanoseconds since Unix epoch."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeUtil.html",
    "title": "Class TimeUtil | dxFeed Graal .NET API",
    "keywords": "Class TimeUtil Namespace DxFeed.Graal.Net.Utils Assembly DxFeed.Graal.Net.dll A collection of static utility methods for manipulation of time measured in milliseconds since Unix epoch. Porting a Java class com.devexperts.util.TimeUtil. public static class TimeUtil Inheritance object TimeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Day Number of milliseconds in a day. public const long Day = 86400000 Field Value long Hour Number of milliseconds in an hour. public const long Hour = 3600000 Field Value long Minute Number of milliseconds in a minute. public const long Minute = 60000 Field Value long Second Number of milliseconds in a second. public const long Second = 1000 Field Value long Methods GetMillisFromTime(long) Returns correct number of milliseconds with proper handling negative values. Idea is that number of milliseconds shall be within [0..999] interval so that the following equation always holds: GetSecondsFromTime(timeMillis) * 1000L + GetMillisFromTime(timeMillis) == timeMillis as long the time in seconds fits into int. GetSecondsFromTime(long) public static int GetMillisFromTime(long timeMillis) Parameters timeMillis long The time measured in milliseconds since Unix epoch. Returns int The number of milliseconds. GetSecondsFromTime(long) Returns correct number of seconds with proper handling negative values and overflows. Idea is that number of milliseconds shall be within [0..999] interval so that the following equation always holds: GetSecondsFromTime(timeMillis) * 1000L + GetMillisFromTime(timeMillis) == timeMillis as long the time in seconds fits into int. GetMillisFromTime(long) public static int GetSecondsFromTime(long timeMillis) Parameters timeMillis long The time measured in milliseconds since Unix epoch. Returns int The number of seconds."
  },
  "docs/api/DxFeed.Graal.Net.Utils.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.html",
    "title": "Namespace DxFeed.Graal.Net.Utils | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Utils Classes AttributeUtil Provides utility methods for retrieving custom Attribute. BitUtil A collection of utility methods for bitwise operations. Ports the Java class com.dxfeed.event.market.Util. CmdArgsUtil A collection of static helper methods for parses command-line arguments. ConcurrentSet<T> This is a simple wrapper over ConcurrentDictionary<TKey, TValue>, to provide an interface as a Set (.NET does not provide a built-in concurrent hashset type) for more consistent. DayUtil A collection of static utility methods for manipulation of int day id, that is the number of days since Unix epoch of January 1, 1970. Ports the Java class com.devexperts.util.DayUtil. EnumUtil Provides utility methods for manipulating enumerations. MathUtil A collection of static utility methods for mathematics. Porting Java class java.lang.Math and com.devexperts.util.MathUtil. PlatformUtils Provides information to identify the current platform. QdsUtil Provides utility methods for running qds-tools using the DxFeed Graal.NET infrastructure. ReflectionUtil Simple utility class for working with the reflection API. Used to manipulate types. StringUtil Provides utility methods for working with strings. TimeFormat Utility class for parsing and formatting dates and times in ISO-compatible format. TimeNanosUtil A collection of static utility methods for manipulation of time measured in nanoseconds since Unix epoch. Porting Java class com.dxfeed.event.impl.TimeNanosUtil. TimeUtil A collection of static utility methods for manipulation of time measured in milliseconds since Unix epoch. Porting a Java class com.devexperts.util.TimeUtil."
  },
  "docs/api/DxFeed.Graal.Net.html": {
    "href": "docs/api/DxFeed.Graal.Net.html",
    "title": "Namespace DxFeed.Graal.Net | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net Classes SystemProperty Native wrapper over the Java java.lang.System class, contains work with property getter/setter methods. In Java world, these properties can be set by passing the \"-Dprop=value\" argument in command line or calls java.lang.System.setProperty(String key, String value). The location of the imported functions is in the header files \"dxfg_system.h\"."
  },
  "docs/api/index.html": {
    "href": "docs/api/index.html",
    "title": "API Documentation | dxFeed Graal .NET API",
    "keywords": "API Documentation With dxFeed .NET API you can start receiving your market events writing only several lines of code: using DxFeed.Graal.Net.Api; using DxFeed.Graal.Net.Events.Market; using var endpoint = DXEndpoint.Create().Connect(\"demo.dxfeed.com:7300\"); using var subscription = endpoint.GetFeed().CreateSubscription(typeof(Quote)); subscription.AddEventListener(events => { foreach (var e in events) { Console.WriteLine(e); } }); subscription.AddSymbols(\"AAPL\"); Console.ReadKey();"
  },
  "index.html": {
    "href": "index.html",
    "title": "| dxFeed Graal .NET API",
    "keywords": "This package provides access to dxFeed market data. The library is built as a language-specific wrapper over the dxFeed Graal Native library, which was compiled with GraalVM Native Image and dxFeed Java API (our flagman API). ℹ️ If you already use dxFeed .NET API, please see the Overview section. Table of Contents Overview Reasons for the New .NET API Repository Benefits of the New Version Milestones Future Development Migration Implementation Details Architectural Restrictions and Other Limitations in the Old Version Documentation Requirements Installation Usage How to connect to QD endpoint How to connect to dxLink Tools Samples Current State Dependencies 3rd Party Licenses Overview Reasons for the New .NET API Repository The old version of dxFeed .NET API is built as a thin wrapper over dxFeed C API, which has several architectural restrictions that prevent us from providing a state-of-the-art technological solution. Benefits of the New Version 🚀 Increased performance 🌌 Wider functionality ♊ Identical programming interfaces to our best API 👍 Higher quality of support and service Milestones Feature development has already stopped for the old version of dxFeed .NET API. The old version will be considered deprecated, and at the end of 2024, we plan to end the service. If you’re already our customer and have difficulty with a future transition, please contact us via our customer portal. Future Development Features planned with high priority: Add necessary entities for more convenient API usage (TimeSeriesEventModel, OrderBookModel, etc.) Implement a model of incremental updates in Java API and add it to .NET API Implement OrderBookModel with advanced logic (e.g., OnNewBook, OnBookUpdate, OnBookIncrementalChange) in Java API and add it to .NET API Add samples or implement a convenient API for Candlewebservice Migration To help you rewrite the existing API calls, we’ve prepared samples demonstrating how to work with the new API and how several functionalities are implemented. More examples will follow. The table below shows the sample mapping between the old and new versions. Our support team on our customer portal is ready to answer any questions and help with the transition. Sample Mapping # Sample Old Version New Version 1 How to get Instrument Profiles dxf_ipf_connect_sample DxFeedIpfConnect 2 How to get live updates for Instrument Profiles dxf_instrument_profile_live_sample DxFeedLiveIpfSample 3 How to subscribe to Order, SpreadOrder, Candle, TimeAndSale, Greeks, Series snapshots dxf_snapshot_sample Q2’2024, please see TBD section 4 How to subscribe to depth of market dxf_price_level_book_sample Q2’2024, please see TBD section 5 How to receive snapshots of TimeAndSale, Candle, Series, Greeks events on a given time interval without live subscription dxf_simple_data_retrieving_sample Q2’2024, please see TBD section 6 How to subscribe to order snapshot with incremental updates dxf_inc_order_snapshot_sample Q2’2024, please see TBD section 7 How to retrieve Candle data from the candle web service dxf_candle_data_retrieving_sample Q4’2024, please see TBD section 8 How to retrieve TimeAndSale data from the candle web service dxf_tns_data_retrieving_sample Q4’2024, please see TBD section Implementation Details We use GraalVM Native Image technology and specially written code that wraps Java methods into native ones to get dynamically linked libraries for different platforms (Linux, macOS, and Windows) based on the latest Java API package. Then, the resulting dynamic link library (dxFeed Graal-native) is used through C ABI (application binary interface), and we write programming interfaces that describe our business model (similar to Java API). As a result, we get a full-featured, similar performance as with Java API. Regardless of the language, writing the final application logic using API calls will be very similar (only the syntax will be amended, \"best practices\", specific language restrictions). Below is a scheme of this process: Architectural Restrictions and Other Limitations of the Old Version # Limitation How It’s Solved in the New Version 1 Windows support only Windows-x64, Linux-x64, macOS-x64, macOS-arm64 support by .NET 2 Single-threaded architecture limiting throughput Based on the Java API, each subscription object (DXFeedSubscription) can run on its own thread 3 User code in event callbacks (for example, OnQuote) is executed in the socket read thread, which can significantly reduce throughput Socket processing threads and callback threads are separated 4 In event callbacks, one market event type and one data portion always arrive (excluding snapshot subscription), which increases the load on the CPU with a large amount of incoming data Event callbacks can receive different market event types, and more than one by batch 5 It’s impossible to subscribe to data without getting regionals (if it is available for the market event) or only for a certain regional subscription.AddSymbols(\"AAPL\"); - composite subscription.AddSymbols(\"AAPL&Q\"); - regional 6 It’s impossible to subscribe to Order event (excluding snapshot subscription) without getting: all sources, Order by Quote (including regionals), Order by MarketMaker subscription.AddSymbols(new IndexedEventSubscriptionSymbol(\"AAPL\", OrderSource.NTV)); - Order.Source determines which data is being subscribed to 7 Data is mixed up when creating two subscriptions (regular and time series) for the same market event type. Both regular and time series data go to both subscriptions Each subscription instance receives only the data requested 8 Each subsequent request for the same symbol set in a subscription instance overwrites the existing one in another subscription instance Subscription instances and the data they receive are independent of each other 9 Removing a symbol from one subscription instance caused it to be removed from all others Subscription instances and the data they receive are independent of each other 10 Incorrect behavior when reading from a file (if a market event in the file hasn’t been subscribed to). Reading from a file always occurs at maximum speed. The supported format is binary only endpoint.Connect(@\"file:tape.txt[format=text]\"); - processing a text file with at it's \"real\" speed by timestamps endpoint.Connect(@\"file:tape.bin[format=binary,speed=max]\"); - processing a binary file with max speed Documentation Find useful information in our self-service dxFeed Knowledge Base or .NET API documentation: dxFeed Graal .NET API documentation dxFeed Knowledge Base Getting Started Troubleshooting Market Events Event Delivery contracts dxFeed API Event classes Exchange Codes Order Sources Order Book reconstruction Symbology Guide Requirements Windows Only x64 versions are supported. OS Version Architectures Windows 8, 8.1 x64 Windows 10 Version 1607+ x64 Windows 11 Version 22000+ x64 Windows Server 2012+ x64 Windows Server Core 2012+ x64 Nano Server Version 1809+ x64 Requirements .NET (not required for self-contained assemblies) Visual C++ Redistributable for Visual Studio 2015 Linux Only x64 versions are supported. Requirements .NET (not required for self-contained assemblies) Libc compatibility glibc: 2.35+ (from Ubuntu 22.04) musl: temporarily unsupported Libpthread compatibility A symlink on libpthread.so, libpthread.so.0, or libcoreclr.so must exist. macOS OS Version Architectures macOS 10.15+ x64 macOS 11+ Arm64 Is supported in the Rosetta 2 x64 emulator. Requirements .NET (not required for self-contained assemblies) Installation Add this package source to NuGet config. For example, you can create a NuGet.Config file in your solution folder with the following content: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"dxFeed\" value=\"https://dxfeed.jfrog.io/artifactory/api/nuget/v3/nuget-open\" protocolVersion=\"3\"/> </packageSources> </configuration> Then add the DxFeed.Graal.Net package to your project using the NuGet package manager. Usage How to connect to QD endpoint using System; using DxFeed.Graal.Net.Api; using DxFeed.Graal.Net.Events.Market; // For token-based authorization, use the following address format: // \"demo.dxfeed.com:7300[login=entitle:token]\" using var endpoint = DXEndpoint.Create().Connect(\"demo.dxfeed.com:7300\"); using var subscription = endpoint.GetFeed().CreateSubscription(typeof(Quote)); subscription.AddEventListener(events => { foreach (var e in events) { Console.WriteLine(e); } }); subscription.AddSymbols(\"AAPL\"); Console.ReadKey(); Output I 231130 141419.914 [main] QD - Using QDS-3.325+file-UNKNOWN, (C) Devexperts I 231130 141419.925 [main] QD - Using scheme com.dxfeed.api.impl.DXFeedScheme slfwemJduh1J7ibvy9oo8DABTNhNALFQfw0KmE40CMI I 231130 141419.934 [main] MARS - Started time synchronization tracker using multicast 239.192.51.45:5145 with SFmog I 231130 141419.937 [main] MARS - Started JVM self-monitoring I 231130 141419.938 [main] QD - qdnet with collectors [Ticker, Stream, History] I 231130 141419.950 [main] ClientSocket-Distributor - Starting ClientSocketConnector to demo.dxfeed.com:7300 I 231130 141419.950 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Resolving IPs for demo.dxfeed.com I 231130 141419.951 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Connecting to 208.93.103.170:7300 I 231130 141420.099 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Connected to 208.93.103.170:7300 D 231130 141420.246 [demo.dxfeed.com:7300-Reader] QD - Distributor received protocol descriptor multiplexor@fFLro [type=qtp, version=QDS-3.319, opt=hs, mars.root=mdd.demo-amazon.multiplexor-demo1] sending [TICKER, STREAM, HISTORY, DATA] from 208.93.103.170 Quote{AAPL, eventTime=0, time=20231130-135604.000+03:00, timeNanoPart=0, sequence=0, bidTime=20231130-135548+03:00, bidExchange=Q, bidPrice=189.43, bidSize=3, askTime=20231130-135604+03:00, askExchange=Q, askPrice=189.49, askSize=1} How to connect to dxLink using System; using DxFeed.Graal.Net; using DxFeed.Graal.Net.Api; using DxFeed.Graal.Net.Events.Market; // Enable experimental feature. SystemProperty.SetProperty(\"dxfeed.experimental.dxlink.enable\", \"true\"); // Set scheme for dxLink. SystemProperty.SetProperty(\"scheme\", \"ext:opt:sysprops,resource:dxlink.xml\"); // For token-based authorization, use the following address format: // \"dxlink:wss://demo.dxfeed.com/dxlink-ws[login=dxlink:token]\" using var endpoint = DXEndpoint.Create().Connect(\"dxlink:wss://demo.dxfeed.com/dxlink-ws\"); using var subscription = endpoint.GetFeed().CreateSubscription(typeof(Quote)); subscription.AddEventListener(events => { foreach (var e in events) { Console.WriteLine(e); } }); subscription.AddSymbols(\"AAPL\"); Console.ReadKey(); Output I 231130 141308.314 [main] QD - Using QDS-3.325+file-UNKNOWN, (C) Devexperts I 231130 141308.326 [main] QD - Using scheme com.dxfeed.api.impl.DXFeedScheme slfwemJduh1J7ibvy9oo8DABTNhNALFQfw0KmE40CMI I 231130 141308.351 [main] MARS - Started time synchronization tracker using multicast 239.192.51.45:5145 with DgKtZ I 231130 141308.358 [main] MARS - Started JVM self-monitoring I 231130 141308.359 [main] QD - qdnet with collectors [Ticker, Stream, History] I 231130 141308.384 [main] DxLinkClientWebSocket-Distributor - Starting DxLinkClientWebSocketConnector to wss://demo.dxfeed.com/dxlink-ws SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. I 231130 141308.392 [wss://demo.dxfeed.com/dxlink-ws-Writer] DxLinkClientWebSocket-Distributor - Connecting to wss://demo.dxfeed.com/dxlink-ws I 231130 141308.938 [wss://demo.dxfeed.com/dxlink-ws-Writer] DxLinkClientWebSocket-Distributor - Connected to wss://demo.dxfeed.com/dxlink-ws D 231130 141310.105 [oioEventLoopGroup-2-1] QD - Distributor received protocol descriptor [type=dxlink, version=0.1-0.18-20231017-133150, keepaliveTimeout=120, acceptKeepaliveTimeout=5] sending [] from wss://demo.dxfeed.com/dxlink-ws D 231130 141310.106 [oioEventLoopGroup-2-1] QD - Distributor received protocol descriptor [type=dxlink, version=0.1-0.18-20231017-133150, keepaliveTimeout=120, acceptKeepaliveTimeout=5, authentication=] sending [] from wss://demo.dxfeed.com/dxlink-ws Quote{AAPL, eventTime=0, time=20231130-135604.000+03:00, timeNanoPart=0, sequence=0, bidTime=20231130-135548+03:00, bidExchange=Q, bidPrice=189.43, bidSize=3, askTime=20231130-135604+03:00, askExchange=Q, askPrice=189.49, askSize=1} To familiarize with the dxLink protocol, please click here. Tools Tools is a collection of utilities that allow you to subscribe to various market events for the specified symbols. The tools can be downloaded from Release (including self-contained versions, that do not require .NET installation): Connect connects to the specified address(es) and subscribes to the specified events with the specified symbol Dump dumps all events received from address. This was designed to retrieve data from a file PerfTest connects to the specified address(es) and calculates performance counters (events per second, memory usage, CPU usage, etc.) LatencyTest connects to the specified address(es) and calculates latency Qds collection of tools ported from the Java qds-tools To run tools on macOS, it may be necessary to unquarantine them: sudo /usr/bin/xattr -r -d com.apple.quarantine <directory_with_tools> Samples ConvertTapeFile demonstrates how to convert one tape file to another tape file with optional intermediate processing or filtering DxFeedFileParser is a simple demonstration of how events are read form a tape file DxFeedSample is a simple demonstration of how to create multiple event listeners and subscribe to Quote and Trade events PrintQuoteEvents is a simple demonstration of how to subscribe to the Quote event, using a DxFeed instance singleton and dxfeed.properties file WriteTapeFile is a simple demonstration of how to write events to a tape file DxFeedIpfConnect is a simple demonstration of how to get Instrument Profiles DxFeedLiveIpfSample is a simple demonstration of how to get live updates for Instrument Profiles DxFeedPublishProfiles is a simple demonstration of how to publish market events ScheduleSample is a simple demonstration of how to get various scheduling information for instruments FetchDailyCandles is a simple demonstration of how to fetch last N-days of candles for a specified symbol Current State Endpoint Roles FEED connects to the remote data feed provider and is optimized for real-time or delayed data processing, this is a default role (.NET API sample) STREAM_FEED is similar to Feed and also connects to the remote data feed provider but is designed for bulk data parsing from files (.NET API sample) PUBLISHER connects to the remote publisher hub (also known as multiplexor) or creates a publisher on the local host (.NET API sample) STREAM_PUBLISHER is similar to Publisher and also connects to the remote publisher hub, but is designed for bulk data publishing (.NET API sample) LOCAL_HUB is a local hub without the ability to establish network connections. Events published via Publisher are delivered to local Feed only ON_DEMAND_FEED is similar to Feed, but it is designed to be used with OnDemandService for historical data replay only Event Types Order is a snapshot of the full available market depth for a symbol SpreadOrder is a snapshot of the full available market depth for all spreads AnalyticOrder is an Order extension that introduces analytic information, such as adding iceberg-related information to a given order Trade is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover TradeETH is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover Candle event with open, high, low, and close prices and other information for a specific period Quote is a snapshot of the best bid and ask prices and other fields that change with each quote Profile is a snapshot that contains the security instrument description Summary is a snapshot of the trading session, including session highs, lows, etc. TimeAndSale represents a trade or other market event with price, such as the open/close price of a market, etc. Greeks is a snapshot of the option price, Black-Scholes volatility, and greeks Series is a snapshot of computed values available for all options series for a given underlying symbol based on options market prices TheoPrice is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation Underlying is a snapshot of computed values available for an option underlying symbol based on the market’s option prices OptionSale represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying Configuration is an event with an application-specific attachment Message is an event with an application-specific attachment Subscription Symbols String is a string representation of the symbol TimeSeriesSubscriptionSymbol represents subscription to time-series events IndexedEventSubscriptionSymbol represents subscription to a specific source of indexed events WildcardSymbol.ALL represents a wildcard subscription to all events of the specific event type CandleSymbol is a symbol used with DXFeedSubscription class to subscribe for Candle events Subscriptions & Models DXFeedSubscription is a subscription for a set of symbols and event types DXFeedTimeSeriesSubscription extends DXFeedSubscription to conveniently subscribe to time series events for a set of symbols and event types (Java API sample) ObservableSubscription is an observable set of subscription symbols for the specific event type (Java API sample) GetLastEvent returns the last event for the specified event instance (Java API sample) GetLastEvents returns the last events for the specified event instances list GetLastEventPromise requests the last event for the specified event type and symbol GetLastEventsPromises requests the last events for the specified event type and symbol collection GetLastEventIfSubscribed returns the last event for the specified event type and symbol if there’s a subscription for it GetIndexedEventsPromise requests an indexed events list for the specified event type, symbol, and source GetIndexedEventsIfSubscribed returns a list of indexed events for the specified event type, symbol, and source, if there’s a subscription for it GetTimeSeriesPromise requests time series events for the specified event type, symbol, and time range GetTimeSeriesIfSubscribed requests time series events for the specified event type, symbol, and time range if there’s a subscription for it TimeSeriesEventModel is a model of a list of time series events (Java API sample) IndexedEventModel is an indexed event list model (Java API sample) OrderBookModel is a model of convenient Order Book management (Java API sample) IPF & Schedule InstrumentProfile represents basic profile information about a market instrument (Java API sample) InstrumentProfileReader reads instrument profiles from the stream using Instrument Profile Format (IPF) InstrumentProfileCollector collects instrument profile updates and provides the live instrument profiles list (Java API sample) InstrumentProfileConnection connects to an instrument profile URL and reads instrument profiles with support of streaming live updates Schedule provides an API to retrieving and exploring the trading schedules of various exchanges and different financial instrument classes (Java API sample) Option Series is a series of call and put options with different strike sharing the same attributes of expiration, last trading day, spc, multiplies, etc. (Java API sample) Services OnDemandService provides on-demand historical tick data replay controls (Java API sample)"
  }
}