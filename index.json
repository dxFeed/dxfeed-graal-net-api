{
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Builder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Builder.html",
    "title": "Class DXEndpoint.Builder | dxFeed Graal .NET API",
    "keywords": "Class DXEndpoint.Builder Builder class for DXEndpoint that supports additional configuration properties. Porting a Java class com.dxfeed.api.DXEndpoint.Builder. For more details see Javadoc. Default properties file The Build() method tries to load the default property file for the Feed, OnDemandFeed and Publisher role. The default properties file is loaded only if there are no system properties (SystemProperty) or user properties (WithProperty(string, string)) set with the same key (DXFeedPropertiesProperty, DXPublisherPropertiesProperty) and the file exists and is readable. This file must be in the Java properties file format. Endpoint name If no endpoint name has been specified (WithName(string)), the default name will be used. The default name includes a counter that increments each time an endpoint is created (\"qdnet\", \"qdnet-1\", etc.). To get the name of the created endpoint, call the GetName() method. Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. Inheritance object DXEndpoint.Builder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public class DXEndpoint.Builder Methods | Edit this page View Source Build() Builds DXEndpoint instance. This method tries to load default properties file. Declaration public DXEndpoint Build() Returns Type Description DXEndpoint The created DXEndpoint. Exceptions Type Condition JavaException If the error occurred on the java side. | Edit this page View Source SupportsProperty(string) Checks if the corresponding property key is supported. Declaration public bool SupportsProperty(string key) Parameters Type Name Description string key The name of the property. Returns Type Description bool Returns true if the corresponding property key is supported; otherwise, false. Exceptions Type Condition ArgumentNullException If the key is null. | Edit this page View Source WithName(string) Changes name that is used to distinguish multiple DXEndpoint in the same in logs and in other diagnostic means. This is a shortcut for WithProperty(DXEndpoint.NameProperty, name). Declaration public DXEndpoint.Builder WithName(string name) Parameters Type Name Description string name The endpoint name. Returns Type Description DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions Type Condition ArgumentNullException If the name is null. | Edit this page View Source WithProperties(IReadOnlyDictionary<string, string>) Sets the specified properties from the provided key-value collection. Unsupported properties are ignored. Declaration public DXEndpoint.Builder WithProperties(IReadOnlyDictionary<string, string> properties) Parameters Type Name Description IReadOnlyDictionary<string, string> properties The key-value collection. Returns Type Description DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions Type Condition ArgumentNullException If key or value inside the properties is null. | Edit this page View Source WithProperty(KeyValuePair<string, string>) Sets the specified property. Unsupported properties are ignored. Declaration public DXEndpoint.Builder WithProperty(KeyValuePair<string, string> kvp) Parameters Type Name Description KeyValuePair<string, string> kvp The key-value pair. Returns Type Description DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions Type Condition ArgumentNullException If key or value is null. | Edit this page View Source WithProperty(string, string) Sets the specified property. Unsupported properties are ignored. Declaration public DXEndpoint.Builder WithProperty(string key, string value) Parameters Type Name Description string key The name of the property. string value The value of the property. Returns Type Description DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions Type Condition ArgumentNullException If key or value is null. | Edit this page View Source WithRole(Role) Sets role for the created DXEndpoint. Default role is Feed. Declaration public DXEndpoint.Builder WithRole(DXEndpoint.Role role) Parameters Type Name Description DXEndpoint.Role role The endpoint role. Returns Type Description DXEndpoint.Builder Returns this DXEndpoint.Builder. Exceptions Type Condition ArgumentException If the role does not exist."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Role.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.Role.html",
    "title": "Enum DXEndpoint.Role | dxFeed Graal .NET API",
    "keywords": "Enum DXEndpoint.Role A list of endpoint roles. Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public enum DXEndpoint.Role Fields Name Description Feed Feed endpoint connects to the remote data feed provider and is optimized for real-time or delayed data processing (this is a default role). GetFeed() method returns feed object that subscribes to the remote data feed provider and receives events from it. When event processing threads cannot keep up (don't have enough CPU time), data is dynamically conflated to minimize latency between received events and their processing time. LocalHub LocalHub endpoint is a local hub without ability to establish network connections. Events that are published via GetPublisher() are delivered to local GetFeed() only. OnDemandFeed OnDemandFeed endpoint is similar to Feed, but it is designed to be used with OnDemandService for historical data replay only. Publisher Publisher endpoint connects to the remote publisher hub (also known as multiplexor) or creates a publisher on the local host. GetPublisher() method returns a publisher object that publishes events to all connected feeds. StreamFeed StreamFeed endpoint is similar to Feed and also connects to the remote data feed provider, is designed for bulk parsing of data from files. GetFeed() method returns feed object that subscribes to the data from the opened files and receives events from them. Events from the files are not conflated, are not skipped, and are processed as fast as possible. StreamPublisher StreamPublisher endpoint is similar to Publisher and also connects to the remote publisher hub, but is designed for bulk publishing of data. GetPublisher() method returns a publisher object that publishes events to all connected feeds. Published events are not conflated, are not skipped, and are processed as fast as possible."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.State.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.State.html",
    "title": "Enum DXEndpoint.State | dxFeed Graal .NET API",
    "keywords": "Enum DXEndpoint.State A list of endpoint states. Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public enum DXEndpoint.State Fields Name Description Closed Endpoint was Close(). Connected The connection to remote endpoint is established. Connecting The Connect(string) method was called to establish connection to remove endpoint, but connection is not actually established yet or was lost. NotConnected Endpoint was created by is not connected to remote endpoints."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.StateChangeListenerCallback.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.StateChangeListenerCallback.html",
    "title": "Delegate DXEndpoint.StateChangeListenerCallback | dxFeed Graal .NET API",
    "keywords": "Delegate DXEndpoint.StateChangeListenerCallback Notifies a change in the state of this endpoint. Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public delegate void DXEndpoint.StateChangeListenerCallback(DXEndpoint.State oldState, DXEndpoint.State newState) Parameters Type Name Description DXEndpoint.State oldState The old state of endpoint. DXEndpoint.State newState The new state of endpoint."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXEndpoint.html",
    "title": "Class DXEndpoint | dxFeed Graal .NET API",
    "keywords": "Class DXEndpoint Manages network connections to DXFeed or DXPublisher. Porting a Java class com.dxfeed.api.DXEndpoint. For more details see Javadoc. There are ready-to-use singleton instances that are available with GetInstance() and GetInstance(Role) methods as wel as factory methods Create() and Create(Role), and a number of configuration methods. Advanced properties can be configured with DXEndpoint.Builder (creates with NewBuilder()). Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. Lifetimes This class will not be garbage-collected and its resources will not be freed until Dispose(), Close() or CloseAndAwaitTermination() methods are called. Calling these methods ensures that instance can be safely garbage-collected when all outside references to it are lost. If a reference to an instance of this class is lost before calling the above methods, it causes a memory/resource leak. This behavior was implemented intentionally. Inner instances of DXFeed and DXPublisher have the same lifetime as DXEndpoint. DXFeed and DXPublisher have no public resource release methods, and exist as long as DXEndpoint exists. Inheritance object DXEndpoint Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public sealed class DXEndpoint : IDisposable Examples DXFeed feed = DXEndpoint.Create() .User(\"demo\").Password(\"demo\") .Connect(\"demo.dxfeed.com:7300\") .GetFeed(); Fields | Edit this page View Source DXEndpointEventTimeProperty Set this property to true to enable EventTime support. By default, the endpoint does not support event time. The event time is available only when the corresponding DXEndpoint is created with this property and the data source has embedded event times. This is typically true only for data events that are read from historical tape files. Events that are coming from a network connections do not have an embedded event time information and event time is not available for them anyway. Declaration public const string DXEndpointEventTimeProperty = \"dxendpoint.eventTime\" Field Value Type Description string | Edit this page View Source DXEndpointStoreEverythingProperty Set this property to to store all ILastingEvent and ILastingEvent events even when there is no subscription on them. By default, the endpoint stores only events from subscriptions. It works in the same way both for DXFeed and DXPublisher. Use this property with extreme care, since API does not currently provide any means to remove those events from the storage and there might be an effective memory leak if the spaces of symbols on which events are published grows without bound. Declaration public const string DXEndpointStoreEverythingProperty = \"dxendpoint.storeEverything\" Field Value Type Description string | Edit this page View Source DXFeedAddressProperty Defines default connection address for an endpoint with role Feed or OnDemandFeed. Connection is established to this address by role Feed as soon as endpoint is created. By default, without this property, connection is not established until Connect(string) is invoked. Credentials for access to premium services may be configured with DXFeedUserProperty and DXFeedPasswordProperty. Declaration public const string DXFeedAddressProperty = \"dxfeed.address\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXFeedAggregationPeriodProperty Defines data aggregation period an endpoint with role Feed that limits the rate of data notifications. For example, setting the value of this property to \"0.1s\" limits notification to once every 100ms (at most 10 per second). Declaration public const string DXFeedAggregationPeriodProperty = \"dxfeed.aggregationPeriod\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXFeedPasswordProperty Defines default password for an endpoint with role Feed or OnDemandFeed. Declaration public const string DXFeedPasswordProperty = \"dxfeed.password\" Field Value Type Description string See Also Password(string) | Edit this page View Source DXFeedPropertiesProperty Defines path to a file with properties for an endpoint with role Feed or OnDemandFeed. This file must be in the Java properties file format. This property can also be set using SetProperty(string, string), as the default property for all instances DXEndpoint with Feed or or OnDemandFeed role. When the path to this properties file not provided (SetProperty(string, string) and WithProperty(string, string)), the file \"dxfeed.properties\" loaded from current runtime directory. It means that the corresponding file can be placed into the current directory with any need to specify additional properties. Declaration public const string DXFeedPropertiesProperty = \"dxfeed.properties\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXFeedThreadPoolSizeProperty Defines thread pool size for an endpoint with role Feed. By default, the thread pool size is equal to the number of available processors. Declaration public const string DXFeedThreadPoolSizeProperty = \"dxfeed.threadPoolSize\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXFeedUserProperty Defines default user name for an endpoint with role Feed or OnDemandFeed. Declaration public const string DXFeedUserProperty = \"dxfeed.user\" Field Value Type Description string See Also User(string) | Edit this page View Source DXFeedWildcardEnableProperty Set this property to true to turns on wildcard support. By default, the endpoint does not support wildcards. This property is needed for WildcardSymbol support and for the use of \"tape:...\" address in DXPublisher. Declaration public const string DXFeedWildcardEnableProperty = \"dxfeed.wildcard.enable\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXPublisherAddressProperty Defines default connection address for an endpoint with role Publisher. Connection is established to this address as soon as endpoint is created. By default, connection is not established until Connect(string) is invoked. Declaration public const string DXPublisherAddressProperty = \"dxpublisher.address\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXPublisherPropertiesProperty Defines path to a file with properties for an endpoint with role Publisher. This file must be in the Java properties file format. This property can also be set using SetProperty(string, string), as the default property for all instances DXEndpoint with Publisher role. When the path to this properties file not provided (SetProperty(string, string) and WithProperty(string, string)), the file \"dxpublisher.properties\" loaded from current runtime directory. It means that the corresponding file can be placed into the current directory with any need to specify additional properties. Declaration public const string DXPublisherPropertiesProperty = \"dxpublisher.properties\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXPublisherThreadPoolSizeProperty Defines thread pool size for an endpoint with role Publisher. By default, the thread pool size is equal to the number of available processors. Declaration public const string DXPublisherThreadPoolSizeProperty = \"dxpublisher.threadPoolSize\" Field Value Type Description string See Also WithProperty(string, string) | Edit this page View Source DXSchemeEnabledPropertyPrefix Defines whether a specified field from the scheme should be enabled instead of it's default behaviour. Use it according to following format: dxscheme.enabled.field_property_name=event_name_mask_glob For example, dxscheme.enabled.TimeNanoPart=Trade enables NanoTimePart internal field only in Trade events. There is a shortcut for turning on nano-time support using DXSchemeNanoTimeProperty. Declaration public const string DXSchemeEnabledPropertyPrefix = \"dxscheme.enabled.\" Field Value Type Description string | Edit this page View Source DXSchemeNanoTimeProperty Set this property to true to turn on nanoseconds precision business time. By default, this feature is turned off. Business time in most events is available with millisecond precision by default, while Quote events business Time is available with seconds precision. This method provides a higher-level control than turning on individual properties that are responsible for nano-time via DXSchemeEnabledPropertyPrefix. The later can be used to override of fine-time nano-time support for individual fields. Setting this property to true is essentially equivalent to setting: dxscheme.enabled.Sequence=* dxscheme.enabled.TimeNanoPart=* Declaration public const string DXSchemeNanoTimeProperty = \"dxscheme.nanoTime\" Field Value Type Description string | Edit this page View Source NameProperty Defines property for endpoint name that is used to distinguish multiple endpoints in the same JVM in logs and in other diagnostic means. Use WithProperty(string, string) method. This property is also changed by WithName(string) method. Declaration public const string NameProperty = \"name\" Field Value Type Description string Methods | Edit this page View Source AddStateChangeListener(StateChangeListenerCallback) Adds listener that is notified about changes in GetState() property. Installed listener can be removed with RemoveStateChangeListener(StateChangeListenerCallback) method. Declaration public void AddStateChangeListener(DXEndpoint.StateChangeListenerCallback listener) Parameters Type Name Description DXEndpoint.StateChangeListenerCallback listener The listener to add. | Edit this page View Source AwaitNotConnected() Waits while this endpoint DXEndpoint.State becomes NotConnected or Closed. It is a signal that any files that were opened with Connect(\"file:...\") method were finished reading, but not necessary were completely processed by the corresponding subscription listeners. Use CloseAndAwaitTermination() after this method returns to make sure that all processing has completed. This method is blocking. Declaration public void AwaitNotConnected() | Edit this page View Source AwaitProcessed() Waits until this endpoint stops processing data (becomes quiescent). This is important when writing data to file via \"tape:...\" connector to make sure that all published data was written before closing this endpoint. This method is blocking. Declaration public void AwaitProcessed() | Edit this page View Source Close() Closes this endpoint. All network connection are terminated as with Disconnect() method and no further connections can be established. The endpoint DXEndpoint.State immediately becomes Closed. This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. Declaration public void Close() | Edit this page View Source CloseAndAwaitTermination() Closes this endpoint and wait until all pending data processing tasks are completed. This method performs the same actions as close Close(), but also awaits termination of all outstanding data processing tasks. It is designed to be used with StreamFeed role after AwaitNotConnected() method returns to make sure that file was completely processed. This method is blocking. This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. Declaration public void CloseAndAwaitTermination() | Edit this page View Source Connect(string) Connects to the specified remote address. Previously established connections are closed if the new address is different from the old one. This method does nothing if address does not change or if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes Connecting otherwise. The address string is provided with the market data vendor agreement. Use \"demo.dxfeed.com:7300\" for a demo quote feed. host:port to establish a TCP/IP connection. :port to listen for a TCP/IP connection with a plain socket connector (good for up to a few hundred of connections). For premium services access credentials must be configured before invocation of Connect(string) method using User(string) and Password(string) methods. This method does not wait until connection actually gets established. The actual connection establishment happens asynchronously after the invocation of this method. However, this method waits until notification about state transition from NotConnected to Connecting gets processed by all DXEndpoint.StateChangeListenerCallback that were installed via AddStateChangeListener(StateChangeListenerCallback) method. Declaration public DXEndpoint Connect(string address) Parameters Type Name Description string address The data source address. Returns Type Description DXEndpoint Returns this DXEndpoint. Exceptions Type Condition ArgumentNullException If address is null. JavaException If address string is malformed. | Edit this page View Source Create() Creates an endpoint with a role Feed. Declaration public static DXEndpoint Create() Returns Type Description DXEndpoint The created DXEndpoint. | Edit this page View Source Create(Role) Creates an endpoint with a specified DXEndpoint.Role. Declaration public static DXEndpoint Create(DXEndpoint.Role role) Parameters Type Name Description DXEndpoint.Role role The specified DXEndpoint.Role. Returns Type Description DXEndpoint The created DXEndpoint. | Edit this page View Source Disconnect() Terminates all remote network connections. This method does nothing if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes NotConnected otherwise. This method does not release all resources that are associated with this endpoint. Use Close(), Dispose() or CloseAndAwaitTermination() methods to release all resources. Declaration public void Disconnect() | Edit this page View Source DisconnectAndClear() Terminates all remote network connections and clears stored data. This method does nothing if this endpoint is Closed. The endpoint DXEndpoint.State immediately becomes NotConnected otherwise. This method does not release all resources that are associated with this endpoint. Use Close(), Dispose() or CloseAndAwaitTermination() methods to release all resources. Declaration public void DisconnectAndClear() | Edit this page View Source Dispose() Closes this endpoint and releases all resources used by the current instance of the DXEndpoint class. This is the same as Close(). This method ensures that DXEndpoint can be safely garbage-collected when all outside references to it are lost. Declaration public void Dispose() | Edit this page View Source GetFeed() Gets DXFeed that is associated with this endpoint. Declaration public DXFeed GetFeed() Returns Type Description DXFeed The DXFeed. | Edit this page View Source GetInstance() Gets a default application-wide singleton instance of DXEndpoint with a Feed role. Most applications use only a single data-source and should rely on this method to get one. Declaration public static DXEndpoint GetInstance() Returns Type Description DXEndpoint Returns singleton instance of DXEndpoint. | Edit this page View Source GetInstance(Role) Gets a default application-wide singleton instance of DXEndpoint with a specific DXEndpoint.Role. Most applications use only a single data-source and should rely on this method to get one. Declaration public static DXEndpoint GetInstance(DXEndpoint.Role role) Parameters Type Name Description DXEndpoint.Role role The DXEndpoint.Role. Returns Type Description DXEndpoint Returns singleton instance of DXEndpoint. | Edit this page View Source GetName() Gets endpoint name. Declaration public string GetName() Returns Type Description string Returns endpoint name. | Edit this page View Source GetPublisher() Gets DXPublisher that is associated with this endpoint. Declaration public DXPublisher GetPublisher() Returns Type Description DXPublisher The DXPublisher. | Edit this page View Source GetRole() Gets the DXEndpoint.Role of this endpoint. Declaration public DXEndpoint.Role GetRole() Returns Type Description DXEndpoint.Role The DXEndpoint.Role. | Edit this page View Source GetState() Gets the DXEndpoint.State of this endpoint. Declaration public DXEndpoint.State GetState() Returns Type Description DXEndpoint.State The DXEndpoint.State. | Edit this page View Source IsClosed() Gets a value indicating whether if this endpoint is closed. There is a shortcut for GetState() == Closed. Declaration public bool IsClosed() Returns Type Description bool Returns true if this endpoint is closed. | Edit this page View Source NewBuilder() Creates new DXEndpoint.Builder instance. Use Build() to build an instance of DXEndpoint when all configuration properties were set. Declaration public static DXEndpoint.Builder NewBuilder() Returns Type Description DXEndpoint.Builder The created DXEndpoint.Builder instance. | Edit this page View Source Password(string) Changes password for this endpoint. This method shall be called before Connect(string) together with User(string) to configure service access credentials. Declaration public DXEndpoint Password(string password) Parameters Type Name Description string password The user password. Returns Type Description DXEndpoint Returns this DXEndpoint. Exceptions Type Condition ArgumentNullException If password is null. | Edit this page View Source Reconnect() Terminates all established network connections and initiates connecting again with the same address. The effect of the method is alike to invoking Disconnect() and Connect(string) with the current address, but internal resources used for connections may be reused by implementation. TCP connections with multiple target addresses will try switch to an alternative address, configured reconnect timeouts will apply. Note: The method will not connect endpoint that was not initially connected with Connect(string) method or was disconnected with Disconnect() method. The method initiates a short-path way for reconnecting, so whether observers will have a chance to see an intermediate state NotConnected depends on the implementation. Declaration public void Reconnect() | Edit this page View Source RemoveStateChangeListener(StateChangeListenerCallback) Removes listener that is notified about changes in GetState() property. It removes the listener that was previously installed with AddStateChangeListener(StateChangeListenerCallback) method. Declaration public void RemoveStateChangeListener(DXEndpoint.StateChangeListenerCallback listener) Parameters Type Name Description DXEndpoint.StateChangeListenerCallback listener The listener to remove. | Edit this page View Source User(string) Changes user name for this endpoint. This method shall be called before Connect(string) together with Password(string) to configure service access credentials. Declaration public DXEndpoint User(string user) Parameters Type Name Description string user The user name. Returns Type Description DXEndpoint Returns this DXEndpoint. Exceptions Type Condition ArgumentNullException If user is null. Implements IDisposable"
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeed.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeed.html",
    "title": "Class DXFeed | dxFeed Graal .NET API",
    "keywords": "Class DXFeed Main entry class for dxFeed API. This class is a wrapper for FeedNative. Read it first Javadoc. Inheritance object DXFeed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public class DXFeed Methods | Edit this page View Source AttachSubscription(DXFeedSubscription) Attaches the given subscription to this feed. This method does nothing if the corresponding subscription is already attached to this feed. Javadoc. Declaration public void AttachSubscription(DXFeedSubscription subscription) Parameters Type Name Description DXFeedSubscription subscription The subscription. | Edit this page View Source CreateSubscription(IEnumerable<Type>) Creates new subscription for a list of event types that is attached to this feed. Javadoc. Declaration public DXFeedSubscription CreateSubscription(IEnumerable<Type> eventTypes) Parameters Type Name Description IEnumerable<Type> eventTypes The list of event types. Events types must be implement IEventType and have EventCodeAttribute. Returns Type Description DXFeedSubscription The created subscription. Exceptions Type Condition ArgumentException If one on the specified Type has no EventCodeAttribute. | Edit this page View Source CreateSubscription(params Type[]) Creates new subscription for a list of event types that is attached to this feed. Javadoc. Declaration public DXFeedSubscription CreateSubscription(params Type[] eventTypes) Parameters Type Name Description Type[] eventTypes The list of event types. Events types must be implement IEventType and have EventCodeAttribute. Returns Type Description DXFeedSubscription The created DXFeedSubscription. Exceptions Type Condition ArgumentException If one on the specified Type has no EventCodeAttribute. | Edit this page View Source DetachSubscription(DXFeedSubscription) Detaches the given subscription from this feed and clears data delivered to this subscription by publishing empty events. This method does nothing if the corresponding subscription is not attached to this feed. Javadoc. Declaration public void DetachSubscription(DXFeedSubscription subscription) Parameters Type Name Description DXFeedSubscription subscription The subscription. | Edit this page View Source DetachSubscriptionAndClear(DXFeedSubscription) Detaches the given subscription from this feed and clears data delivered to this subscription by publishing empty events. This method does nothing if the corresponding subscription is not attached to this feed. Javadoc. Declaration public void DetachSubscriptionAndClear(DXFeedSubscription subscription) Parameters Type Name Description DXFeedSubscription subscription The subscription. | Edit this page View Source GetInstance() Gets a default application-wide singleton instance of feed. Most applications use only a single data-source and should rely on this method to get one. Javadoc. Declaration public static DXFeed GetInstance() Returns Type Description DXFeed The DXFeed."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeedEventListener.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeedEventListener.html",
    "title": "Delegate DXFeedEventListener | dxFeed Graal .NET API",
    "keywords": "Delegate DXFeedEventListener The listener delegate for receiving events. Invoked when events of type are received. Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public delegate void DXFeedEventListener(IEnumerable<IEventType> events) Parameters Type Name Description IEnumerable<IEventType> events The collection of received events."
  },
  "docs/api/DxFeed.Graal.Net.Api.DXFeedSubscription.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXFeedSubscription.html",
    "title": "Class DXFeedSubscription | dxFeed Graal .NET API",
    "keywords": "Class DXFeedSubscription Subscription for a set of symbols and event types. This class is a wrapper for SubscriptionNative. For more details see Javadoc. Inheritance object DXFeedSubscription Implements IObservableSubscription IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public sealed class DXFeedSubscription : IObservableSubscription, IDisposable Properties | Edit this page View Source IsClosed Gets a value indicating whether if this subscription is closed. Javadoc. Declaration public bool IsClosed { get; } Property Value Type Description bool Methods | Edit this page View Source AddEventListener(DXFeedEventListener) Adds listener for events. Event lister can be added only when subscription is not producing any events. The subscription must be either empty (no symbols have been added) or not attached to any feed. This method does nothing if this subscription is closed. Javadoc. Declaration public void AddEventListener(DXFeedEventListener listener) Parameters Type Name Description DXFeedEventListener listener The event listener. | Edit this page View Source AddSymbols(IEnumerable<object>) Adds the specified collection of symbols to the set of subscribed symbols. All registered event listeners will receive update on the last events for all newly added symbols. Javadoc. Declaration public void AddSymbols(IEnumerable<object> symbols) Parameters Type Name Description IEnumerable<object> symbols The collection of symbols. | Edit this page View Source AddSymbols(params object[]) Adds the specified collection of symbols to the set of subscribed symbols. All registered event listeners will receive update on the last events for all newly added symbols. Javadoc. Declaration public void AddSymbols(params object[] symbols) Parameters Type Name Description object[] symbols The collection of symbols. | Edit this page View Source Attach(DXFeed) Attaches subscription to the specified feed. Declaration public void Attach(DXFeed feed) Parameters Type Name Description DXFeed feed The DXFeed to attach to. | Edit this page View Source Clear() Clears the set of subscribed symbols. Javadoc. Declaration public void Clear() | Edit this page View Source Close() Closes this subscription and makes it permanently detached. Javadoc. Declaration public void Close() | Edit this page View Source Detach(DXFeed) Detaches subscription from the specified feed. Declaration public void Detach(DXFeed feed) Parameters Type Name Description DXFeed feed The DXFeed to detach from. | Edit this page View Source Dispose() Releases all resources used by the current instance of the DXFeedSubscription class. Declaration public void Dispose() | Edit this page View Source GetEventTypes() Gets a set of subscribed event types. The resulting set cannot be modified. Javadoc. Declaration public IReadOnlySet<Type> GetEventTypes() Returns Type Description IReadOnlySet<Type> Returns a set of subscribed event types. | Edit this page View Source IsContainsEventType(Type) Gets a value indicating whether if this subscription contains the corresponding event type. Javadoc. Declaration public bool IsContainsEventType(Type eventType) Parameters Type Name Description Type eventType The event type. Returns Type Description bool Returns true if this subscription contains the corresponding event type. | Edit this page View Source RemoveEventListener(DXFeedEventListener) Removes listener for events. Javadoc. Declaration public void RemoveEventListener(DXFeedEventListener listener) Parameters Type Name Description DXFeedEventListener listener The event listener. | Edit this page View Source RemoveSymbols(IEnumerable<object>) Removes the specified collection of symbols from the set of subscribed symbols. Javadoc. Declaration public void RemoveSymbols(IEnumerable<object> symbols) Parameters Type Name Description IEnumerable<object> symbols The collection of symbols. | Edit this page View Source RemoveSymbols(params object[]) Removes the specified collection of symbols from the set of subscribed symbols. Javadoc. Declaration public void RemoveSymbols(params object[] symbols) Parameters Type Name Description object[] symbols The collection of symbols. Implements IObservableSubscription IDisposable"
  },
  "docs/api/DxFeed.Graal.Net.Api.DXPublisher.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.DXPublisher.html",
    "title": "Class DXPublisher | dxFeed Graal .NET API",
    "keywords": "Class DXPublisher Provides API for publishing of events to local or remote DXFeed. This class is a wrapper for PublisherNative. For more details see Javadoc. Inheritance object DXPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Api Assembly: DxFeed.Graal.Net.dll Syntax public class DXPublisher Properties | Edit this page View Source Instance Gets a default application-wide singleton instance of DXPublisher. Javadoc. Declaration public static DXPublisher Instance { get; } Property Value Type Description DXPublisher Methods | Edit this page View Source PublishEvents(params IEventType[]) Publishes events to the corresponding feed. If the DXEndpoint of this publisher has Publisher role and it is connected, the published events will be delivered to the remote endpoints. Local GetFeed() will always receive published events. Javadoc. Declaration public void PublishEvents(params IEventType[] events) Parameters Type Name Description IEventType[] events The list of events to publish. | Edit this page View Source PublishEvents(IEnumerable<IEventType>) Publishes events to the corresponding feed. If the DXEndpoint of this publisher has Publisher role and it is connected, the published events will be delivered to the remote endpoints. Local GetFeed() will always receive published events. Javadoc. Declaration public void PublishEvents(IEnumerable<IEventType> events) Parameters Type Name Description IEnumerable<IEventType> events The collection of events to publish."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IObservableSubscription.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IObservableSubscription.html",
    "title": "Interface IObservableSubscription | dxFeed Graal .NET API",
    "keywords": "Interface IObservableSubscription Observable set of subscription symbols for the specific event type. For more details see Javadoc. Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public interface IObservableSubscription Properties | Edit this page View Source IsClosed Gets a value indicating whether if this subscription is closed. Javadoc. Declaration bool IsClosed { get; } Property Value Type Description bool Methods | Edit this page View Source GetEventTypes() Gets a set of subscribed event types. The resulting set cannot be modified. Javadoc. Declaration IReadOnlySet<Type> GetEventTypes() Returns Type Description IReadOnlySet<Type> Returns a set of subscribed event types. | Edit this page View Source IsContainsEventType(Type) Gets a value indicating whether if this subscription contains the corresponding event type. Javadoc. Declaration bool IsContainsEventType(Type eventType) Parameters Type Name Description Type eventType The event type. Returns Type Description bool Returns true if this subscription contains the corresponding event type."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol-1.html",
    "title": "Class IndexedEventSubscriptionSymbol<T> | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSubscriptionSymbol<T> Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. Inheritance object IndexedEventSubscriptionSymbol<T> IndexedEventSubscriptionSymbol TimeSeriesSubscriptionSymbol<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public class IndexedEventSubscriptionSymbol<T> Type Parameters Name Description T The type of event symbol. Constructors | Edit this page View Source IndexedEventSubscriptionSymbol(T, IndexedEventSource) Initializes a new instance of the IndexedEventSubscriptionSymbol<T> class with a specified event symbol and source. Declaration public IndexedEventSubscriptionSymbol(T eventSymbol, IndexedEventSource source) Parameters Type Name Description T eventSymbol The event symbol. IndexedEventSource source The event source. Exceptions Type Condition ArgumentNullException If eventSymbol or source are null. Properties | Edit this page View Source EventSymbol Gets event symbol. Declaration public T EventSymbol { get; } Property Value Type Description T | Edit this page View Source Source Gets indexed event source. Declaration public IndexedEventSource Source { get; } Property Value Type Description IndexedEventSource Methods | Edit this page View Source Equals(object?) Indicates whether some other indexed event subscription symbol has the same EventSymbol and Source. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.IndexedEventSubscriptionSymbol.html",
    "title": "Class IndexedEventSubscriptionSymbol | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSubscriptionSymbol Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. Inheritance object IndexedEventSubscriptionSymbol<object> IndexedEventSubscriptionSymbol Inherited Members IndexedEventSubscriptionSymbol<object>.EventSymbol IndexedEventSubscriptionSymbol<object>.Source IndexedEventSubscriptionSymbol<object>.ToString() IndexedEventSubscriptionSymbol<object>.Equals(object) IndexedEventSubscriptionSymbol<object>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public class IndexedEventSubscriptionSymbol : IndexedEventSubscriptionSymbol<object> Constructors | Edit this page View Source IndexedEventSubscriptionSymbol(object, IndexedEventSource) Initializes a new instance of the IndexedEventSubscriptionSymbol class with a specified event symbol and source. Declaration public IndexedEventSubscriptionSymbol(object eventSymbol, IndexedEventSource source) Parameters Type Name Description object eventSymbol The event symbol. IndexedEventSource source The event source. Exceptions Type Condition ArgumentNullException If eventSymbol or source are null."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol-1.html",
    "title": "Class TimeSeriesSubscriptionSymbol<T> | dxFeed Graal .NET API",
    "keywords": "Class TimeSeriesSubscriptionSymbol<T> Represents subscription to time-series of events. Instances of this class can be used with {@link DXFeedSubscription} to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. Inheritance object IndexedEventSubscriptionSymbol<T> TimeSeriesSubscriptionSymbol<T> TimeSeriesSubscriptionSymbol Inherited Members IndexedEventSubscriptionSymbol<T>.EventSymbol IndexedEventSubscriptionSymbol<T>.Source object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public class TimeSeriesSubscriptionSymbol<T> : IndexedEventSubscriptionSymbol<T> Type Parameters Name Description T The type of event symbol. Constructors | Edit this page View Source TimeSeriesSubscriptionSymbol(T, DateTimeOffset) Initializes a new instance of the TimeSeriesSubscriptionSymbol<T> class with a specified event symbol and from time in milliseconds since Unix epoch. Declaration public TimeSeriesSubscriptionSymbol(T eventSymbol, DateTimeOffset fromTime) Parameters Type Name Description T eventSymbol The event symbol. DateTimeOffset fromTime The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. | Edit this page View Source TimeSeriesSubscriptionSymbol(T, long) Initializes a new instance of the TimeSeriesSubscriptionSymbol<T> class with a specified event symbol and from time in milliseconds since Unix epoch. Declaration public TimeSeriesSubscriptionSymbol(T eventSymbol, long fromTime) Parameters Type Name Description T eventSymbol The event symbol. long fromTime The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Properties | Edit this page View Source FromTime Gets subscription time in milliseconds since Unix epoch. Declaration public long FromTime { get; } Property Value Type Description long Methods | Edit this page View Source Equals(object?) Indicates whether some other time series event subscription symbol has the same EventSymbol. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides IndexedEventSubscriptionSymbol<T>.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides IndexedEventSubscriptionSymbol<T>.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides IndexedEventSubscriptionSymbol<T>.ToString()"
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.TimeSeriesSubscriptionSymbol.html",
    "title": "Class TimeSeriesSubscriptionSymbol | dxFeed Graal .NET API",
    "keywords": "Class TimeSeriesSubscriptionSymbol Represents subscription to time-series of events. Instances of this class can be used with {@link DXFeedSubscription} to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. Inheritance object IndexedEventSubscriptionSymbol<object> TimeSeriesSubscriptionSymbol<object> TimeSeriesSubscriptionSymbol Inherited Members TimeSeriesSubscriptionSymbol<object>.FromTime TimeSeriesSubscriptionSymbol<object>.ToString() TimeSeriesSubscriptionSymbol<object>.Equals(object) TimeSeriesSubscriptionSymbol<object>.GetHashCode() IndexedEventSubscriptionSymbol<object>.EventSymbol IndexedEventSubscriptionSymbol<object>.Source object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public class TimeSeriesSubscriptionSymbol : TimeSeriesSubscriptionSymbol<object> Constructors | Edit this page View Source TimeSeriesSubscriptionSymbol(object, DateTimeOffset) Initializes a new instance of the TimeSeriesSubscriptionSymbol class with a specified event symbol and from time in milliseconds since Unix epoch. Declaration public TimeSeriesSubscriptionSymbol(object eventSymbol, DateTimeOffset fromTime) Parameters Type Name Description object eventSymbol The event symbol. DateTimeOffset fromTime The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. | Edit this page View Source TimeSeriesSubscriptionSymbol(object, long) Initializes a new instance of the TimeSeriesSubscriptionSymbol class with a specified event symbol and from time in milliseconds since Unix epoch. Declaration public TimeSeriesSubscriptionSymbol(object eventSymbol, long fromTime) Parameters Type Name Description object eventSymbol The event symbol. long fromTime The from time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC."
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.WildcardSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.WildcardSymbol.html",
    "title": "Class WildcardSymbol | dxFeed Graal .NET API",
    "keywords": "Class WildcardSymbol Represents [wildcard] subscription to all events of the specific event type. The All constant can be added to any DXFeedSubscription instance with AddSymbols(params object[]) method to the effect of subscribing to all possible event symbols. The corresponding subscription will start receiving all published events of the corresponding types. For more details see Javadoc. Inheritance object WildcardSymbol Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Api.Osub Assembly: DxFeed.Graal.Net.dll Syntax public class WildcardSymbol Fields | Edit this page View Source All Represents [wildcard] subscription to all events of the specific event type. NOTE: Wildcard subscription can create extremely high network and CPU load for certain kinds of high-frequency events like quotes. It requires a special arrangement on the side of upstream data provider and is disabled by default in upstream feed configuration. Make that sure you have adequate resources and understand the impact before using it. It can be used for low-frequency events only (like Forex quotes), because each instance of DXFeedSubscription processes events in a single thread and there is no provision to load-balance wildcard subscription amongst multiple threads. Declaration public static readonly WildcardSymbol All Field Value Type Description WildcardSymbol | Edit this page View Source ReservedPrefix Symbol prefix that is reserved for wildcard subscriptions. Any subscription starting with \"*\" is ignored with the exception of WildcardSymbol subscription. Declaration public const string ReservedPrefix = \"*\" Field Value Type Description string Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/DxFeed.Graal.Net.Api.Osub.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.Osub.html",
    "title": "Namespace DxFeed.Graal.Net.Api.Osub | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Api.Osub Classes IndexedEventSubscriptionSymbol Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. IndexedEventSubscriptionSymbol<T> Represents subscription to a specific source of indexed events. Instances of this class can be used with DXFeedSubscription to specify subscription to a particular source of indexed events. By default, when subscribing to indexed events by their event symbol object, the subscription is performed to all supported sources. For more details see Javadoc. TimeSeriesSubscriptionSymbol Represents subscription to time-series of events. Instances of this class can be used with {@link DXFeedSubscription} to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. TimeSeriesSubscriptionSymbol<T> Represents subscription to time-series of events. Instances of this class can be used with {@link DXFeedSubscription} to specify subscription for time series events from a specific time. By default, subscribing to time-series events by their event symbol object, the subscription is performed to a stream of new events as they happen only. For more details see Javadoc. WildcardSymbol Represents [wildcard] subscription to all events of the specific event type. The All constant can be added to any DXFeedSubscription instance with AddSymbols(params object[]) method to the effect of subscribing to all possible event symbols. The corresponding subscription will start receiving all published events of the corresponding types. For more details see Javadoc. Interfaces IObservableSubscription Observable set of subscription symbols for the specific event type. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Api.html": {
    "href": "docs/api/DxFeed.Graal.Net.Api.html",
    "title": "Namespace DxFeed.Graal.Net.Api | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Api Classes DXEndpoint Manages network connections to DXFeed or DXPublisher. Porting a Java class com.dxfeed.api.DXEndpoint. For more details see Javadoc. There are ready-to-use singleton instances that are available with GetInstance() and GetInstance(Role) methods as wel as factory methods Create() and Create(Role), and a number of configuration methods. Advanced properties can be configured with DXEndpoint.Builder (creates with NewBuilder()). Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. Lifetimes This class will not be garbage-collected and its resources will not be freed until Dispose(), Close() or CloseAndAwaitTermination() methods are called. Calling these methods ensures that instance can be safely garbage-collected when all outside references to it are lost. If a reference to an instance of this class is lost before calling the above methods, it causes a memory/resource leak. This behavior was implemented intentionally. Inner instances of DXFeed and DXPublisher have the same lifetime as DXEndpoint. DXFeed and DXPublisher have no public resource release methods, and exist as long as DXEndpoint exists. DXEndpoint.Builder Builder class for DXEndpoint that supports additional configuration properties. Porting a Java class com.dxfeed.api.DXEndpoint.Builder. For more details see Javadoc. Default properties file The Build() method tries to load the default property file for the Feed, OnDemandFeed and Publisher role. The default properties file is loaded only if there are no system properties (SystemProperty) or user properties (WithProperty(string, string)) set with the same key (DXFeedPropertiesProperty, DXPublisherPropertiesProperty) and the file exists and is readable. This file must be in the Java properties file format. Endpoint name If no endpoint name has been specified (WithName(string)), the default name will be used. The default name includes a counter that increments each time an endpoint is created (\"qdnet\", \"qdnet-1\", etc.). To get the name of the created endpoint, call the GetName() method. Threads and locks This class is thread-safe and can be used concurrently from multiple threads without external synchronization. DXFeed Main entry class for dxFeed API. This class is a wrapper for FeedNative. Read it first Javadoc. DXFeedSubscription Subscription for a set of symbols and event types. This class is a wrapper for SubscriptionNative. For more details see Javadoc. DXPublisher Provides API for publishing of events to local or remote DXFeed. This class is a wrapper for PublisherNative. For more details see Javadoc. Enums DXEndpoint.Role A list of endpoint roles. DXEndpoint.State A list of endpoint states. Delegates DXEndpoint.StateChangeListenerCallback Notifies a change in the state of this endpoint. DXFeedEventListener The listener delegate for receiving events. Invoked when events of type are received."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.Candle.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.Candle.html",
    "title": "Class Candle | dxFeed Graal .NET API",
    "keywords": "Class Candle Candle event with open, high, low, close prices and other information for a specific period. Candles are build with a specified CandlePeriod using a specified CandlePrice type with a data taken from the specified CandleExchange from the specified CandleSession with further details of aggregation provided by CandleAlignment. Inheritance object Candle Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Candle)] public class Candle : ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Candle() Initializes a new instance of the Candle class. Declaration public Candle() | Edit this page View Source Candle(CandleSymbol) Initializes a new instance of the Candle class with the specified event symbol. Declaration public Candle(CandleSymbol eventSymbol) Parameters Type Name Description CandleSymbol eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source AskVolume Gets or sets ask volume in this candle as floating number with fractions. Declaration public double AskVolume { get; set; } Property Value Type Description double | Edit this page View Source BidVolume Gets or sets bid volume in this candle as floating number with fractions. Declaration public double BidVolume { get; set; } Property Value Type Description double | Edit this page View Source CandleSymbol Gets or sets candle symbol object. Declaration public CandleSymbol? CandleSymbol { get; set; } Property Value Type Description CandleSymbol | Edit this page View Source Close Gets or sets the last (close) price of this candle. Declaration public double Close { get; set; } Property Value Type Description double | Edit this page View Source Count Gets or sets total number of original trade (or quote) events in this candle. Declaration public long Count { get; set; } Property Value Type Description long | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. Declaration public string? EventSymbol { get; set; } Property Value Type Description string | Edit this page View Source EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. Declaration public long EventTime { get; set; } Property Value Type Description long | Edit this page View Source High Gets or sets the maximal (high) price of this candle. Declaration public double High { get; set; } Property Value Type Description double | Edit this page View Source ImpVolatility Gets or sets implied volatility. Declaration public double ImpVolatility { get; set; } Property Value Type Description double | Edit this page View Source Index Gets or sets unique per-symbol index of this time and sale event. Time and sale index is composed of Time and Sequence. Changing either time or sequence changes event index. Do not sets this value directly. Change Time and/or Sequence. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source Low Gets or sets the minimal (low) price of this candle. Declaration public double Low { get; set; } Property Value Type Description double | Edit this page View Source Open Gets or sets the first (open) price of this candle. Declaration public double Open { get; set; } Property Value Type Description double | Edit this page View Source OpenInterest Gets or sets open interest as floating number with fractions. Declaration public double OpenInterest { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source VWAP Gets or sets volume-weighted average price (VWAP) in this candle. Total turnover in this candle can be computed with VWAP * Volume. Declaration public double VWAP { get; set; } Property Value Type Description double | Edit this page View Source Volume Gets or sets total volume in this candle as floating number with fractions. Total turnover in this candle can be computed with VWAP * Volume. Declaration public double Volume { get; set; } Property Value Type Description double Methods | Edit this page View Source BaseFieldsToString() Returns string representation of this candle fields. Declaration protected string BaseFieldsToString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this candle event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.CandleAlignmentId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.CandleAlignmentId.html",
    "title": "Enum CandleAlignment.CandleAlignmentId | dxFeed Graal .NET API",
    "keywords": "Enum CandleAlignment.CandleAlignmentId List of ids CandleAlignment. Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public enum CandleAlignment.CandleAlignmentId Fields Name Description Midnight Id associated with CandleAlignment.Midnight. Session Id associated with CandleAlignment.Session."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleAlignment.html",
    "title": "Class CandleAlignment | dxFeed Graal .NET API",
    "keywords": "Class CandleAlignment Candle alignment attribute of CandleSymbol defines how candle are aligned with respect to time. For more details see Javadoc. Inheritance object CandleAlignment Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandleAlignment : ICandleSymbolProperty Fields | Edit this page View Source AttributeKey The attribute key that is used to store the value of CandleAlignment in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"a\". The value that this key shall be set to is equal to the corresponding ToString(). Declaration public const string AttributeKey = \"a\" Field Value Type Description string | Edit this page View Source Default Default alignment is Midnight. Declaration public static readonly CandleAlignment Default Field Value Type Description CandleAlignment | Edit this page View Source Midnight Align candles on midnight. Declaration public static readonly CandleAlignment Midnight Field Value Type Description CandleAlignment | Edit this page View Source Session Align candles on trading sessions. Declaration public static readonly CandleAlignment Session Field Value Type Description CandleAlignment Properties | Edit this page View Source Id Gets CandleAlignment.CandleAlignmentId associated with this instance. Declaration public CandleAlignment.CandleAlignmentId Id { get; } Property Value Type Description CandleAlignment.CandleAlignmentId | Edit this page View Source Name Gets full name this CandleAlignment instance. For example, Midnight returns \"Midnight\", Session returns \"Session\". Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Value Returns string representation of this candle alignment. The string representation of candle alignment \"m\" for Midnight and \"s\" for Session. Declaration public string Value { get; } Property Value Type Description string The string representation. Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle alignment set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this candle alignment set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source GetAttributeForSymbol(string?) Gets candle alignment of the given candle symbol string. The result is Default if the symbol does not have candle alignment attribute. Declaration public static CandleAlignment GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandleAlignment The candle alignment of the given candle symbol string. | Edit this page View Source GetById(CandleAlignmentId) Gets CandleAlignment associated with the specified CandleAlignment.CandleAlignmentId. Declaration public static CandleAlignment GetById(CandleAlignment.CandleAlignmentId id) Parameters Type Name Description CandleAlignment.CandleAlignmentId id The candle alignment id. Returns Type Description CandleAlignment The candle alignment. Exceptions Type Condition ArgumentException If candle type id not exist. | Edit this page View Source NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle alignment attribute. Declaration public static string? NormalizeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description string Returns candle symbol string with the normalized representation of the candle alignment attribute. | Edit this page View Source Parse(string) Parses string representation of candle alignment into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. Declaration public static CandleAlignment Parse(string s) Parameters Type Name Description string s The string representation of candle alignment. Returns Type Description CandleAlignment The candle alignment. Exceptions Type Condition ArgumentException If the string representation is invalid. | Edit this page View Source ToFullString() Returns full string representation of this candle alignment. It is contains attribute key and its value. For example, the full string representation of Midnight is \"a=m\". Declaration public string ToFullString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this candle alignment. The string representation of candle alignment \"m\" for Midnight and \"s\" for Session. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleExchange.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleExchange.html",
    "title": "Class CandleExchange | dxFeed Graal .NET API",
    "keywords": "Class CandleExchange Exchange attribute of CandleSymbol defines exchange identifier where data is taken from to build the candles. For more details see Javadoc. Inheritance object CandleExchange Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandleExchange : ICandleSymbolProperty Fields | Edit this page View Source Composite Composite exchange where data is taken from all exchanges. Declaration public static readonly CandleExchange Composite Field Value Type Description CandleExchange | Edit this page View Source Default Default exchange is Composite. Declaration public static readonly CandleExchange Default Field Value Type Description CandleExchange Properties | Edit this page View Source ExchangeCode Gets exchange code. It is '\\0' for Composite exchange. Declaration public char ExchangeCode { get; } Property Value Type Description char Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle exchange set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this candle exchange set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetAttributeForSymbol(string?) Gets exchange attribute object of the given candle symbol string. The result is Default if the symbol does not have exchange attribute. Declaration public static CandleExchange GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandleExchange The exchange attribute object of the given candle symbol string. | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns string representation of this exchange. It is the string \"COMPOSITE\" for Composite exchange or exchange character otherwise. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() | Edit this page View Source ValueOf(char) Returns exchange attribute object that corresponds to the specified exchange code character. Declaration public static CandleExchange ValueOf(char exchangeCode) Parameters Type Name Description char exchangeCode The exchange code character. Returns Type Description CandleExchange The exchange attribute object. Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePeriod.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePeriod.html",
    "title": "Class CandlePeriod | dxFeed Graal .NET API",
    "keywords": "Class CandlePeriod Period attribute of CandleSymbol defines aggregation period of the candles. Aggregation period is defined as pair of a Value and Type. For more details see Javadoc. Inheritance object CandlePeriod Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandlePeriod : ICandleSymbolProperty Fields | Edit this page View Source AttributeKey The attribute key that is used to store the value of CandlePeriod in a symbol string using methods of MarketEventSymbols class. The value of this constant is an empty string, because this is the main attribute that every CandleSymbol must have. The value that this key shall be set to is equal to the corresponding ToString(). Declaration public const string AttributeKey = \"\" Field Value Type Description string | Edit this page View Source Day Day aggregation where each candle represents a day. Declaration public static readonly CandlePeriod Day Field Value Type Description CandlePeriod | Edit this page View Source Default Default period is Tick. Declaration public static readonly CandlePeriod Default Field Value Type Description CandlePeriod | Edit this page View Source Tick Tick aggregation where each candle represents an individual tick. Declaration public static readonly CandlePeriod Tick Field Value Type Description CandlePeriod Properties | Edit this page View Source PeriodIntervalMillis Gets aggregation period in milliseconds as closely as possible. Certain aggregation types like Second and Day span a specific number of milliseconds. Month, OptExp and Year are approximate. Candle period of Tick, Volume, Price, PriceMomentum and PriceRenko is not defined and this method returns 0. The result of this method is equal to: (long) (this.Type.PeriodIntervalMillis * this.Value) Declaration public long PeriodIntervalMillis { get; } Property Value Type Description long | Edit this page View Source Type Gets aggregation period type. Declaration public CandleType Type { get; } Property Value Type Description CandleType | Edit this page View Source Value Gets aggregation period value. For example, the value of 5 with the candle type of Minute represents 5 minute aggregation period. Declaration public double Value { get; } Property Value Type Description double Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this aggregation period set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this aggregation period set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. The same aggregation period has the same Value} and Type. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetAttributeForSymbol(string?) Gets candle period of the given candle symbol string. The result is Default if the symbol does not have candle period attribute. Declaration public static CandlePeriod GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandlePeriod The candle period of the given candle symbol string. | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() | Edit this page View Source NormalizeAttributeForSymbol(string?) Returns candle symbol string with the normalized representation of the candle period attribute. Declaration public static string? NormalizeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description string The candle symbol string with the normalized representation of the the candle period attribute. | Edit this page View Source Parse(string) Parses string representation of aggregation period into object. Any string that was returned by ToString() can be parsed. This method is flexible in the way candle types can be specified. See Parse(string) for details. Declaration public static CandlePeriod Parse(string s) Parameters Type Name Description string s string representation of aggregation period. Returns Type Description CandlePeriod aggregation period object. Exceptions Type Condition ArgumentNullException If input string is null. FormatException If input string does not represent a number in a valid format. OverflowException If input string represents a number that is less than MinValue or greater than MaxValue. | Edit this page View Source ToString() Returns string representation of this aggregation period. The string representation is composed of value and type string. For example, 5 minute aggregation is represented as \"5m\". The value of 1 is omitted in the string representation, so Day (one day) is represented as \"d\". This string representation can be converted back into object with Parse(string) method. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() | Edit this page View Source ValueOf(double, CandleType) Returns candle period with the given value and type. Declaration public static CandlePeriod ValueOf(double value, CandleType type) Parameters Type Name Description double value The value candle period value. CandleType type The candle period type. Returns Type Description CandlePeriod The candle period with the given value and type. Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.CandlePriceId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.CandlePriceId.html",
    "title": "Enum CandlePrice.CandlePriceId | dxFeed Graal .NET API",
    "keywords": "Enum CandlePrice.CandlePriceId List of ids CandlePrice.CandlePriceId. Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public enum CandlePrice.CandlePriceId Fields Name Description Ask Id associated with CandlePrice.Ask. Bid Id associated with CandlePrice.Bid. Last Id associated with CandlePrice.Last. Mark Id associated with CandlePrice.Mark. Settlement Id associated with CandlePrice.Settlement."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePrice.html",
    "title": "Class CandlePrice | dxFeed Graal .NET API",
    "keywords": "Class CandlePrice Price type attribute of CandleSymbol defines price that is used to build the candles. For more details see Javadoc. Inheritance object CandlePrice Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandlePrice : ICandleSymbolProperty Fields | Edit this page View Source Ask Quote ask price. Declaration public static readonly CandlePrice Ask Field Value Type Description CandlePrice | Edit this page View Source AttributeKey The attribute key that is used to store the value of CandlePrice in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"price\". The value that this key shall be set to is equal to the corresponding ToString(). Declaration public const string AttributeKey = \"price\" Field Value Type Description string | Edit this page View Source Bid Quote bid price. Declaration public static readonly CandlePrice Bid Field Value Type Description CandlePrice | Edit this page View Source Default Default price type is Last. Declaration public static readonly CandlePrice Default Field Value Type Description CandlePrice | Edit this page View Source Last Last trading price. Declaration public static readonly CandlePrice Last Field Value Type Description CandlePrice | Edit this page View Source Mark Market price defined as average between quote bid and ask prices. Declaration public static readonly CandlePrice Mark Field Value Type Description CandlePrice | Edit this page View Source Settlement Official settlement price that is defined by exchange or last trading price otherwise. It updates based on all PriceType values: PriceType.Indicative, PriceType.Preliminary, and PriceType.Final. Declaration public static readonly CandlePrice Settlement Field Value Type Description CandlePrice Properties | Edit this page View Source Id Gets CandlePrice.CandlePriceId associated with this instance. Declaration public CandlePrice.CandlePriceId Id { get; } Property Value Type Description CandlePrice.CandlePriceId | Edit this page View Source Name Gets full name this CandlePrice instance. For example, Last returns \"Last\", Bid returns \"Bid\". Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Value Returns string representation of this candle price type. The string representation of candle price type is a lower case string that corresponds to its name. For example, Last is represented as \"last\". Declaration public string Value { get; } Property Value Type Description string The string representation. Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle price type set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this candle price type set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source GetAttributeForSymbol(string?) Gets candle price type of the given candle symbol string. The result is Default if the symbol does not have candle price type attribute. Declaration public static CandlePrice GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandlePrice The candle price of the given candle symbol string. | Edit this page View Source GetById(CandlePriceId) Gets CandlePrice associated with the specified CandlePrice.CandlePriceId. Declaration public static CandlePrice GetById(CandlePrice.CandlePriceId id) Parameters Type Name Description CandlePrice.CandlePriceId id The candle price type id. Returns Type Description CandlePrice The price type type. Exceptions Type Condition ArgumentException If candle type id not exist. | Edit this page View Source NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle price type attribute. Declaration public static string? NormalizeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description string Returns candle symbol string with the normalized representation of the candle price type attribute. | Edit this page View Source Parse(string) Parses string representation of candle price type into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. Declaration public static CandlePrice Parse(string s) Parameters Type Name Description string s The string representation of candle price. Returns Type Description CandlePrice The candle price. Exceptions Type Condition ArgumentException If the string representation is invalid. | Edit this page View Source ToFullString() Returns full string representation of this candle price type. It is contains attribute key and its value. For example, the full string representation of Last is \"price=last\". Declaration public string ToFullString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this candle price type. The string representation of candle price type is a lower case string that corresponds to its name. For example, Last is represented as \"last\". Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePriceLevel.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandlePriceLevel.html",
    "title": "Class CandlePriceLevel | dxFeed Graal .NET API",
    "keywords": "Class CandlePriceLevel Candle price level attribute of CandleSymbol defines how candles shall be aggregated in respect to price interval. The negative or infinite values of price interval are treated as exceptional. Price interval may be equal to zero. It means every unique price creates a particular candle to aggregate all events with this price for the chosen CandlePeriod. Non-zero price level creates sequence of intervals starting from 0: ...,[-pl;0),[0;pl),[pl;2*pl),...,[n*pl,n*pl+pl). Events aggregated by chosen CandlePeriod and price intervals. For more details see Javadoc. Inheritance object CandlePriceLevel Implements ICandleSymbolProperty Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandlePriceLevel : ICandleSymbolProperty Fields | Edit this page View Source AttributeKey The attribute key that is used to store the value of CandlePriceLevel in a symbol string using methods of MarketEventSymbols class. The value of this constant is \"pl\". The value that this key shall be set to is equal to the corresponding ToString(). Declaration public const string AttributeKey = \"pl\" Field Value Type Description string | Edit this page View Source Default Default candle price level double.NaN. Declaration public static readonly CandlePriceLevel Default Field Value Type Description CandlePriceLevel Properties | Edit this page View Source Value Gets a price level value. For example, the value of 1 represents [0;1), [1;2) and so on intervals to build candles. Declaration public double Value { get; } Property Value Type Description double Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this candle price level set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this candle price level set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. The same price level has the same Value. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetAttributeForSymbol(string?) Gets candle price level of the given candle symbol string. The result is Default if the symbol does not have candle price level attribute. Declaration public static CandlePriceLevel GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandlePriceLevel The candle price level of the given candle symbol string. | Edit this page View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() | Edit this page View Source NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle price level attribute. Declaration public static string? NormalizeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description string Returns candle symbol string with the normalized representation of the candle price level attribute. | Edit this page View Source Parse(string) Parses string representation of candle price level into object. Any string that was returned by ToString() can be parsed. and case is ignored for parsing. Declaration public static CandlePriceLevel Parse(string s) Parameters Type Name Description string s The string representation of candle candle price level attribute. Returns Type Description CandlePriceLevel The candle price level attribute. | Edit this page View Source ToFullString() Returns full string representation of this candle price level attribute. It is contains attribute key and its value. For example, the full string representation of price level = 0.5 is \"pl=0.5\". Declaration public string ToFullString() Returns Type Description string The full string representation of a candle price level attribute. | Edit this page View Source ToString() Returns string representation of this candle price level attribute. The string representation is composed of value. This string representation can be converted back into object with Parse(string) method. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() | Edit this page View Source ValueOf(double) Returns candle price level object that corresponds to the specified value. Declaration public static CandlePriceLevel ValueOf(double value) Parameters Type Name Description double value The candle price level value. Returns Type Description CandlePriceLevel The candle price level with the given value and type. Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.CandleSessionId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.CandleSessionId.html",
    "title": "Enum CandleSession.CandleSessionId | dxFeed Graal .NET API",
    "keywords": "Enum CandleSession.CandleSessionId List of ids CandleSession. Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public enum CandleSession.CandleSessionId Fields Name Description Any Id associated with CandleSession.Any. Regular Id associated with CandleSession.Regular."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSession.html",
    "title": "Class CandleSession | dxFeed Graal .NET API",
    "keywords": "Class CandleSession Session attribute of CandleSymbol defines trading that is used to build the candles. For more details see Javadoc. Inheritance object CandleSession Implements ICandleSymbolProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandleSession : ICandleSymbolProperty Fields | Edit this page View Source Any All trading sessions are used to build candles. Declaration public static readonly CandleSession Any Field Value Type Description CandleSession | Edit this page View Source AttributeKey The attribute key that is used to store the value of CandleSession in a symbol string using methods of MarketEventSymbols class. class. The value of this constant is \"tho\", which is an abbreviation for \"trading hours only\". The value that this key shall be set to is equal to the corresponding ToString(). Declaration public const string AttributeKey = \"tho\" Field Value Type Description string | Edit this page View Source Default Default trading session is Any. Declaration public static readonly CandleSession Default Field Value Type Description CandleSession | Edit this page View Source Regular Only regular trading session data is used to build candles. Declaration public static readonly CandleSession Regular Field Value Type Description CandleSession Properties | Edit this page View Source Id Gets CandleSession.CandleSessionId associated with this instance. Declaration public CandleSession.CandleSessionId Id { get; } Property Value Type Description CandleSession.CandleSessionId | Edit this page View Source Name Gets full name this CandleSession instance. For example, Any returns \"Any\", Regular returns \"Regular\". Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Value Returns string representation of this candle session attribute. The string representation of candle session attribute is a lower case string that corresponds to its type name. For example, Any is represented as \"false\". Declaration public string Value { get; } Property Value Type Description string The string representation. Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Returns candle event symbol string with this session attribute set. Declaration public string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string The candle event symbol string with this session attribute set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration public void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic. | Edit this page View Source GetAttributeForSymbol(string?) Gets candle session of the given candle symbol string. The result is Default if the symbol does not have candle session attribute. Declaration public static CandleSession GetAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description CandleSession The candle session attribute of the given candle symbol string. | Edit this page View Source NormalizeAttributeForSymbol(string?) Normalizes candle symbol string with representation of the candle session attribute. Declaration public static string? NormalizeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The candle symbol string. Returns Type Description string Returns candle symbol string with the normalized representation of the candle session attribute. | Edit this page View Source Parse(string) Parses string representation of candle session attribute into object. Any string that was returned by ToString() can be parsed and case is ignored for parsing. Declaration public static CandleSession Parse(string s) Parameters Type Name Description string s The string representation of candle price. Returns Type Description CandleSession Returns instance of CandleSession. Exceptions Type Condition ArgumentException If the string representation is invalid. | Edit this page View Source ToFullString() Returns full string representation of this candle session attribute. It is contains attribute key and its value. For example, the full string representation of Any is \"tho=false\". Declaration public string ToFullString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this candle session attribute. The string representation of candle session attribute is a lower case string that corresponds to its type name. For example, Any is represented as \"false\". Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ICandleSymbolProperty"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSymbol.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleSymbol.html",
    "title": "Class CandleSymbol | dxFeed Graal .NET API",
    "keywords": "Class CandleSymbol Symbol that should be used with DXFeedSubscription class to subscribe for Candle events. DXFeedSubscription also accepts a string representation of the candle symbol for subscription. For more details see Javadoc. Inheritance object CandleSymbol Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandleSymbol Properties | Edit this page View Source Alignment Gets alignment attribute of this symbol. Declaration public CandleAlignment? Alignment { get; } Property Value Type Description CandleAlignment | Edit this page View Source BaseSymbol Gets base market symbol without attributes. Declaration public string? BaseSymbol { get; } Property Value Type Description string | Edit this page View Source Exchange Gets exchange attribute of this symbol. Declaration public CandleExchange? Exchange { get; } Property Value Type Description CandleExchange | Edit this page View Source Period Gets aggregation period of this symbol. Declaration public CandlePeriod? Period { get; } Property Value Type Description CandlePeriod | Edit this page View Source Price Gets price type attribute of this symbol. Declaration public CandlePrice? Price { get; } Property Value Type Description CandlePrice | Edit this page View Source PriceLevel Gets price level attribute of this symbol. Declaration public CandlePriceLevel? PriceLevel { get; } Property Value Type Description CandlePriceLevel | Edit this page View Source Session Gets session attribute of this symbol. Declaration public CandleSession? Session { get; } Property Value Type Description CandleSession | Edit this page View Source Symbol Returns string representation of this symbol. The string representation can be transformed back into symbol object using ValueOf(string?) method. Declaration public string? Symbol { get; } Property Value Type Description string The string representation. Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code value for this symbol. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this symbol. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns string representation of this symbol. The string representation can be transformed back into symbol object using ValueOf(string?) method. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() | Edit this page View Source ValueOf(string?) Converts the given string symbol into the candle symbol object. Declaration public static CandleSymbol ValueOf(string? symbol) Parameters Type Name Description string symbol The string symbol. Returns Type Description CandleSymbol The candle symbol object. Exceptions Type Condition ArgumentException If the string does not represent a valid symbol. | Edit this page View Source ValueOf(string?, params ICandleSymbolProperty[]) Converts the given string symbol into the candle symbol object with the specified attribute set. Declaration public static CandleSymbol ValueOf(string? symbol, params ICandleSymbolProperty[] attributes) Parameters Type Name Description string symbol The string symbol. ICandleSymbolProperty[] attributes The attributes to set. Returns Type Description CandleSymbol The candle symbol object. Exceptions Type Condition ArgumentException If the string does not represent a valid symbol."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.CandleTypeId.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.CandleTypeId.html",
    "title": "Enum CandleType.CandleTypeId | dxFeed Graal .NET API",
    "keywords": "Enum CandleType.CandleTypeId List of ids CandleType. Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public enum CandleType.CandleTypeId Fields Name Description Day Id associated with CandleType.Day. Hour Id associated with CandleType.Hour. Minute Id associated with CandleType.Minute. Month Id associated with CandleType.Month. OptExp Id associated with CandleType.OptExp. Price Id associated with CandleType.Price. PriceMomentum Id associated with CandleType.PriceMomentum. PriceRenko Id associated with CandleType.PriceRenko. Second Id associated with CandleType.Second. Tick Id associated with CandleType.Tick. Volume Id associated with CandleType.Volume. Week Id associated with CandleType.Week. Year Id associated with CandleType.Year."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.CandleType.html",
    "title": "Class CandleType | dxFeed Graal .NET API",
    "keywords": "Class CandleType Type of the candle aggregation period constitutes CandlePeriod type together its actual Value. For more details see Javadoc. Inheritance object CandleType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public class CandleType Fields | Edit this page View Source Day Certain number of days. Declaration public static readonly CandleType Day Field Value Type Description CandleType | Edit this page View Source Hour Certain number of hours. Declaration public static readonly CandleType Hour Field Value Type Description CandleType | Edit this page View Source Minute Certain number of minutes. Declaration public static readonly CandleType Minute Field Value Type Description CandleType | Edit this page View Source Month Certain number of months. Declaration public static readonly CandleType Month Field Value Type Description CandleType | Edit this page View Source OptExp Certain number of option expirations. Declaration public static readonly CandleType OptExp Field Value Type Description CandleType | Edit this page View Source Price Certain price change, calculated according to the following rules: high(n) - low(n) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = close(n) where n is the number of the bar. Declaration public static readonly CandleType Price Field Value Type Description CandleType | Edit this page View Source PriceMomentum Certain price change, calculated according to the following rules: high(n) - low(n) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = close(n) + tick size, if close(n) = high(n) open(n+1) = close(n) - tick size, if close(n) = low(n) where n is the number of the bar. Declaration public static readonly CandleType PriceMomentum Field Value Type Description CandleType | Edit this page View Source PriceRenko Certain price change, calculated according to the following rules: high(n+1) - high(n) = price range or low(n) - low(n+1) = price range close(n) = high(n) or close(n) = low(n) open(n+1) = high(n), if high(n+1) - high(n) = price range open(n+1) = low(n), if low(n) - low(n+1) = price range where n is the number of the bar. Declaration public static readonly CandleType PriceRenko Field Value Type Description CandleType | Edit this page View Source Second Certain number of seconds. Declaration public static readonly CandleType Second Field Value Type Description CandleType | Edit this page View Source Tick Certain number of ticks. Declaration public static readonly CandleType Tick Field Value Type Description CandleType | Edit this page View Source Volume Certain volume of trades. Declaration public static readonly CandleType Volume Field Value Type Description CandleType | Edit this page View Source Week Certain number of weeks. Declaration public static readonly CandleType Week Field Value Type Description CandleType | Edit this page View Source Year Certain number of years. Declaration public static readonly CandleType Year Field Value Type Description CandleType Properties | Edit this page View Source Id Gets CandleType.CandleTypeId associated with this instance. Declaration public CandleType.CandleTypeId Id { get; } Property Value Type Description CandleType.CandleTypeId | Edit this page View Source Name Gets full name this CandleType instance. For example, Tick (Value == \"t\") returns \"Tick\", Month (Value == \"mo\") returns \"Month\". Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source PeriodIntervalMillis Gets candle type period in milliseconds (aggregation period) as closely as possible. Certain types like Second and Day span a specific number of milliseconds. Month, OptExp and Year are approximate. Candle type period of Tick, Volume, Price, PriceMomentum and PriceRenko is not defined and this method returns 0. Declaration public long PeriodIntervalMillis { get; } Property Value Type Description long | Edit this page View Source Value Returns string representation of this candle type. The string representation of candle type is the shortest unique prefix of the lower case string that corresponds to its Name. For example, Tick is represented as \"t\", while Month is represented as \"mo\" to distinguish it from Minute that is represented as \"m\". Declaration public string Value { get; } Property Value Type Description string The string representation. Methods | Edit this page View Source GetById(CandleTypeId) Gets CandleType associated with the specified CandleType.CandleTypeId. Declaration public static CandleType GetById(CandleType.CandleTypeId id) Parameters Type Name Description CandleType.CandleTypeId id The candle type id. Returns Type Description CandleType The candle type. Exceptions Type Condition ArgumentException If candle type id not exist. | Edit this page View Source Parse(string) Parses string representation of candle type into object. Any string that is a prefix of candle type Name can be parsed (including the one that was returned by ToString()) and case is ignored for parsing. Declaration public static CandleType Parse(string s) Parameters Type Name Description string s The string representation of candle type. Returns Type Description CandleType The candle type. Exceptions Type Condition ArgumentException If the string representation is invalid. | Edit this page View Source ToString() Returns string representation of this candle type. The string representation of candle type is the shortest unique prefix of the lower case string that corresponds to its Name. For example, Tick is represented as \"t\", while Month is represented as \"mo\" to distinguish it from Minute that is represented as \"m\". Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString()"
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.ICandleSymbolProperty.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.ICandleSymbolProperty.html",
    "title": "Interface ICandleSymbolProperty | dxFeed Graal .NET API",
    "keywords": "Interface ICandleSymbolProperty Property of the CandleSymbol. Namespace: DxFeed.Graal.Net.Events.Candles Assembly: DxFeed.Graal.Net.dll Syntax public interface ICandleSymbolProperty Methods | Edit this page View Source ChangeAttributeForSymbol(string?) Change candle event symbol string with this attribute set and returns new candle event symbol string. Declaration string? ChangeAttributeForSymbol(string? symbol) Parameters Type Name Description string symbol The original candle event symbol. Returns Type Description string Returns candle event symbol string with this attribute set. | Edit this page View Source CheckInAttribute(CandleSymbol) Internal method that initializes attribute in the candle symbol. Declaration void CheckInAttribute(CandleSymbol candleSymbol) Parameters Type Name Description CandleSymbol candleSymbol The candle symbol. Exceptions Type Condition InvalidOperationException If used outside of internal initialization logic."
  },
  "docs/api/DxFeed.Graal.Net.Events.Candles.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Candles.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Candles | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Candles Classes Candle Candle event with open, high, low, close prices and other information for a specific period. Candles are build with a specified CandlePeriod using a specified CandlePrice type with a data taken from the specified CandleExchange from the specified CandleSession with further details of aggregation provided by CandleAlignment. CandleAlignment Candle alignment attribute of CandleSymbol defines how candle are aligned with respect to time. For more details see Javadoc. CandleExchange Exchange attribute of CandleSymbol defines exchange identifier where data is taken from to build the candles. For more details see Javadoc. CandlePeriod Period attribute of CandleSymbol defines aggregation period of the candles. Aggregation period is defined as pair of a Value and Type. For more details see Javadoc. CandlePrice Price type attribute of CandleSymbol defines price that is used to build the candles. For more details see Javadoc. CandlePriceLevel Candle price level attribute of CandleSymbol defines how candles shall be aggregated in respect to price interval. The negative or infinite values of price interval are treated as exceptional. Price interval may be equal to zero. It means every unique price creates a particular candle to aggregate all events with this price for the chosen CandlePeriod. Non-zero price level creates sequence of intervals starting from 0: ...,[-pl;0),[0;pl),[pl;2*pl),...,[n*pl,n*pl+pl). Events aggregated by chosen CandlePeriod and price intervals. For more details see Javadoc. CandleSession Session attribute of CandleSymbol defines trading that is used to build the candles. For more details see Javadoc. CandleSymbol Symbol that should be used with DXFeedSubscription class to subscribe for Candle events. DXFeedSubscription also accepts a string representation of the candle symbol for subscription. For more details see Javadoc. CandleType Type of the candle aggregation period constitutes CandlePeriod type together its actual Value. For more details see Javadoc. Interfaces ICandleSymbolProperty Property of the CandleSymbol. Enums CandleAlignment.CandleAlignmentId List of ids CandleAlignment. CandlePrice.CandlePriceId List of ids CandlePrice.CandlePriceId. CandleSession.CandleSessionId List of ids CandleSession. CandleType.CandleTypeId List of ids CandleType."
  },
  "docs/api/DxFeed.Graal.Net.Events.EventCodeAttribute.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.EventCodeAttribute.html",
    "title": "Class EventCodeAttribute | dxFeed Graal .NET API",
    "keywords": "Class EventCodeAttribute Indicates that the attributed class contains event code native. Inheritance object Attribute EventCodeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class EventCodeAttribute : Attribute Constructors | Edit this page View Source EventCodeAttribute(EventCodeNative) Initializes a new instance of the EventCodeAttribute class. Declaration public EventCodeAttribute(EventCodeNative eventCode) Parameters Type Name Description EventCodeNative eventCode The native event code. Properties | Edit this page View Source EventCode Gets native event code. Declaration public EventCodeNative EventCode { get; } Property Value Type Description EventCodeNative Methods | Edit this page View Source GetEventCode(Type) Gets native event code from specified type. Declaration public static EventCodeNative GetEventCode(Type type) Parameters Type Name Description Type type The specified type. Returns Type Description EventCodeNative Returns native event code. Exceptions Type Condition ArgumentException If specified type has no EventCodeAttribute. | Edit this page View Source GetEventCodes(params Type[]) Gets native event codes from specified types. Declaration public static IEnumerable<EventCodeNative> GetEventCodes(params Type[] types) Parameters Type Name Description Type[] types The specified types. Returns Type Description IEnumerable<EventCodeNative> Returns set containing native event codes. Exceptions Type Condition ArgumentException If one on the specified type has no EventCodeAttribute."
  },
  "docs/api/DxFeed.Graal.Net.Events.IEventType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IEventType.html",
    "title": "Interface IEventType | dxFeed Graal .NET API",
    "keywords": "Interface IEventType Marks all event types that can be received via dxFeed API. Events are considered instantaneous, non-persistent, and unconflateable (each event is individually delivered) unless they implement one of interfaces defined in this package to further refine their meaning. For more details see Javadoc. Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax public interface IEventType Properties | Edit this page View Source EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. Declaration string? EventSymbol { get; set; } Property Value Type Description string | Edit this page View Source EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. Declaration long EventTime { get; set; } Property Value Type Description long Methods | Edit this page View Source GetEventTypes() Gets all types that implement this interface. Declaration public static IEnumerable<Type> GetEventTypes() Returns Type Description IEnumerable<Type> Returns a collection of event types."
  },
  "docs/api/DxFeed.Graal.Net.Events.IIndexedEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IIndexedEvent.html",
    "title": "Interface IIndexedEvent | dxFeed Graal .NET API",
    "keywords": "Interface IIndexedEvent Represents an indexed collection of up-to-date information about some condition or state of an external entity that updates in real-time. For example, Order represents an order to buy or to sell some market instrument that is currently active on a market exchange and multiple orders are active for each symbol at any given moment in time. For more details see Javadoc. Inherited Members IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes() Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax public interface IIndexedEvent : IEventType Fields | Edit this page View Source RemoveEvent Indicates that the event with the corresponding index has to be removed. Declaration public const int RemoveEvent = 2 Field Value Type Description int | Edit this page View Source SnapShotMode Is used to instruct dxFeed to use snapshot mode. It is intended to be used only for publishing to activate (if not yet activated) snapshot mode. The difference from SnapshotBegin flag is that SnapShotMode only switches on snapshot mode without starting snapshot synchronization protocol. Declaration public const int SnapShotMode = 64 Field Value Type Description int | Edit this page View Source SnapshotBegin Indicates when the loading of a snapshot starts. Declaration public const int SnapshotBegin = 4 Field Value Type Description int | Edit this page View Source SnapshotEnd SnapshotEnd or SnapshotSnip indicates the end of a snapshot. The difference between SnapshotEnd and SnapshotSnip is the following: SnapshotEnd indicates that the data source sent all the data pertaining to the subscription for the corresponding indexed event, while SnapshotSnip indicates that some limit on the amount of data was reached and while there still might be more data available, it will not be provided. Declaration public const int SnapshotEnd = 8 Field Value Type Description int | Edit this page View Source SnapshotSnip SnapshotEnd or SnapshotSnip indicates the end of a snapshot. The difference between SnapshotEnd and SnapshotSnip is the following: SnapshotEnd indicates that the data source sent all the data pertaining to the subscription for the corresponding indexed event, while SnapshotSnip indicates that some limit on the amount of data was reached and while there still might be more data available, it will not be provided. Declaration public const int SnapshotSnip = 16 Field Value Type Description int | Edit this page View Source TxPending Indicates a pending transactional update. When TxPending is 1, it means that an ongoing transaction update, that spans multiple events, is in process. Declaration public const int TxPending = 1 Field Value Type Description int Properties | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets source of this event. Declaration IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Index Gets or sets unique per-symbol index of this event. Declaration long Index { get; set; } Property Value Type Description long"
  },
  "docs/api/DxFeed.Graal.Net.Events.ILastingEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.ILastingEvent.html",
    "title": "Interface ILastingEvent | dxFeed Graal .NET API",
    "keywords": "Interface ILastingEvent Represents up-to-date information about some condition or state of an external entity that updates in real-time. For example, a Quote is an up-to-date information about best bid and best offer for a specific symbol. For more details see Javadoc. Inherited Members IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes() Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax public interface ILastingEvent : IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.ITimeSeriesEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.ITimeSeriesEvent.html",
    "title": "Interface ITimeSeriesEvent | dxFeed Graal .NET API",
    "keywords": "Interface ITimeSeriesEvent Represents time-series snapshots of some process that is evolving in time or actual events in some external system that have an associated time stamp and can be uniquely identified. For example, TimeAndSale events represent the actual sales that happen on a market exchange at specific time moments, while Candle events represent snapshots of aggregate information about trading over a specific time period. For more details see Javadoc. Inherited Members IIndexedEvent.TxPending IIndexedEvent.RemoveEvent IIndexedEvent.SnapshotBegin IIndexedEvent.SnapshotEnd IIndexedEvent.SnapshotSnip IIndexedEvent.SnapShotMode IIndexedEvent.EventFlags IEventType.EventSymbol IEventType.EventTime IEventType.GetEventTypes() Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax public interface ITimeSeriesEvent : IIndexedEvent, IEventType Properties | Edit this page View Source EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. Declaration IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Index Gets or sets unique per-symbol index of this event. Event indices are unique within event symbol. Typically, event index for a time series event includes Time inside. Implementation notes The most common scheme for event indices is to set highest 32 bits of event index to event timestamp in seconds. The lowest 32 bits are then split as follows. Bits 22 to 31 encode milliseconds of time stamp, and bits 0 to 21 encode some kind of a sequence number. Ultimately, the scheme for event indices is specific for each even type. The actual classes for specific event types perform the corresponding encoding. Declaration long Index { get; set; } Property Value Type Description long | Edit this page View Source Time Gets or sets timestamp of the event. The timestamp is in milliseconds from midnight, January 1, 1970 UTC. Declaration long Time { get; set; } Property Value Type Description long"
  },
  "docs/api/DxFeed.Graal.Net.Events.IndexedEventSource.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.IndexedEventSource.html",
    "title": "Class IndexedEventSource | dxFeed Graal .NET API",
    "keywords": "Class IndexedEventSource Source identifier for IIndexedEvent. For more details see Javadoc. Inheritance object IndexedEventSource OrderSource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events Assembly: DxFeed.Graal.Net.dll Syntax public class IndexedEventSource Constructors | Edit this page View Source IndexedEventSource(int, string) Initializes a new instance of the IndexedEventSource class. Declaration public IndexedEventSource(int id, string name) Parameters Type Name Description int id The identifier. string name The name of identifier. See Also EventSource Fields | Edit this page View Source DEFAULT The default source with zero identifier for all events that do not support multiple sources. Declaration public static readonly IndexedEventSource DEFAULT Field Value Type Description IndexedEventSource See Also EventSource Properties | Edit this page View Source Id Gets a source identifier. Source identifier is non-negative. Declaration public int Id { get; } Property Value Type Description int See Also EventSource | Edit this page View Source Name Gets a name of identifier. Declaration public string Name { get; } Property Value Type Description string See Also EventSource Methods | Edit this page View Source Equals(object?) Indicates whether some other indexed event source has the same id. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) See Also EventSource | Edit this page View Source GetHashCode() Returns a hash code value for this object. The result of this method is equal to Id. Declaration public override int GetHashCode() Returns Type Description int A hash code value for this object. Overrides object.GetHashCode() See Also EventSource | Edit this page View Source ToString() Returns a string representation of the object. Declaration public override string ToString() Returns Type Description string A string representation of the object. Overrides object.ToString() See Also EventSource See Also EventSource"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.AnalyticOrder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.AnalyticOrder.html",
    "title": "Class AnalyticOrder | dxFeed Graal .NET API",
    "keywords": "Class AnalyticOrder Represents an extension of Order introducing analytics information, e.g. adding to this order iceberg related information (IcebergPeakSize, IcebergHiddenSize, IcebergExecutedSize). The collection of analytic order events of a symbol represents the most recent analytic information that is available about orders on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent OrderBase Order AnalyticOrder Implements IIndexedEvent IEventType Inherited Members Order.MarketMaker OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.AnalyticOrder)] public class AnalyticOrder : Order, IIndexedEvent, IEventType Constructors | Edit this page View Source AnalyticOrder() Initializes a new instance of the AnalyticOrder class. Declaration public AnalyticOrder() | Edit this page View Source AnalyticOrder(string?) Initializes a new instance of the AnalyticOrder class with the specified event symbol. Declaration public AnalyticOrder(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Properties | Edit this page View Source IcebergExecutedSize Gets or sets iceberg executed size of this analytic order. Declaration public double IcebergExecutedSize { get; set; } Property Value Type Description double | Edit this page View Source IcebergHiddenSize Gets or sets iceberg hidden size of this analytic order. Declaration public double IcebergHiddenSize { get; set; } Property Value Type Description double | Edit this page View Source IcebergPeakSize Gets or sets iceberg peak size of this analytic order. Declaration public double IcebergPeakSize { get; set; } Property Value Type Description double | Edit this page View Source IcebergType Gets or sets iceberg type of this analytic order. Declaration public IcebergType IcebergType { get; set; } Property Value Type Description IcebergType Methods | Edit this page View Source ToString() Returns string representation of this spread order event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides Order.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Direction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Direction.html",
    "title": "Enum Direction | dxFeed Graal .NET API",
    "keywords": "Enum Direction Direction of the price movement. For example tick direction for last trade price. For more details see Javadoc. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum Direction Fields Name Description Down Current price is lower than previous price. Undefined Direction is undefined, unknown or inapplicable. It includes cases with undefined price value or when direction computation was not performed. Up Current price is higher than previous price. Zero Current price is equal to the only known price value suitable for price direction computation. Unlike Undefined the Zero direction implies that current price is defined and direction computation was duly performed but has failed to detect any upward or downward price movement. It is also reported for cases when price sequence was broken and direction computation was restarted anew. ZeroDown Current price is the same as previous price and is lower than the last known price of different value. ZeroUp Current price is the same as previous price and is higher than the last known price of different value."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.IcebergType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.IcebergType.html",
    "title": "Enum IcebergType | dxFeed Graal .NET API",
    "keywords": "Enum IcebergType Type of an iceberg order. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum IcebergType Fields Name Description Native Represents native (exchange-managed) iceberg type. Synthetic Represents synthetic (managed outside of the exchange) iceberg type. Undefined Iceberg type is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.MarketEvent.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.MarketEvent.html",
    "title": "Class MarketEvent | dxFeed Graal .NET API",
    "keywords": "Class MarketEvent Abstract base class for all market events. All market events are objects that extend this class. Market event classes are simple beans with setter and getter methods for their properties and minimal business logic. All market events have EventSymbol property that is defined by this class. For more details see Javadoc. Inheritance object MarketEvent OptionSale OrderBase Profile Quote Summary TimeAndSale TradeBase Greeks Series TheoPrice Underlying Implements IEventType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public abstract class MarketEvent : IEventType Constructors | Edit this page View Source MarketEvent() Initializes a new instance of the MarketEvent class. Declaration protected MarketEvent() | Edit this page View Source MarketEvent(string?) Initializes a new instance of the MarketEvent class with the specified event symbol. Declaration protected MarketEvent(string? eventSymbol) Parameters Type Name Description string eventSymbol The event symbol. Properties | Edit this page View Source EventSymbol Gets or sets event symbol that identifies this event type DXFeedSubscription. Javadoc. Declaration public string? EventSymbol { get; set; } Property Value Type Description string | Edit this page View Source EventTime Gets or sets time when event was created or zero when time is not available. The difference, measured in milliseconds, between the event creation time and midnight, January 1, 1970 UTC or zero when time is not available. Javadoc. Declaration public long EventTime { get; set; } Property Value Type Description long Implements IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.MarketEventSymbols.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.MarketEventSymbols.html",
    "title": "Class MarketEventSymbols | dxFeed Graal .NET API",
    "keywords": "Class MarketEventSymbols Helper class to compose and parse symbols for market events. Regional symbols Regional symbol subscription receives events only from a designated exchange, marketplace, or venue instead of receiving composite events from all venues (by default). Regional symbol is composed from a base symbol, ampersand character ('&'), and an exchange code character. For example, \"SPY\" is the symbol for composite events for SPDR S&P 500 ETF from all exchanges, \"SPY&N\" is the symbol for event for SPDR S&P 500 ETF that originate only from NYSE marketplace. Symbol attributes Market event symbols can have a number of attributes attached to then in curly braces with \"<key>=<value>\" paris separated by commas. For example, \"SPY{price=bid}\" is the market symbol \"SPY\" with an attribute key \"price\" set to value \"bid\". \"SPY(=5m,tho=true}\" is the market symbol \"SPY\" with two attributes. One has an empty key and value \"5m\", while the other has key \"tho\" and value \"true\". The methods in this class always maintain attribute keys in alphabetic order. For more details see Javadoc. Inheritance object MarketEventSymbols Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public static class MarketEventSymbols Methods | Edit this page View Source ChangeAttributeStringByKey(string?, string?, string?) Changes value of one attribute value while leaving exchange code and other attributes intact. The null symbol is interpreted as empty one by this method. Declaration public static string? ChangeAttributeStringByKey(string? symbol, string? key, string? value) Parameters Type Name Description string symbol The old symbol. string key The attribute key. string value The attribute value. Returns Type Description string Returns new symbol with key attribute with the specified value and everything else from the old symbol. Exceptions Type Condition ArgumentNullException If key is null. | Edit this page View Source ChangeBaseSymbol(string?, string) Changes base symbol while leaving exchange code and attributes intact. The result is null if old symbol is null. Declaration public static string ChangeBaseSymbol(string? symbol, string baseSymbol) Parameters Type Name Description string symbol The old symbol. string baseSymbol The new base symbol. Returns Type Description string Returns new symbol with new base symbol and old symbol's exchange code and attributes. | Edit this page View Source ChangeExchangeCode(string?, char) Changes exchange code of the specified symbol or removes it if new exchange code is '\\0'. The result is null if old symbol is null. Declaration public static string? ChangeExchangeCode(string? symbol, char exchangeCode) Parameters Type Name Description string symbol The old symbol. char exchangeCode The new exchange code. Returns Type Description string Returns new symbol with the changed exchange code. | Edit this page View Source GetAttributeStringByKey(string?, string) Returns value of the attribute with the specified key. The result is null if attribute with the specified key is not found. The result is null if symbol is null. Declaration public static string? GetAttributeStringByKey(string? symbol, string key) Parameters Type Name Description string symbol The symbol. string key The attribute key. Returns Type Description string Returns value of the attribute with the specified key. Exceptions Type Condition ArgumentNullException If key is null. | Edit this page View Source GetBaseSymbol(string?) Returns base symbol without exchange code and attributes. The result is null if symbol is null. Declaration public static string? GetBaseSymbol(string? symbol) Parameters Type Name Description string symbol The specified symbol. Returns Type Description string Returns base symbol without exchange code and attributes. | Edit this page View Source GetExchangeCode(string?) Returns exchange code of the specified symbol or '\\0' if none is defined. The result is '\\0' if symbol is null. Declaration public static char GetExchangeCode(string? symbol) Parameters Type Name Description string symbol The specified symbol. Returns Type Description char Returns exchange code of the specified symbol or '\\0' if none is defined. | Edit this page View Source HasAttributes(string?) Checks if the specified symbol has any attributes. Declaration public static bool HasAttributes(string? symbol) Parameters Type Name Description string symbol The symbol. Returns Type Description bool Returns true if the specified symbol has any attributes. | Edit this page View Source HasExchangeCode(string?) Checks if the specified symbol has the exchange code specification. The result is false if symbol is null. Declaration public static bool HasExchangeCode(string? symbol) Parameters Type Name Description string symbol The specified symbol. Returns Type Description bool Returns true is the specified symbol has the exchange code specification. | Edit this page View Source RemoveAttributeStringByKey(string?, string?) Removes one attribute with the specified key while leaving exchange code and other attributes intact. The result is null if symbol is null. Declaration public static string? RemoveAttributeStringByKey(string? symbol, string? key) Parameters Type Name Description string symbol The old symbol. string key The attribute key. Returns Type Description string Returns new symbol without the specified key and everything else from the old symbol. Exceptions Type Condition ArgumentNullException If key is null."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OptionSale.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OptionSale.html",
    "title": "Class OptionSale | dxFeed Graal .NET API",
    "keywords": "Class OptionSale Option Sale event represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying. Option Sales are intended to provide information about option trades in a continuous time slice with the additional metrics, like Option Volatility, Option Delta, and Underlying Price. Option Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Inheritance object MarketEvent OptionSale Implements IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.OptionSale)] public class OptionSale : MarketEvent, IIndexedEvent, IEventType Constructors | Edit this page View Source OptionSale() Initializes a new instance of the OptionSale class. Declaration public OptionSale() | Edit this page View Source OptionSale(string?) Initializes a new instance of the OptionSale class with the specified event symbol. Declaration public OptionSale(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source AggressorSide Gets or sets aggressor side of this option sale event. Declaration public Side AggressorSide { get; set; } Property Value Type Description Side | Edit this page View Source AskPrice Gets or sets the current ask price on the market when this option sale event had occurred. Declaration public double AskPrice { get; set; } Property Value Type Description double | Edit this page View Source BidPrice Gets or sets the current bid price on the market when this option sale event had occurred. Declaration public double BidPrice { get; set; } Property Value Type Description double | Edit this page View Source Delta Gets or sets option delta at the time of this option sale event. Delta is the first derivative of an option price by an underlying price. Declaration public double Delta { get; set; } Property Value Type Description double | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source ExchangeCode Gets or sets exchange code of this option sale event. Declaration public char ExchangeCode { get; set; } Property Value Type Description char | Edit this page View Source ExchangeSaleConditions Gets or sets sale conditions provided for this event by data feed. This field format is specific for every particular data feed. Declaration public string? ExchangeSaleConditions { get; set; } Property Value Type Description string | Edit this page View Source Index Gets or sets unique per-symbol index of this option sale event. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source IsCancel Gets a value indicating whether this is a cancellation of a previous event. It is false for newly created option sale event. true if this is a cancellation of a previous event. Declaration public bool IsCancel { get; } Property Value Type Description bool | Edit this page View Source IsCorrection Gets a value indicating whether this is a correction of a previous event. It is false for newly created optionsale event. true if this is a correction of a previous event. Declaration public bool IsCorrection { get; } Property Value Type Description bool | Edit this page View Source IsExtendedTradingHours Gets or sets a value indicating whether this event represents an extended trading hours sale. Declaration public bool IsExtendedTradingHours { get; set; } Property Value Type Description bool | Edit this page View Source IsNew Gets a value indicating whether this is a new event (not cancellation or correction). It is true for newly created option sale event. Declaration public bool IsNew { get; } Property Value Type Description bool | Edit this page View Source IsSpreadLeg Gets or sets a value indicating whether this event represents a spread leg. Declaration public bool IsSpreadLeg { get; set; } Property Value Type Description bool | Edit this page View Source IsValidTick Gets or sets a value indicating whether this event represents a valid intraday tick. Note, that a correction for a previously distributed valid tick represents a new valid tick itself, but a cancellation of a previous valid tick does not. Declaration public bool IsValidTick { get; set; } Property Value Type Description bool | Edit this page View Source OptionSymbol Gets or sets option symbol of this event. Declaration public string? OptionSymbol { get; set; } Property Value Type Description string | Edit this page View Source Price Gets or sets price of this option sale event. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number sequence number of this order to distinguish orders that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Size Gets or sets size this option sale event as floating number with fractions. Declaration public double Size { get; set; } Property Value Type Description double | Edit this page View Source Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source TimeNanoPart Gets or sets microseconds and nanoseconds time part of event. Declaration public int TimeNanoPart { get; set; } Property Value Type Description int | Edit this page View Source TimeNanos Gets or sets time of the last trade in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long TimeNanos { get; set; } Property Value Type Description long | Edit this page View Source TimeSequence Gets or sets time and sequence of of this event. Do not set this property directly. Sets Time and/or Sequence. Declaration public long TimeSequence { get; set; } Property Value Type Description long | Edit this page View Source TradeThroughExempt Gets or sets TradeThroughExempt flag of this option sale event. Declaration public char TradeThroughExempt { get; set; } Property Value Type Description char | Edit this page View Source Type Gets or sets type of this option sale event. Declaration public TimeAndSaleType Type { get; set; } Property Value Type Description TimeAndSaleType | Edit this page View Source UnderlyingPrice Gets or sets underlying price at the time of this option sale event. Declaration public double UnderlyingPrice { get; set; } Property Value Type Description double | Edit this page View Source Volatility Gets or sets Black-Scholes implied volatility of the option at the time of this option sale event. Declaration public double Volatility { get; set; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns string representation of this option sale event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Order.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Order.html",
    "title": "Class Order | dxFeed Graal .NET API",
    "keywords": "Class Order Order event is a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order events give information on several levels of details, called scopes - see Scope. Scope of an order is available via Scopeproperty. For more details see Javadoc. Inheritance object MarketEvent OrderBase Order AnalyticOrder Implements IIndexedEvent IEventType Inherited Members OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Order)] public class Order : OrderBase, IIndexedEvent, IEventType Constructors | Edit this page View Source Order() Initializes a new instance of the Order class. Declaration public Order() | Edit this page View Source Order(string?) Initializes a new instance of the Order class with the specified event symbol. Declaration public Order(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Properties | Edit this page View Source MarketMaker Gets or sets market maker or other aggregate identifier of this order. This value is defined for Aggregate and Order orders. Declaration public string? MarketMaker { get; set; } Property Value Type Description string Methods | Edit this page View Source ToString() Returns string representation of this order event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides OrderBase.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderAction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderAction.html",
    "title": "Enum OrderAction | dxFeed Graal .NET API",
    "keywords": "Enum OrderAction Action enum for the Full Order Book (FOB) Orders. Action describes business meaning of the Order event: whether order was added or replaced, partially or fully executed, etc. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum OrderAction Fields Name Description Bust Prior Trade/Order Execution bust. Order's Size and Price will be equals to 0. Full Order Book fields: OrderId - always empty. TradeId - always present. TradeSize and TradePrice - always empty. Delete Order is fully canceled and removed from Order Book. Order's Size will be equal to 0. Full Order Book fields: OrderId - always present. AuxOrderId - ID of the new order replacing this order - if available. Trade fields will be empty. Execute Order is fully executed and removed from Order Book. Order's Size will be equals to 0. Full Order Book fields: OrderId - always present. AuxOrderId - aggressor order ID, if available. TradeId - if available. TradeSize and TradePrice - contain size and price of this execution - always present. Modify Order is modified without changing its price-time-priority (usually due to partial cancel by user). Order's Size will contain new updated size. Full Order Book fields: OrderId - always present. Trade fields will be empty. New New Order is added to Order Book. Full Order Book fields: OrderId - always present. AuxOrderId - ID of the order replaced by this new order - if available. Trade fields will be empty Partial Size is changed (usually reduced) due to partial order execution. Order's Size will be updated to show current outstanding size. Full Order Book fields: OrderId - always present. AuxOrderId - aggressor order ID, if available. TradeId - if available. TradeSize and TradePrice - contain size and price of this execution. Replace Order is modified and price-time-priority is not maintained (i.e. order has re-entered Order Book). Order EventSymbol and OrderSide will remain the same. Full Order Book fields: OrderId - always present. Trade fields will be empty. Trade Non-Book Trade - this Trade not refers to any entry in Order Book. Order's Size and Price will be equals to 0. Full Order Book fields: OrderId - always empty. TradeId - if available. TradeSize and TradePrice - contain size and price of this trade - always present. Undefined Default enum value for orders that do not support \"Full Order Book\" and for backward compatibility - action must be derived from other Order fields. All Full Order Book related fields for this action will be empty."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderBase.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderBase.html",
    "title": "Class OrderBase | dxFeed Graal .NET API",
    "keywords": "Class OrderBase Base class for common fields of Order, AnalyticOrder and SpreadOrder events. Order events represent a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order event represents market depth for a specific symbol. AnalyticOrder event represents market depth for a specific symbol extended with an analytic information, for example, whether particular order represent an iceberg or not. SpreadOrder event represents market depth for all spreads on a given underlying symbol. For more details see Javadoc. Inheritance object MarketEvent OrderBase Order SpreadOrder Implements IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public abstract class OrderBase : MarketEvent, IIndexedEvent, IEventType Constructors | Edit this page View Source OrderBase() Initializes a new instance of the OrderBase class. Declaration protected OrderBase() | Edit this page View Source OrderBase(string?) Initializes a new instance of the OrderBase class with specified event symbol. Declaration protected OrderBase(string? eventSymbol) Parameters Type Name Description string eventSymbol The event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source Action Gets or sets action of this order. Returns order action if available, otherwise - Undefined. Declaration public OrderAction Action { get; set; } Property Value Type Description OrderAction | Edit this page View Source ActionTime Gets or sets time of the last Action. Declaration public long ActionTime { get; set; } Property Value Type Description long | Edit this page View Source AuxOrderId Gets or sets order ID if available. Returns auxiliary order ID if available:. in New - ID of the order replaced by this new order. in Delete - ID of the order that replaces this deleted order. in Partial - ID of the aggressor order. in Execute - ID of the aggressor order. Declaration public long AuxOrderId { get; set; } Property Value Type Description long | Edit this page View Source Count Gets or sets number of individual orders in this aggregate order. Declaration public long Count { get; set; } Property Value Type Description long | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets or sets order source of this event. The source is stored in the highest bits of the Index of this event. Declaration public OrderSource EventSource { get; set; } Property Value Type Description OrderSource | Edit this page View Source ExchangeCode Gets or sets exchange code of this order. Declaration public char ExchangeCode { get; set; } Property Value Type Description char Exceptions Type Condition ArgumentException If exchange code is greater than 127. | Edit this page View Source ExecutedSize Gets or sets executed size of this order. Declaration public double ExecutedSize { get; set; } Property Value Type Description double | Edit this page View Source HasSize Gets a value indicating whether this order has some size (Size is neither 0 nor NaN). Declaration public bool HasSize { get; } Property Value Type Description bool | Edit this page View Source Index Gets or sets unique per-symbol index of this order. Index is non-negative. Note, that this method also changes EventSource, whose id occupies highest bits of index. Use EventSource after invocation of this method to set the desired value of source. Declaration public long Index { get; set; } Property Value Type Description long Exceptions Type Condition ArgumentException When index is negative. | Edit this page View Source OrderId Gets or sets order ID if available. Some actions Trade, Bust have no order ID since they are not related to any order in Order book. Declaration public long OrderId { get; set; } Property Value Type Description long | Edit this page View Source OrderSide Gets or sets side of this order. Declaration public Side OrderSide { get; set; } Property Value Type Description Side | Edit this page View Source Price Gets or sets price of this order event. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Scope Gets or sets scope of this order. Declaration public Scope Scope { get; set; } Property Value Type Description Scope | Edit this page View Source Sequence Gets or sets sequence number sequence number of this order to distinguish orders that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Size Gets or sets size of this order event as floating number with fractions. Declaration public double Size { get; set; } Property Value Type Description double | Edit this page View Source Time Gets or sets time of this order. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source TimeNanoPart Gets or sets microseconds and nanoseconds time part of this order. Declaration public int TimeNanoPart { get; set; } Property Value Type Description int | Edit this page View Source TimeNanos Gets or sets timestamp of the original event in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long TimeNanos { get; set; } Property Value Type Description long | Edit this page View Source TimeSequence Gets or sets time and sequence of this order packaged into single long value This method is intended for efficient order time priority comparison. Do not set their property directly. Change Time and/or Sequence. Declaration public long TimeSequence { get; set; } Property Value Type Description long | Edit this page View Source TradeId Gets or sets trade (order execution) ID for events containing trade-related action. Returns 0 if trade ID not available. Declaration public long TradeId { get; set; } Property Value Type Description long | Edit this page View Source TradePrice Gets or sets trade price for events containing trade-related action. Declaration public double TradePrice { get; set; } Property Value Type Description double | Edit this page View Source TradeSize Gets or sets trade size for events containing trade-related action. Declaration public double TradeSize { get; set; } Property Value Type Description double Methods | Edit this page View Source BaseFieldsToString() Returns string representation of this order fields. Declaration protected string BaseFieldsToString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this base order event's. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.OrderSource.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.OrderSource.html",
    "title": "Class OrderSource | dxFeed Graal .NET API",
    "keywords": "Class OrderSource Identifies source of Order, AnalyticOrder and SpreadOrder events. Synthetic sources COMPOSITE_BID, COMPOSITE_ASK, REGIONAL_BID and REGIONAL_ASK are provided for convenience of a consolidated order book and are automatically generated based on the corresponding Quote events. Aggregate sources AGGREGATE_BID and AGGREGATE_ASK provide futures depth (aggregated by price level) and NASDAQ Level II (top of book for each market maker). These source cannot be directly published to via dxFeed API. IsPublishable(Type) sources DEFAULT, NTV and ISE support full range of dxFeed API features. For more details see Javadoc. Inheritance object IndexedEventSource OrderSource Inherited Members IndexedEventSource.Id IndexedEventSource.Name IndexedEventSource.ToString() IndexedEventSource.Equals(object) IndexedEventSource.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public class OrderSource : IndexedEventSource Fields | Edit this page View Source ABE ABE (abe.io) exchange. Declaration public static readonly OrderSource ABE Field Value Type Description OrderSource | Edit this page View Source AGGREGATE_ASK Ask side of an aggregate order book (futures depth and NASDAQ Level II). This source cannot be directly published via dxFeed API, but otherwise it is fully operational. Declaration public static readonly OrderSource AGGREGATE_ASK Field Value Type Description OrderSource | Edit this page View Source AGGREGATE_BID Bid side of an aggregate order book (futures depth and NASDAQ Level II). This source cannot be directly published via dxFeed API, but otherwise it is fully operational. Declaration public static readonly OrderSource AGGREGATE_BID Field Value Type Description OrderSource | Edit this page View Source BATE Bats Europe BXE Exchange. Declaration public static readonly OrderSource BATE Field Value Type Description OrderSource | Edit this page View Source BI20 Borsa Istanbul Exchange. Record for particular top 20 order book. Declaration public static readonly OrderSource BI20 Field Value Type Description OrderSource | Edit this page View Source BXTR Bats Europe TRF. Declaration public static readonly OrderSource BXTR Field Value Type Description OrderSource | Edit this page View Source BYX Bats BYX Exchange. Declaration public static readonly OrderSource BYX Field Value Type Description OrderSource | Edit this page View Source BZX Bats BZX Exchange. Declaration public static readonly OrderSource BZX Field Value Type Description OrderSource | Edit this page View Source C2OX CBOE Options C2 Exchange. Declaration public static readonly OrderSource C2OX Field Value Type Description OrderSource | Edit this page View Source CEUX Bats Europe DXE Exchange. Declaration public static readonly OrderSource CEUX Field Value Type Description OrderSource | Edit this page View Source CFE CBOE Futures Exchange. Declaration public static readonly OrderSource CFE Field Value Type Description OrderSource | Edit this page View Source CHIX Bats Europe CXE Exchange. Declaration public static readonly OrderSource CHIX Field Value Type Description OrderSource | Edit this page View Source COMPOSITE_ASK Ask side of a composite Quote. It is a synthetic source. The subscription on composite Quote event is observed when this source is subscribed to. Declaration public static readonly OrderSource COMPOSITE_ASK Field Value Type Description OrderSource | Edit this page View Source COMPOSITE_BID Bid side of a composite Quote. It is a synthetic source. The subscription on composite Quote event is observed when this source is subscribed to. Declaration public static readonly OrderSource COMPOSITE_BID Field Value Type Description OrderSource | Edit this page View Source DEA Direct-Edge EDGA Exchange. Declaration public static readonly OrderSource DEA Field Value Type Description OrderSource | Edit this page View Source DEFAULT Default source for publishing custom order books. Declaration public static readonly OrderSource DEFAULT Field Value Type Description OrderSource | Edit this page View Source DEX Direct-Edge EDGX Exchange. Declaration public static readonly OrderSource DEX Field Value Type Description OrderSource | Edit this page View Source ERIS Eris Exchange group of companies. Declaration public static readonly OrderSource ERIS Field Value Type Description OrderSource | Edit this page View Source ESPD NASDAQ eSpeed. Declaration public static readonly OrderSource ESPD Field Value Type Description OrderSource | Edit this page View Source FAIR FAIR (FairX) exchange. Declaration public static readonly OrderSource FAIR Field Value Type Description OrderSource | Edit this page View Source GLBX CME Globex. Declaration public static readonly OrderSource GLBX Field Value Type Description OrderSource | Edit this page View Source ICE Intercontinental Exchange. Declaration public static readonly OrderSource ICE Field Value Type Description OrderSource | Edit this page View Source ISE International Securities Exchange. Declaration public static readonly OrderSource ISE Field Value Type Description OrderSource | Edit this page View Source IST Borsa Istanbul Exchange. Declaration public static readonly OrderSource IST Field Value Type Description OrderSource | Edit this page View Source MEMX Members Exchange. Declaration public static readonly OrderSource MEMX Field Value Type Description OrderSource | Edit this page View Source NFX NASDAQ Futures Exchange. Declaration public static readonly OrderSource NFX Field Value Type Description OrderSource | Edit this page View Source NTV NASDAQ Total View. Declaration public static readonly OrderSource NTV Field Value Type Description OrderSource | Edit this page View Source REGIONAL_ASK Ask side of a regional Quote. It is a synthetic source. The subscription on regional Quote event is observed when this source is subscribed to. Declaration public static readonly OrderSource REGIONAL_ASK Field Value Type Description OrderSource | Edit this page View Source REGIONAL_BID Bid side of a regional Quote. It is a synthetic source. The subscription on regional Quote event is observed when this source is subscribed to. Declaration public static readonly OrderSource REGIONAL_BID Field Value Type Description OrderSource | Edit this page View Source SMFE Small Exchange. Declaration public static readonly OrderSource SMFE Field Value Type Description OrderSource | Edit this page View Source XEUR Eurex Exchange. Declaration public static readonly OrderSource XEUR Field Value Type Description OrderSource | Edit this page View Source XNFI NASDAQ Fixed Income. Declaration public static readonly OrderSource XNFI Field Value Type Description OrderSource | Edit this page View Source glbx CME Globex. Record for price level book. Declaration public static readonly OrderSource glbx Field Value Type Description OrderSource | Edit this page View Source iex Investors exchange. Record for price level book. Declaration public static readonly OrderSource iex Field Value Type Description OrderSource | Edit this page View Source memx Members Exchange. Record for price level book. Declaration public static readonly OrderSource memx Field Value Type Description OrderSource | Edit this page View Source ntv NASDAQ Total View. Record for price level book. Declaration public static readonly OrderSource ntv Field Value Type Description OrderSource | Edit this page View Source smfe Small Exchange. Record for price level book. Declaration public static readonly OrderSource smfe Field Value Type Description OrderSource | Edit this page View Source xeur Eurex Exchange. Record for price level book. Declaration public static readonly OrderSource xeur Field Value Type Description OrderSource Properties | Edit this page View Source IsFullOrderBook Gets a value indicating whether this source supports Full Order Book. Declaration public bool IsFullOrderBook { get; } Property Value Type Description bool Methods | Edit this page View Source GetEventTypeMask(Type) Gets type mask by specified event type. Declaration public static int GetEventTypeMask(Type eventType) Parameters Type Name Description Type eventType The type of event. Returns Type Description int Returns type mask. Exceptions Type Condition ArgumentException If the eventType does not inherit OrderBase. OrderBase. | Edit this page View Source IsPublishable(Type) Gets a value indicating whether the given event type can be directly published with this source. Subscription on such sources can be observed directly via DXPublisher. Subscription on such sources is observed via instances of IndexedEventSubscriptionSymbol<T> class. Declaration public bool IsPublishable(Type eventType) Parameters Type Name Description Type eventType Typeof Order or AnalyticOrder or SpreadOrder. Returns Type Description bool true if Order , AnalyticOrder and SpreadOrder events can be directly published with this source. Exceptions Type Condition ArgumentException If eventType differs from Order , AnalyticOrder, SpreadOrder. | Edit this page View Source IsSpecialSourceId(int) Determines whether specified source identifier refers to special order source. Special order sources are used for wrapping non-order events into order events. Declaration public static bool IsSpecialSourceId(int sourceId) Parameters Type Name Description int sourceId The source identifier. Returns Type Description bool Returns true if it is a special source identifier. | Edit this page View Source ValueOf(int) Returns order source for the specified source identifier. Declaration public static OrderSource ValueOf(int sourceId) Parameters Type Name Description int sourceId The source identifier. Returns Type Description OrderSource Return OrderSource. Exceptions Type Condition ArgumentException If sourceId is negative or zero. | Edit this page View Source ValueOf(string) Returns order source for the specified source name. The name must be either predefined, or contain at most 4 alphanumeric characters. Declaration public static OrderSource ValueOf(string name) Parameters Type Name Description string name The name of the source. Returns Type Description OrderSource Return OrderSource. Exceptions Type Condition ArgumentException If name is malformed.."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.PriceType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.PriceType.html",
    "title": "Enum PriceType | dxFeed Graal .NET API",
    "keywords": "Enum PriceType Type of the price value. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum PriceType Fields Name Description Final Final price (final settlement price). Indicative Indicative price (derived via math formula). Preliminary Preliminary price (preliminary settlement price), usually posted prior to Finalprice. Regular Regular price."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Profile.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Profile.html",
    "title": "Class Profile | dxFeed Graal .NET API",
    "keywords": "Class Profile Profile information snapshot that contains security instrument description. It represents the most recent information that is available about the traded security on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Profile Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Profile)] public class Profile : MarketEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Profile() Initializes a new instance of the Profile class. Declaration public Profile() | Edit this page View Source Profile(string?) Initializes a new instance of the Profile class with the specified event symbol. Declaration public Profile(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Properties | Edit this page View Source Beta Gets or sets the correlation coefficient of the instrument to the S&P500 index. Declaration public double Beta { get; set; } Property Value Type Description double | Edit this page View Source Description Gets or sets description of the security instrument. Declaration public string? Description { get; set; } Property Value Type Description string | Edit this page View Source DividendFrequency Gets or sets the frequency of cash dividends payments per year (calculated). Declaration public double DividendFrequency { get; set; } Property Value Type Description double | Edit this page View Source EarningsPerShare Gets or sets the earnings per share (the company’s profits divided by the number of shares). Declaration public double EarningsPerShare { get; set; } Property Value Type Description double | Edit this page View Source ExDividendAmount Gets or sets the amount of the last paid dividend. Declaration public double ExDividendAmount { get; set; } Property Value Type Description double | Edit this page View Source ExDividendDayId Gets or sets the identifier of the day of the last dividend payment (ex-dividend date). Identifier of the day is the number of days passed since January 1, 1970. Declaration public int ExDividendDayId { get; set; } Property Value Type Description int | Edit this page View Source FreeFloat Gets or sets the free-float - the number of shares outstanding that are available to the public for trade. Declaration public double FreeFloat { get; set; } Property Value Type Description double | Edit this page View Source HaltEndTime Gets or sets ending time of the trading halt interval. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long HaltEndTime { get; set; } Property Value Type Description long | Edit this page View Source HaltStartTime Gets or sets starting time of the trading halt interval. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long HaltStartTime { get; set; } Property Value Type Description long | Edit this page View Source High52WeekPrice Gets or sets the maximal (high) price in last 52 weeks. Declaration public double High52WeekPrice { get; set; } Property Value Type Description double | Edit this page View Source HighLimitPrice Gets or sets the maximal (high) allowed price. Declaration public double HighLimitPrice { get; set; } Property Value Type Description double | Edit this page View Source IsShortSaleRestricted Gets a value indicating whether short sale of the security instrument is restricted. Declaration public bool IsShortSaleRestricted { get; } Property Value Type Description bool | Edit this page View Source IsTradingHalted Gets a value indicating whether trading of the security instrument is halted. Declaration public bool IsTradingHalted { get; } Property Value Type Description bool | Edit this page View Source Low52WeekPrice Gets or sets the minimal (low) price in last 52 weeks. Declaration public double Low52WeekPrice { get; set; } Property Value Type Description double | Edit this page View Source LowLimitPrice Gets or sets the minimal (low) allowed price. Declaration public double LowLimitPrice { get; set; } Property Value Type Description double | Edit this page View Source Shares Gets or sets the the number of shares outstanding. Declaration public double Shares { get; set; } Property Value Type Description double | Edit this page View Source ShortSaleRestriction Gets or sets short sale restriction of the security instrument. Declaration public ShortSaleRestriction ShortSaleRestriction { get; set; } Property Value Type Description ShortSaleRestriction | Edit this page View Source StatusReason Gets or sets description of the reason that trading was halted. Declaration public string? StatusReason { get; set; } Property Value Type Description string | Edit this page View Source TradingStatus Gets or sets trading status of the security instrument. Declaration public TradingStatus TradingStatus { get; set; } Property Value Type Description TradingStatus Methods | Edit this page View Source BaseFieldsToString() Returns string representation of this order fields. Declaration protected string BaseFieldsToString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this profile event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Quote.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Quote.html",
    "title": "Class Quote | dxFeed Graal .NET API",
    "keywords": "Class Quote Quote event is a snapshot of the best bid and ask prices, and other fields that change with each quote. It represents the most recent information that is available about the best quote on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Quote Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Quote)] public class Quote : MarketEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Quote() Initializes a new instance of the Quote class. Declaration public Quote() | Edit this page View Source Quote(string?) Initializes a new instance of the Quote class with the specified event symbol. Declaration public Quote(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source AskExchangeCode Gets or sets ask exchange code. Declaration public char AskExchangeCode { get; set; } Property Value Type Description char | Edit this page View Source AskPrice Gets or sets ask price. Declaration public double AskPrice { get; set; } Property Value Type Description double | Edit this page View Source AskSize Gets or sets ask size. Declaration public double AskSize { get; set; } Property Value Type Description double | Edit this page View Source AskTime Gets or sets time of the last ask change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. This time is always transmitted with seconds precision, so the result of this method is usually a multiple of 1000. You can set the actual millisecond-precision time here to publish event and the millisecond part will make the time of this quote even precise up to a millisecond. Declaration public long AskTime { get; set; } Property Value Type Description long | Edit this page View Source BidExchangeCode Gets or sets bid exchange code. Declaration public char BidExchangeCode { get; set; } Property Value Type Description char | Edit this page View Source BidPrice Gets or sets bid price. Declaration public double BidPrice { get; set; } Property Value Type Description double | Edit this page View Source BidSize Gets or sets bid size. Declaration public double BidSize { get; set; } Property Value Type Description double | Edit this page View Source BidTime Gets or sets time of the last bid change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. This time is always transmitted with seconds precision, so the result of this method is usually a multiple of 1000. You can set the actual millisecond-precision time here to publish event and the millisecond part will make the time of this quote even precise up to a millisecond. Declaration public long BidTime { get; set; } Property Value Type Description long | Edit this page View Source Sequence Gets or sets sequence number of this quote to distinguish quotes that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Time Gets time of the last bid or ask change. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; } Property Value Type Description long | Edit this page View Source TimeNanoPart Gets or sets microseconds and nanoseconds part of time of the last bid or ask change. This method changes TimeNanos result. Declaration public int TimeNanoPart { get; set; } Property Value Type Description int | Edit this page View Source TimeNanos Gets time of the last bid or ask change in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long TimeNanos { get; } Property Value Type Description long Methods | Edit this page View Source ToString() Returns string representation of this quote event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Scope.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Scope.html",
    "title": "Enum Scope | dxFeed Graal .NET API",
    "keywords": "Enum Scope Scope of an order. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum Scope Fields Name Description Aggregate Represents aggregate information for a given price level or best bid or best offer for a given market maker. Composite Represents best bid or best offer for the whole market. Order Represents individual order on the market. Regional Represents best bid or best offer for a given exchange code."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.ShortSaleRestriction.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.ShortSaleRestriction.html",
    "title": "Enum ShortSaleRestriction | dxFeed Graal .NET API",
    "keywords": "Enum ShortSaleRestriction Short sale restriction on an instrument. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum ShortSaleRestriction Fields Name Description Active Short sale restriction is active. Inactive Short sale restriction is inactive. Undefined Short sale restriction is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Side.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Side.html",
    "title": "Enum Side | dxFeed Graal .NET API",
    "keywords": "Enum Side Side of an order or a trade. For more details see Javadoc. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum Side Fields Name Description Buy Buy side (bid). Sell Sell side (ask or offer). Undefined Side is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.SpreadOrder.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.SpreadOrder.html",
    "title": "Class SpreadOrder | dxFeed Graal .NET API",
    "keywords": "Class SpreadOrder Spread order event is a snapshot for a full available market depth for all spreads on a given underlying symbol. The collection of spread order events of a symbol represents the most recent information that is available about spread orders on the market at any given moment of time. Spread order is similar to a regular Order, but it has a SpreadSymbol property that contains the symbol of the actual spread that is being represented by spread order object. EventSymbol property contains the underlying symbol that was used in subscription. For more details see Javadoc. Inheritance object MarketEvent OrderBase SpreadOrder Implements IIndexedEvent IEventType Inherited Members OrderBase.MaxSequence OrderBase.EventSource OrderBase.EventFlags OrderBase.Index OrderBase.TimeSequence OrderBase.Time OrderBase.TimeNanoPart OrderBase.Sequence OrderBase.TimeNanos OrderBase.Action OrderBase.ActionTime OrderBase.OrderId OrderBase.AuxOrderId OrderBase.Price OrderBase.Size OrderBase.HasSize OrderBase.ExecutedSize OrderBase.Count OrderBase.TradeId OrderBase.TradePrice OrderBase.TradeSize OrderBase.ExchangeCode OrderBase.OrderSide OrderBase.Scope OrderBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.SpreadOrder)] public class SpreadOrder : OrderBase, IIndexedEvent, IEventType Constructors | Edit this page View Source SpreadOrder() Initializes a new instance of the SpreadOrder class. Declaration public SpreadOrder() | Edit this page View Source SpreadOrder(string?) Initializes a new instance of the SpreadOrder class with the specified event symbol. Declaration public SpreadOrder(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Properties | Edit this page View Source SpreadSymbol Gets or sets spread symbol of this event. Declaration public string? SpreadSymbol { get; set; } Property Value Type Description string Methods | Edit this page View Source ToString() Returns string representation of this spread order event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides OrderBase.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Summary.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Summary.html",
    "title": "Class Summary | dxFeed Graal .NET API",
    "keywords": "Class Summary Summary information snapshot about the trading session including session highs, lows, etc. It represents the most recent information that is available about the trading session in the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Summary Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Summary)] public class Summary : MarketEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Summary() Initializes a new instance of the Summary class. Declaration public Summary() | Edit this page View Source Summary(string?) Initializes a new instance of the Summary class with the specified event symbol. Declaration public Summary(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Properties | Edit this page View Source DayClosePrice Gets or sets the last (close) price for the day. Declaration public double DayClosePrice { get; set; } Property Value Type Description double | Edit this page View Source DayClosePriceType Gets or sets the price type of the last (close) price for the day. Declaration public PriceType DayClosePriceType { get; set; } Property Value Type Description PriceType | Edit this page View Source DayHighPrice Gets or sets the maximal (high) price for the day. Declaration public double DayHighPrice { get; set; } Property Value Type Description double | Edit this page View Source DayId Gets or sets identifier of the day that this summary represents. Identifier of the day is the number of days passed since January 1, 1970. Declaration public int DayId { get; set; } Property Value Type Description int | Edit this page View Source DayLowPrice Gets or sets the minimal (low) price for the day. Declaration public double DayLowPrice { get; set; } Property Value Type Description double | Edit this page View Source DayOpenPrice Gets or sets the first (open) price for the day. Declaration public double DayOpenPrice { get; set; } Property Value Type Description double | Edit this page View Source OpenInterest Gets or sets open interest of the symbol as the number of open contracts. Declaration public long OpenInterest { get; set; } Property Value Type Description long | Edit this page View Source PrevDayClosePrice Gets or sets the last (close) price for the previous day. Declaration public double PrevDayClosePrice { get; set; } Property Value Type Description double | Edit this page View Source PrevDayClosePriceType Gets or sets the price type of the last (close) price for the previous day. Declaration public PriceType PrevDayClosePriceType { get; set; } Property Value Type Description PriceType | Edit this page View Source PrevDayId Gets or sets identifier of the previous day that this summary represents. Identifier of the day is the number of days passed since January 1, 1970. Declaration public int PrevDayId { get; set; } Property Value Type Description int | Edit this page View Source PrevDayVolume Gets or sets total volume traded for the previous day. Declaration public double PrevDayVolume { get; set; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns string representation of this summary event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSale.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSale.html",
    "title": "Class TimeAndSale | dxFeed Graal .NET API",
    "keywords": "Class TimeAndSale Time and Sale represents a trade or other market event with price, like market open/close price, etc. Time and Sales are intended to provide information about trades in a continuous time slice (unlike Trade events which are supposed to provide snapshot about the current last trade). Time and Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Inheritance object MarketEvent TimeAndSale Implements ITimeSeriesEvent IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.TimeAndSale)] public class TimeAndSale : MarketEvent, ITimeSeriesEvent, IIndexedEvent, IEventType Constructors | Edit this page View Source TimeAndSale() Initializes a new instance of the TimeAndSale class. Declaration public TimeAndSale() | Edit this page View Source TimeAndSale(string?) Initializes a new instance of the TimeAndSale class with the specified event symbol. Declaration public TimeAndSale(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source AggressorSide Gets or sets aggressor side of this time and sale event. Declaration public Side AggressorSide { get; set; } Property Value Type Description Side | Edit this page View Source AskPrice Gets or sets the current ask price on the market when this time and sale event had occurred. Declaration public double AskPrice { get; set; } Property Value Type Description double | Edit this page View Source BidPrice Gets or sets the current bid price on the market when this time and sale event had occurred. Declaration public double BidPrice { get; set; } Property Value Type Description double | Edit this page View Source Buyer Gets or sets buyer of this time and sale event. Declaration public string? Buyer { get; set; } Property Value Type Description string | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source ExchangeCode Gets or sets exchange code of this time and sale event. Declaration public char ExchangeCode { get; set; } Property Value Type Description char | Edit this page View Source ExchangeSaleConditions Gets or sets sale conditions provided for this event by data feed. This field format is specific for every particular data feed. Declaration public string? ExchangeSaleConditions { get; set; } Property Value Type Description string | Edit this page View Source Index Gets or sets unique per-symbol index of this time and sale event. Time and sale index is composed of Time and Sequence. Changing either time or sequence changes event index. Do not sets this value directly. Change Time and/or Sequence. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source IsCancel Gets a value indicating whether this is a cancellation of a previous event. It is false for newly created time and sale event. true if this is a cancellation of a previous event. Declaration public bool IsCancel { get; } Property Value Type Description bool | Edit this page View Source IsCorrection Gets a value indicating whether this is a correction of a previous event. It is false for newly created time and sale event. true if this is a correction of a previous event. Declaration public bool IsCorrection { get; } Property Value Type Description bool | Edit this page View Source IsExtendedTradingHours Gets or sets a value indicating whether this event represents an extended trading hours sale. Declaration public bool IsExtendedTradingHours { get; set; } Property Value Type Description bool | Edit this page View Source IsNew Gets a value indicating whether this is a new event (not cancellation or correction). It is true for newly created time and sale event. Declaration public bool IsNew { get; } Property Value Type Description bool | Edit this page View Source IsSpreadLeg Gets or sets a value indicating whether this event represents a spread leg. Declaration public bool IsSpreadLeg { get; set; } Property Value Type Description bool | Edit this page View Source IsValidTick Gets or sets a value indicating whether this event represents a valid intraday tick. Note, that a correction for a previously distributed valid tick represents a new valid tick itself, but a cancellation of a previous valid tick does not. Declaration public bool IsValidTick { get; set; } Property Value Type Description bool | Edit this page View Source Price Gets or sets price of this time and sale event. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Seller Gets or sets seller of this time and sale event. Declaration public string? Seller { get; set; } Property Value Type Description string | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Size Gets or sets size of this time and sale event as floating number with fractions. Declaration public double Size { get; set; } Property Value Type Description double | Edit this page View Source Time Gets or sets timestamp of the original event. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source TimeNanoPart Gets or sets microseconds and nanoseconds time part of event. Declaration public int TimeNanoPart { get; set; } Property Value Type Description int | Edit this page View Source TimeNanos Gets or sets timestamp of the original event in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long TimeNanos { get; set; } Property Value Type Description long | Edit this page View Source TradeThroughExempt Gets or sets TradeThroughExempt flag of this time and sale event. Declaration public char TradeThroughExempt { get; set; } Property Value Type Description char | Edit this page View Source Type Gets or sets type of this time and sale event. Declaration public TimeAndSaleType Type { get; set; } Property Value Type Description TimeAndSaleType Methods | Edit this page View Source ToString() Returns string representation of this time and sale event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ITimeSeriesEvent IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSaleType.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TimeAndSaleType.html",
    "title": "Enum TimeAndSaleType | dxFeed Graal .NET API",
    "keywords": "Enum TimeAndSaleType Type of a time and sale event. For more details see Javadoc. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum TimeAndSaleType Fields Name Description Cancel Represents cancel time and sale event. Correction Represents correction time and sale event. New Represents new time and sale event."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.Trade.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.Trade.html",
    "title": "Class Trade | dxFeed Graal .NET API",
    "keywords": "Class Trade Trade event is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover. It represents the most recent information that is available about the regular last trade on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent TradeBase Trade Implements ILastingEvent IEventType Inherited Members TradeBase.MaxSequence TradeBase.TimeSequence TradeBase.Time TradeBase.TimeNanos TradeBase.TimeNanoPart TradeBase.Sequence TradeBase.ExchangeCode TradeBase.Price TradeBase.Size TradeBase.DayId TradeBase.DayVolume TradeBase.DayTurnover TradeBase.TickDirection TradeBase.IsExtendedTradingHours TradeBase.Change TradeBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Trade)] public class Trade : TradeBase, ILastingEvent, IEventType Constructors | Edit this page View Source Trade() Initializes a new instance of the Trade class. Declaration public Trade() | Edit this page View Source Trade(string?) Initializes a new instance of the Trade class with the specified event symbol. Declaration public Trade(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Methods | Edit this page View Source ToString() Returns string representation of this trade event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides TradeBase.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradeBase.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradeBase.html",
    "title": "Class TradeBase | dxFeed Graal .NET API",
    "keywords": "Class TradeBase Base class for common fields of Trade and TradeETH events. Trade events represent the most recent information that is available about the last trade on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent TradeBase Trade TradeETH Implements ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public abstract class TradeBase : MarketEvent, ILastingEvent, IEventType Constructors | Edit this page View Source TradeBase() Initializes a new instance of the TradeBase class. Declaration protected TradeBase() | Edit this page View Source TradeBase(string?) Initializes a new instance of the TradeBase class with the specified event symbol. Declaration protected TradeBase(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source Change Gets or sets change of the last trade. Declaration public double Change { get; set; } Property Value Type Description double | Edit this page View Source DayId Gets or sets identifier of the current trading day. Identifier of the day is the number of days passed since January 1, 1970. Declaration public int DayId { get; set; } Property Value Type Description int | Edit this page View Source DayTurnover Gets or sets total turnover traded for a day. Day VWAP can be computed with DayTurnover / DayVolume. Declaration public double DayTurnover { get; set; } Property Value Type Description double | Edit this page View Source DayVolume Gets or sets total volume traded for a day as floating number with fractions. Declaration public double DayVolume { get; set; } Property Value Type Description double | Edit this page View Source ExchangeCode Gets or sets exchange code of the last trade. Declaration public char ExchangeCode { get; set; } Property Value Type Description char | Edit this page View Source IsExtendedTradingHours Gets or sets a value indicating whether last trade was in extended trading hours. Declaration public bool IsExtendedTradingHours { get; set; } Property Value Type Description bool | Edit this page View Source Price Gets or sets price of the last trade. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of the last trade to distinguish trades that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Size Gets or sets size of this last trade event as floating number with fractions. Declaration public double Size { get; set; } Property Value Type Description double | Edit this page View Source TickDirection Gets or sets tick direction of the last trade. Declaration public Direction TickDirection { get; set; } Property Value Type Description Direction | Edit this page View Source Time Gets or sets time of the last trade. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source TimeNanoPart Gets or sets microseconds and nanoseconds time part of the last trade. Declaration public int TimeNanoPart { get; set; } Property Value Type Description int | Edit this page View Source TimeNanos Gets or sets time of the last trade in nanoseconds. Time is measured in nanoseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long TimeNanos { get; set; } Property Value Type Description long | Edit this page View Source TimeSequence Gets or sets time and sequence of last trade packaged into single long value. Do not set this property directly. Sets Time and/or Sequence. Declaration public long TimeSequence { get; set; } Property Value Type Description long Methods | Edit this page View Source BaseFieldsToString() Returns string representation of this trade fields. Declaration protected string BaseFieldsToString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this base trade event's. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradeETH.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradeETH.html",
    "title": "Class TradeETH | dxFeed Graal .NET API",
    "keywords": "Class TradeETH TradeETH event is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover. This event is defined only for symbols (typically stocks and ETFs) with a designated extended trading hours (ETH, pre market and post market trading sessions). It represents the most recent information that is available about ETH last trade on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent TradeBase TradeETH Implements ILastingEvent IEventType Inherited Members TradeBase.MaxSequence TradeBase.TimeSequence TradeBase.Time TradeBase.TimeNanos TradeBase.TimeNanoPart TradeBase.Sequence TradeBase.ExchangeCode TradeBase.Price TradeBase.Size TradeBase.DayId TradeBase.DayVolume TradeBase.DayTurnover TradeBase.TickDirection TradeBase.IsExtendedTradingHours TradeBase.Change TradeBase.BaseFieldsToString() MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.TradeETH)] public class TradeETH : TradeBase, ILastingEvent, IEventType Constructors | Edit this page View Source TradeETH() Initializes a new instance of the TradeETH class. Declaration public TradeETH() | Edit this page View Source TradeETH(string?) Initializes a new instance of the TradeETH class with the specified event symbol. Declaration public TradeETH(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Methods | Edit this page View Source ToString() Returns string representation of this trade event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides TradeBase.ToString() Implements ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.TradingStatus.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.TradingStatus.html",
    "title": "Enum TradingStatus | dxFeed Graal .NET API",
    "keywords": "Enum TradingStatus Trading status of an instrument. Namespace: DxFeed.Graal.Net.Events.Market Assembly: DxFeed.Graal.Net.dll Syntax public enum TradingStatus Fields Name Description Active Trading is active. Halted Trading is halted. Undefined Trading status is undefined, unknown or inapplicable."
  },
  "docs/api/DxFeed.Graal.Net.Events.Market.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Market.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Market | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Market Classes AnalyticOrder Represents an extension of Order introducing analytics information, e.g. adding to this order iceberg related information (IcebergPeakSize, IcebergHiddenSize, IcebergExecutedSize). The collection of analytic order events of a symbol represents the most recent analytic information that is available about orders on the market at any given moment of time. For more details see Javadoc. MarketEvent Abstract base class for all market events. All market events are objects that extend this class. Market event classes are simple beans with setter and getter methods for their properties and minimal business logic. All market events have EventSymbol property that is defined by this class. For more details see Javadoc. MarketEventSymbols Helper class to compose and parse symbols for market events. Regional symbols Regional symbol subscription receives events only from a designated exchange, marketplace, or venue instead of receiving composite events from all venues (by default). Regional symbol is composed from a base symbol, ampersand character ('&'), and an exchange code character. For example, \"SPY\" is the symbol for composite events for SPDR S&P 500 ETF from all exchanges, \"SPY&N\" is the symbol for event for SPDR S&P 500 ETF that originate only from NYSE marketplace. Symbol attributes Market event symbols can have a number of attributes attached to then in curly braces with \"<key>=<value>\" paris separated by commas. For example, \"SPY{price=bid}\" is the market symbol \"SPY\" with an attribute key \"price\" set to value \"bid\". \"SPY(=5m,tho=true}\" is the market symbol \"SPY\" with two attributes. One has an empty key and value \"5m\", while the other has key \"tho\" and value \"true\". The methods in this class always maintain attribute keys in alphabetic order. For more details see Javadoc. OptionSale Option Sale event represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying. Option Sales are intended to provide information about option trades in a continuous time slice with the additional metrics, like Option Volatility, Option Delta, and Underlying Price. Option Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Order Order event is a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order events give information on several levels of details, called scopes - see Scope. Scope of an order is available via Scopeproperty. For more details see Javadoc. OrderBase Base class for common fields of Order, AnalyticOrder and SpreadOrder events. Order events represent a snapshot for a full available market depth for a symbol. The collection of order events of a symbol represents the most recent information that is available about orders on the market at any given moment of time. Order event represents market depth for a specific symbol. AnalyticOrder event represents market depth for a specific symbol extended with an analytic information, for example, whether particular order represent an iceberg or not. SpreadOrder event represents market depth for all spreads on a given underlying symbol. For more details see Javadoc. OrderSource Identifies source of Order, AnalyticOrder and SpreadOrder events. Synthetic sources COMPOSITE_BID, COMPOSITE_ASK, REGIONAL_BID and REGIONAL_ASK are provided for convenience of a consolidated order book and are automatically generated based on the corresponding Quote events. Aggregate sources AGGREGATE_BID and AGGREGATE_ASK provide futures depth (aggregated by price level) and NASDAQ Level II (top of book for each market maker). These source cannot be directly published to via dxFeed API. IsPublishable(Type) sources DEFAULT, NTV and ISE support full range of dxFeed API features. For more details see Javadoc. Profile Profile information snapshot that contains security instrument description. It represents the most recent information that is available about the traded security on the market at any given moment of time. For more details see Javadoc. Quote Quote event is a snapshot of the best bid and ask prices, and other fields that change with each quote. It represents the most recent information that is available about the best quote on the market at any given moment of time. For more details see Javadoc. SpreadOrder Spread order event is a snapshot for a full available market depth for all spreads on a given underlying symbol. The collection of spread order events of a symbol represents the most recent information that is available about spread orders on the market at any given moment of time. Spread order is similar to a regular Order, but it has a SpreadSymbol property that contains the symbol of the actual spread that is being represented by spread order object. EventSymbol property contains the underlying symbol that was used in subscription. For more details see Javadoc. Summary Summary information snapshot about the trading session including session highs, lows, etc. It represents the most recent information that is available about the trading session in the market at any given moment of time. For more details see Javadoc. TimeAndSale Time and Sale represents a trade or other market event with price, like market open/close price, etc. Time and Sales are intended to provide information about trades in a continuous time slice (unlike Trade events which are supposed to provide snapshot about the current last trade). Time and Sale events have unique Index which can be used for later correction/cancellation processing. For more details see Javadoc. Trade Trade event is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover. It represents the most recent information that is available about the regular last trade on the market at any given moment of time. For more details see Javadoc. TradeBase Base class for common fields of Trade and TradeETH events. Trade events represent the most recent information that is available about the last trade on the market at any given moment of time. For more details see Javadoc. TradeETH TradeETH event is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover. This event is defined only for symbols (typically stocks and ETFs) with a designated extended trading hours (ETH, pre market and post market trading sessions). It represents the most recent information that is available about ETH last trade on the market at any given moment of time. For more details see Javadoc. Enums Direction Direction of the price movement. For example tick direction for last trade price. For more details see Javadoc. IcebergType Type of an iceberg order. OrderAction Action enum for the Full Order Book (FOB) Orders. Action describes business meaning of the Order event: whether order was added or replaced, partially or fully executed, etc. PriceType Type of the price value. Scope Scope of an order. ShortSaleRestriction Short sale restriction on an instrument. Side Side of an order or a trade. For more details see Javadoc. TimeAndSaleType Type of a time and sale event. For more details see Javadoc. TradingStatus Trading status of an instrument."
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Greeks.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Greeks.html",
    "title": "Class Greeks | dxFeed Graal .NET API",
    "keywords": "Class Greeks Greeks event is a snapshot of the option price, Black-Scholes volatility and greeks. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Greeks Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Options Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Greeks)] public class Greeks : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Greeks() Initializes a new instance of the Greeks class. Declaration public Greeks() | Edit this page View Source Greeks(string?) Initializes a new instance of the Greeks class with the specified event symbol. Declaration public Greeks(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source Delta Gets or sets option delta. Delta is the first derivative of an option price by an underlying price. Declaration public double Delta { get; set; } Property Value Type Description double | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source identifier for this event, which is always DEFAULT for time-series events. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Gamma Gets or sets option gamma. Gamma is the second derivative of an option price by an underlying price. Declaration public double Gamma { get; set; } Property Value Type Description double | Edit this page View Source Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source Price Gets or sets option market price. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Rho Gets or sets option rho. Rho is the first derivative of an option price by percentage interest rate. Declaration public double Rho { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Theta Gets or sets option theta. Theta is the first derivative of an option price by a number of days to expiration. Declaration public double Theta { get; set; } Property Value Type Description double | Edit this page View Source Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source Vega Gets or sets vega. Vega is the first derivative of an option price by percentage volatility. Declaration public double Vega { get; set; } Property Value Type Description double | Edit this page View Source Volatility Gets or sets Black-Scholes implied volatility of the option. Declaration public double Volatility { get; set; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns string representation of this greeks event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Series.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Series.html",
    "title": "Class Series | dxFeed Graal .NET API",
    "keywords": "Class Series Series event is a snapshot of computed values that are available for all option series for a given underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Series Implements IIndexedEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Options Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Series)] public class Series : MarketEvent, IIndexedEvent, IEventType Constructors | Edit this page View Source Series() Initializes a new instance of the Series class. Declaration public Series() | Edit this page View Source Series(string?) Initializes a new instance of the Series class with the specified event symbol. Declaration public Series(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source CallVolume Gets or sets call options traded volume for a day. Declaration public double CallVolume { get; set; } Property Value Type Description double | Edit this page View Source Dividend Gets or sets implied simple dividend return of the corresponding option series. Declaration public double Dividend { get; set; } Property Value Type Description double | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source for this event. This method always returns DEFAULT. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Expiration Gets or sets day id of expiration. Declaration public int Expiration { get; set; } Property Value Type Description int Examples DayUtil.GetDayIdByYearMonthDay(20090117) See Also GetDayIdByYearMonthDay(int) | Edit this page View Source ForwardPrice Gets or sets implied forward price for this option series. Declaration public double ForwardPrice { get; set; } Property Value Type Description double | Edit this page View Source Index Gets or sets unique per-symbol index of this event. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source Interest Gets or sets implied simple interest return of the corresponding option series. Declaration public double Interest { get; set; } Property Value Type Description double | Edit this page View Source OptionVolume Gets options traded volume for a day. Declaration public double OptionVolume { get; } Property Value Type Description double | Edit this page View Source PutCallRatio Gets or sets ratio of put options traded volume to call options traded volume for a day. Declaration public double PutCallRatio { get; set; } Property Value Type Description double | Edit this page View Source PutVolume Gets or sets put options traded volume for a day. Declaration public double PutVolume { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source TimeSequence Gets or sets time and sequence of this series packaged into single long value. This method is intended for efficient series time priority comparison. Do not use this method directly. Change Time and/or Sequence. Declaration public long TimeSequence { get; set; } Property Value Type Description long | Edit this page View Source Volatility Gets or sets implied volatility index for this series based on VIX methodology. Declaration public double Volatility { get; set; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns string representation of this series event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements IIndexedEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.TheoPrice.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.TheoPrice.html",
    "title": "Class TheoPrice | dxFeed Graal .NET API",
    "keywords": "Class TheoPrice Theo price is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation. It represents the most recent information that is available about the corresponding values at any given moment of time. The values include first and second order derivative of the price curve by price, so that the real-time theoretical option price can be estimated on real-time changes of the underlying price in the vicinity. For more details see Javadoc. Inheritance object MarketEvent TheoPrice Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Options Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.TheoPrice)] public class TheoPrice : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Constructors | Edit this page View Source TheoPrice() Initializes a new instance of the TheoPrice class. Declaration public TheoPrice() | Edit this page View Source TheoPrice(string?) Initializes a new instance of the TheoPrice class with the specified event symbol. Declaration public TheoPrice(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source Delta Gets or sets delta of the theoretical price. Delta is the first derivative of an option price by an underlying price. Declaration public double Delta { get; set; } Property Value Type Description double | Edit this page View Source Dividend Gets or sets implied simple dividend return of the corresponding option series. Declaration public double Dividend { get; set; } Property Value Type Description double | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source for this event. This method always returns DEFAULT. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Gamma Gets or sets gamma of the theoretical price. Gamma is the second derivative of an option price by an underlying price. Declaration public double Gamma { get; set; } Property Value Type Description double | Edit this page View Source Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source Interest Gets or sets implied simple interest return of the corresponding option series. Declaration public double Interest { get; set; } Property Value Type Description double | Edit this page View Source Price Gets or sets theoretical option price. Declaration public double Price { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source UnderlyingPrice Gets or sets underlying price at the time of theo price computation. Declaration public double UnderlyingPrice { get; set; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns string representation of this theo price event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.Underlying.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.Underlying.html",
    "title": "Class Underlying | dxFeed Graal .NET API",
    "keywords": "Class Underlying Underlying event is a snapshot of computed values that are available for an option underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. Inheritance object MarketEvent Underlying Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType Inherited Members MarketEvent.EventSymbol MarketEvent.EventTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Events.Options Assembly: DxFeed.Graal.Net.dll Syntax [EventCode(EventCodeNative.Underlying)] public class Underlying : MarketEvent, ITimeSeriesEvent, IIndexedEvent, ILastingEvent, IEventType Constructors | Edit this page View Source Underlying() Initializes a new instance of the Underlying class. Declaration public Underlying() | Edit this page View Source Underlying(string?) Initializes a new instance of the Underlying class with the specified event symbol. Declaration public Underlying(string? eventSymbol) Parameters Type Name Description string eventSymbol The specified event symbol. Fields | Edit this page View Source MaxSequence Maximum allowed sequence value. Sequence Declaration public const int MaxSequence = 4194303 Field Value Type Description int Properties | Edit this page View Source BackVolatility Gets or sets back month implied volatility for this underlying based on VIX methodology. Declaration public double BackVolatility { get; set; } Property Value Type Description double | Edit this page View Source CallVolume Gets or sets call options traded volume for a day. Declaration public double CallVolume { get; set; } Property Value Type Description double | Edit this page View Source EventFlags Gets or sets transactional event flags. Declaration public int EventFlags { get; set; } Property Value Type Description int | Edit this page View Source EventSource Gets a source for this event. This method always returns DEFAULT. Declaration public IndexedEventSource EventSource { get; } Property Value Type Description IndexedEventSource | Edit this page View Source Expiration Gets or sets day id of expiration. Declaration public int Expiration { get; set; } Property Value Type Description int Examples DayUtil.GetDayIdByYearMonthDay(20090117) See Also GetDayIdByYearMonthDay(int) | Edit this page View Source FrontVolatility Gets or sets front month implied volatility for this underlying based on VIX methodology. Declaration public double FrontVolatility { get; set; } Property Value Type Description double | Edit this page View Source Index Gets or sets unique per-symbol index of this event. The index is composed of Time and Sequence, invocation of this method changes time and sequence. Do not use this method directly. Change Time and/or Sequence. Declaration public long Index { get; set; } Property Value Type Description long | Edit this page View Source OptionVolume Gets options traded volume for a day. Declaration public double OptionVolume { get; } Property Value Type Description double | Edit this page View Source PutCallRatio Gets or sets ratio of put options traded volume to call options traded volume for a day. Declaration public double PutCallRatio { get; set; } Property Value Type Description double | Edit this page View Source PutVolume Gets or sets put options traded volume for a day. Declaration public double PutVolume { get; set; } Property Value Type Description double | Edit this page View Source Sequence Gets or sets sequence number of this event to distinguish events that have the same Time. This sequence number does not have to be unique and does not need to be sequential. Sequence can range from 0 to MaxSequence. Declaration public int Sequence { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If sequence out of range. | Edit this page View Source Time Gets or sets timestamp of the event in milliseconds. Time is measured in milliseconds between the current time and midnight, January 1, 1970 UTC. Declaration public long Time { get; set; } Property Value Type Description long | Edit this page View Source Volatility Gets or sets 30-day implied volatility for this underlying based on VIX methodology. Declaration public double Volatility { get; set; } Property Value Type Description double Methods | Edit this page View Source BaseFieldsToString() Returns string representation of this underlying fields. Declaration protected string BaseFieldsToString() Returns Type Description string The string representation. | Edit this page View Source ToString() Returns string representation of this underlying event. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString() Implements ITimeSeriesEvent IIndexedEvent ILastingEvent IEventType"
  },
  "docs/api/DxFeed.Graal.Net.Events.Options.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.Options.html",
    "title": "Namespace DxFeed.Graal.Net.Events.Options | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events.Options Classes Greeks Greeks event is a snapshot of the option price, Black-Scholes volatility and greeks. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. Series Series event is a snapshot of computed values that are available for all option series for a given underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc. TheoPrice Theo price is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation. It represents the most recent information that is available about the corresponding values at any given moment of time. The values include first and second order derivative of the price curve by price, so that the real-time theoretical option price can be estimated on real-time changes of the underlying price in the vicinity. For more details see Javadoc. Underlying Underlying event is a snapshot of computed values that are available for an option underlying symbol based on the option prices on the market. It represents the most recent information that is available about the corresponding values on the market at any given moment of time. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Events.html": {
    "href": "docs/api/DxFeed.Graal.Net.Events.html",
    "title": "Namespace DxFeed.Graal.Net.Events | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Events Classes EventCodeAttribute Indicates that the attributed class contains event code native. IndexedEventSource Source identifier for IIndexedEvent. For more details see Javadoc. Interfaces IEventType Marks all event types that can be received via dxFeed API. Events are considered instantaneous, non-persistent, and unconflateable (each event is individually delivered) unless they implement one of interfaces defined in this package to further refine their meaning. For more details see Javadoc. IIndexedEvent Represents an indexed collection of up-to-date information about some condition or state of an external entity that updates in real-time. For example, Order represents an order to buy or to sell some market instrument that is currently active on a market exchange and multiple orders are active for each symbol at any given moment in time. For more details see Javadoc. ILastingEvent Represents up-to-date information about some condition or state of an external entity that updates in real-time. For example, a Quote is an up-to-date information about best bid and best offer for a specific symbol. For more details see Javadoc. ITimeSeriesEvent Represents time-series snapshots of some process that is evolving in time or actual events in some external system that have an associated time stamp and can be uniquely identified. For example, TimeAndSale events represent the actual sales that happen on a market exchange at specific time moments, while Candle events represent snapshots of aggregate information about trading over a specific time period. For more details see Javadoc."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfile.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfile.html",
    "title": "Class InstrumentProfile | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfile Represents basic profile information about market instrument. Please see Instrument Profile Format documentation for complete description. Inheritance object InstrumentProfile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Ipf Assembly: DxFeed.Graal.Net.dll Syntax public class InstrumentProfile Constructors | Edit this page View Source InstrumentProfile() Initializes a new instance of the InstrumentProfile class. Declaration public InstrumentProfile() | Edit this page View Source InstrumentProfile(InstrumentProfile) Initializes a new instance of the InstrumentProfile class, creating a deep copy of the provided instrument profile. Declaration public InstrumentProfile(InstrumentProfile ip) Parameters Type Name Description InstrumentProfile ip The InstrumentProfile instance to copy. Remarks This constructor is used for creating a new instance of the InstrumentProfile class with the same properties as the given instance. It performs a deep copy, ensuring that the new instance does not share references with the original, making it safe from modifications to the original instance. Properties | Edit this page View Source AdditionalUnderlyings Gets or sets additional underlyings for options, including additional cash. It shall use following format: <VALUE> ::= <empty> | <LIST> <LIST> ::= <AU> | <AU> <semicolon> <space> <LIST> <AU> ::= <UNDERLYING> <space> <SPC> the list shall be sorted by <UNDERLYING>. Declaration public string AdditionalUnderlyings { get; set; } Property Value Type Description string Examples \"SE 50\", \"FIS 53; US$ 45.46\". | Edit this page View Source BaseCurrency Gets or sets base currency of currency pair (FOREX instruments). It shall use three-letter currency code similarly to Currency. Declaration public string BaseCurrency { get; set; } Property Value Type Description string | Edit this page View Source CFI Gets or sets classification of Financial Instruments code. It is a mandatory field for OPTION instruments as it is the only way to distinguish Call/Put type, American/European exercise, Cash/Physical delivery. It shall use six-letter CFI code from ISO 10962 standard. It is allowed to use 'X' extensively and to omit trailing letters (assumed to be 'X'). See ISO 10962 on Wikipedia. Declaration public string CFI { get; set; } Property Value Type Description string Examples \"ESNTPB\", \"ESXXXX\", \"ES\", \"OPASPS\". | Edit this page View Source CUSIP Gets or sets committee on Uniform Security Identification Procedures code. It shall use nine-letter code assigned by CUSIP Services Bureau. See CUSIP on Wikipedia. Declaration public string CUSIP { get; set; } Property Value Type Description string Examples \"38259P508\". | Edit this page View Source Country Gets or sets country of origin (incorporation) of corresponding company or parent entity. It shall use two-letter country code from ISO 3166-1 standard. See ISO 3166-1 on Wikipedia. Declaration public string Country { get; set; } Property Value Type Description string Examples \"US\", \"RU\". | Edit this page View Source Currency Gets or sets currency of quotation, pricing and trading. It shall use three-letter currency code from ISO 4217 standard. See ISO 4217 on Wikipedia. Declaration public string Currency { get; set; } Property Value Type Description string Examples \"USD\", \"RUB\". | Edit this page View Source Description Gets or sets description of instrument, preferable an international one in Latin alphabet. Declaration public string Description { get; set; } Property Value Type Description string Examples \"Google Inc.\", \"Mini Gold Futures,Jun-2009,ETH\". | Edit this page View Source ExchangeData Gets or sets exchange-specific data required to properly identify instrument when communicating with exchange. It uses exchange-specific format. Declaration public string ExchangeData { get; set; } Property Value Type Description string | Edit this page View Source Exchanges Gets or sets list of exchanges where instrument is quoted or traded. Its shall use the following format: <VALUE> ::= <empty> | <LIST> <IST> ::= <MIC> | <MIC> <semicolon> <LIST> the list shall be sorted by MIC. Declaration public string Exchanges { get; set; } Property Value Type Description string Examples \"ARCX;CBSX ;XNAS;XNYS\". | Edit this page View Source Expiration Gets or sets day id of expiration. Declaration public int Expiration { get; set; } Property Value Type Description int Examples DayUtil.GetYearMonthDayByDayId(20090117). | Edit this page View Source ExpirationStyle Gets or sets expiration cycle style, such as \"Weeklys\", \"Quarterlys\". Declaration public string ExpirationStyle { get; set; } Property Value Type Description string | Edit this page View Source ICB Gets or sets industry Classification Benchmark. It shall use four-digit number from ICB catalog. See ICB on Wikipedia or ICB homepage. Declaration public int ICB { get; set; } Property Value Type Description int Examples \"9535\". | Edit this page View Source ISIN Gets or sets international Securities Identifying Number. It shall use twelve-letter code from ISO 6166 standard. See ISO 6166 on Wikipedia or ISIN on Wikipedia. Declaration public string ISIN { get; set; } Property Value Type Description string Examples \"DE0007100000\", \"US38259P5089\". | Edit this page View Source LastTrade Gets or sets day id of last trading day. Declaration public int LastTrade { get; set; } Property Value Type Description int Examples DayUtil.GetYearMonthDayByDayId(20090117). | Edit this page View Source LocalDescription Gets or sets description of instrument in national language. It shall be empty if same as Description. Declaration public string LocalDescription { get; set; } Property Value Type Description string | Edit this page View Source LocalSymbol Gets or sets identifier of instrument in national language. It shall be empty if same as Symbol. Declaration public string LocalSymbol { get; set; } Property Value Type Description string | Edit this page View Source MMY Gets or sets maturity month-year as provided for corresponding FIX tag (200). It can use several different formats depending on data source. YYYYMM – if only year and month are specified YYYYMMDD – if full date is specified YYYYMMwN – if week number (within a month) is specified Declaration public string MMY { get; set; } Property Value Type Description string | Edit this page View Source Multiplier Gets or sets market value multiplier. Declaration public double Multiplier { get; set; } Property Value Type Description double Examples \"100\", \"33.2\". | Edit this page View Source OPOL Gets or sets official Place Of Listing, the organization that have listed this instrument. Instruments with multiple listings shall use separate profiles for each listing. It shall use Market Identifier Code (MIC) from ISO 10383 standard. See ISO 10383 on Wikipedia or MIC homepage. Declaration public string OPOL { get; set; } Property Value Type Description string Examples \"XNAS\", \"RTSX\". | Edit this page View Source OptionType Gets or sets type of option. It shall use one of following values. STAN = Standard Options LEAP = Long-term Equity AnticiPation Securities SDO = Special Dated Options BINY = Binary Options FLEX = FLexible EXchange Options VSO = Variable Start Options RNGE = Range Declaration public string OptionType { get; set; } Property Value Type Description string | Edit this page View Source PriceIncrements Gets or sets minimum allowed price increments with corresponding price ranges. It shall use following format: <VALUE> ::= <empty> | <LIST> <LIST> ::= <INCREMENT> | <RANGE> <semicolon> <space> <LIST> <RANGE> ::= <INCREMENT> <space> <UPPER_LIMIT> the list shall be sorted by <UPPER_LIMIT>. Declaration public string PriceIncrements { get; set; } Property Value Type Description string | Edit this page View Source Product Gets or sets product for futures and options on futures (underlying asset name). Declaration public string Product { get; set; } Property Value Type Description string Examples \"/YG\". | Edit this page View Source SEDOL Gets or sets stock Exchange Daily Official List. It shall use seven-letter code assigned by London Stock Exchange. See SEDOL on Wikipedia or SEDOL on LSE. Declaration public string SEDOL { get; set; } Property Value Type Description string Examples \"2310967\", \"5766857\". | Edit this page View Source SIC Gets or sets standard Industrial Classification. It shall use four-digit number from SIC catalog. See SIC on Wikipedia or SIC structure. Declaration public int SIC { get; set; } Property Value Type Description int Examples \"7371\". | Edit this page View Source SPC Gets or sets shares per contract for options. Declaration public double SPC { get; set; } Property Value Type Description double Examples \"1\", \"100\". | Edit this page View Source SettlementStyle Gets or sets settlement price determination style, such as \"Open\", \"Close\". Declaration public string SettlementStyle { get; set; } Property Value Type Description string | Edit this page View Source Strike Gets or sets strike price for options. Declaration public double Strike { get; set; } Property Value Type Description double Examples \"80\", \"22.5\". | Edit this page View Source Symbol Gets or sets identifier of instrument, preferable an international one in Latin alphabet. It is a mandatory field. It may not be empty. Declaration public string Symbol { get; set; } Property Value Type Description string Examples \"GOOG\", \"/YGM9\", \".ZYEAD\". | Edit this page View Source TradingHours Gets or sets trading hours specification. Declaration public string TradingHours { get; set; } Property Value Type Description string | Edit this page View Source Type Gets or sets type of instrument. It takes precedence in conflict cases with other fields. It is a mandatory field. It may not be empty. Declaration public string Type { get; set; } Property Value Type Description string Examples \"STOCK\", \"FUTURE\", \"OPTION\". | Edit this page View Source Underlying Gets or sets primary underlying symbol for options. Declaration public string Underlying { get; set; } Property Value Type Description string Examples \"C\", \"/YGM9\". Methods | Edit this page View Source ToString() Returns a string representation of the instrument profile. Declaration public override string ToString() Returns Type Description string The string representation. Overrides object.ToString()"
  },
  "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileReader.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.InstrumentProfileReader.html",
    "title": "Class InstrumentProfileReader | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileReader Reads instrument profiles from the stream using Instrument Profile Format (IPF). Please see Instrument Profile Format documentation for complete description. This reader automatically uses data formats as specified in the stream. This reader is intended for \"one time only\" usage: create new instances for new IPF reads. Inheritance object InstrumentProfileReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Ipf Assembly: DxFeed.Graal.Net.dll Syntax public class InstrumentProfileReader Methods | Edit this page View Source GetLastModified() Returns last modification time (in milliseconds) from last ReadFromFile(string) operation or zero if it is unknown. Declaration public long GetLastModified() Returns Type Description long The last modification time. | Edit this page View Source ReadFromFile(string) Reads and returns instrument profiles from specified file. This method recognizes data compression formats \"zip\" and \"gzip\" automatically. In case of zip the first file entry will be read and parsed as a plain data stream. In case of gzip compressed content will be read and processed. In other cases data considered uncompressed and will be parsed as is. Authentication information can be supplied to this method as part of URL user info like \"http://user:password@host:port/path/file.ipf\". This operation updates GetLastModified() and WasComplete(). Declaration public List<InstrumentProfile> ReadFromFile(string address) Parameters Type Name Description string address The URL of file to read from. Returns Type Description List<InstrumentProfile> The list of instrument profiles. | Edit this page View Source ReadFromFile(string, string?, string?) Declaration public List<InstrumentProfile> ReadFromFile(string address, string? user, string? password) Parameters Type Name Description string address string user string password Returns Type Description List<InstrumentProfile> | Edit this page View Source WasComplete() Returns {@code true} if IPF was fully read on last ReadFromFile(string) operation. Declaration public bool WasComplete() Returns Type Description bool true if IPF was fully read; otherwise, false."
  },
  "docs/api/DxFeed.Graal.Net.Ipf.html": {
    "href": "docs/api/DxFeed.Graal.Net.Ipf.html",
    "title": "Namespace DxFeed.Graal.Net.Ipf | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Ipf Classes InstrumentProfile Represents basic profile information about market instrument. Please see Instrument Profile Format documentation for complete description. InstrumentProfileReader Reads instrument profiles from the stream using Instrument Profile Format (IPF). Please see Instrument Profile Format documentation for complete description. This reader automatically uses data formats as specified in the stream. This reader is intended for \"one time only\" usage: create new instances for new IPF reads."
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalErrorCode.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalErrorCode.html",
    "title": "Enum GraalErrorCode | dxFeed Graal .NET API",
    "keywords": "Enum GraalErrorCode List of graal error codes. The error description was obtained from github. Graal GitHub. Namespace: DxFeed.Graal.Net.Native.ErrorHandling Assembly: DxFeed.Graal.Net.dll Syntax public enum GraalErrorCode Fields Name Description ArgumentParsingFailed AuxImagePrimaryImageMismatch AuxImageUnsupported CpuFeatureCheckFailed FreeAddressSpaceFailed FreeImageHeapFailed InsufficientAddressSpace InsufficientAuxImageMemory IsolateInitializationFailed LocateImageFailed MapAuxImageFailed MapHeapFailed NoError NullArgument OpenAuxImageFailed OpenImageFailed ProtectHeapFailed ReadAuxImageMetaFailed ReserveAddressSpaceFailed ThreadingInitializationFailed UnattachedThread UncaughtException UninitializedIsolate Unspecified UnsupportedIsolateParametersVersion"
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalException.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.GraalException.html",
    "title": "Class GraalException | dxFeed Graal .NET API",
    "keywords": "Class GraalException Represents errors that occur when calling graal function. Inheritance object Exception GraalException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Native.ErrorHandling Assembly: DxFeed.Graal.Net.dll Syntax [Serializable] public sealed class GraalException : Exception, ISerializable Constructors | Edit this page View Source GraalException(GraalErrorCode) Initializes a new instance of the GraalException class. Declaration public GraalException(GraalErrorCode errorCode) Parameters Type Name Description GraalErrorCode errorCode The graal error code. Properties | Edit this page View Source ErrorCode Gets graal error code. Declaration public GraalErrorCode ErrorCode { get; } Property Value Type Description GraalErrorCode | Edit this page View Source GraalMessage Gets graal error message. Declaration public string? GraalMessage { get; } Property Value Type Description string | Edit this page View Source Message Gets a message that describes the current exception. Declaration public override string Message { get; } Property Value Type Description string The error message that explains the reason for the exception. Overrides Exception.Message Implements ISerializable"
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.JavaException.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.JavaException.html",
    "title": "Class JavaException | dxFeed Graal .NET API",
    "keywords": "Class JavaException Represents errors that occur inside Java code. Inheritance object Exception JavaException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: DxFeed.Graal.Net.Native.ErrorHandling Assembly: DxFeed.Graal.Net.dll Syntax [Serializable] public sealed class JavaException : Exception, ISerializable Constructors | Edit this page View Source JavaException(string?, string?, string?) Initializes a new instance of the JavaException class. Declaration public JavaException(string? javaClassName, string? javaMessage, string? javaStackTrace) Parameters Type Name Description string javaClassName The Java exception class name. string javaMessage The Java exception message. string javaStackTrace The Java stack trace. Properties | Edit this page View Source JavaClassName Gets Java exception class name. Declaration public string? JavaClassName { get; } Property Value Type Description string | Edit this page View Source JavaMessage Gets Java exception message. Declaration public string? JavaMessage { get; } Property Value Type Description string | Edit this page View Source JavaStackTrace Gets Java stack trace. Declaration public string? JavaStackTrace { get; } Property Value Type Description string | Edit this page View Source Message Gets a message that describes the current exception. Declaration public override string Message { get; } Property Value Type Description string The error message that explains the reason for the exception. Overrides Exception.Message Implements ISerializable"
  },
  "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.ErrorHandling.html",
    "title": "Namespace DxFeed.Graal.Net.Native.ErrorHandling | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Native.ErrorHandling Classes GraalException Represents errors that occur when calling graal function. JavaException Represents errors that occur inside Java code. Enums GraalErrorCode List of graal error codes. The error description was obtained from github. Graal GitHub."
  },
  "docs/api/DxFeed.Graal.Net.Native.Events.EventCodeNative.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Events.EventCodeNative.html",
    "title": "Enum EventCodeNative | dxFeed Graal .NET API",
    "keywords": "Enum EventCodeNative A list of all events, that can be passed to/from native code, represented as a numeric code. In a particular case, these are implementations IEventType. Namespace: DxFeed.Graal.Net.Native.Events Assembly: DxFeed.Graal.Net.dll Syntax public enum EventCodeNative Fields Name Description AnalyticOrder AnalyticOrder. Candle Candle. Configuration Not implemented. DailyCandle Deprecated. Doesn't need to be implemented. Greeks Greeks. Message Not implemented. OptionSale OptionSale. Order Order. OrderBase OrderBase. Doesn't need to be implemented. Abstract class. Profile Profile. Quote Quote. Series Series. SpreadOrder SpreadOrder. Summary Summary. TheoPrice TheoPrice. TimeAndSale TimeAndSale. Trade Trade. TradeETH TradeETH. Underlying Underlying."
  },
  "docs/api/DxFeed.Graal.Net.Native.Events.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Events.html",
    "title": "Namespace DxFeed.Graal.Net.Native.Events | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Native.Events Enums EventCodeNative A list of all events, that can be passed to/from native code, represented as a numeric code. In a particular case, these are implementations IEventType."
  },
  "docs/api/DxFeed.Graal.Net.Native.Ipf.InstrumentProfileReaderNative.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Ipf.InstrumentProfileReaderNative.html",
    "title": "Class InstrumentProfileReaderNative | dxFeed Graal .NET API",
    "keywords": "Class InstrumentProfileReaderNative Inheritance object InstrumentProfileReaderNative Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Native.Ipf Assembly: DxFeed.Graal.Net.dll Syntax public class InstrumentProfileReaderNative : IDisposable Methods | Edit this page View Source Create() Declaration public static InstrumentProfileReaderNative Create() Returns Type Description InstrumentProfileReaderNative | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source GetLastModified() Declaration public long GetLastModified() Returns Type Description long | Edit this page View Source ReadFromFile(string, string, string) Declaration public List<InstrumentProfile> ReadFromFile(string address, string user, string password) Parameters Type Name Description string address string user string password Returns Type Description List<InstrumentProfile> | Edit this page View Source WasComplete() Declaration public bool WasComplete() Returns Type Description bool Implements IDisposable"
  },
  "docs/api/DxFeed.Graal.Net.Native.Ipf.html": {
    "href": "docs/api/DxFeed.Graal.Net.Native.Ipf.html",
    "title": "Namespace DxFeed.Graal.Net.Native.Ipf | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Native.Ipf Classes InstrumentProfileReaderNative"
  },
  "docs/api/DxFeed.Graal.Net.SystemProperty.html": {
    "href": "docs/api/DxFeed.Graal.Net.SystemProperty.html",
    "title": "Class SystemProperty | dxFeed Graal .NET API",
    "keywords": "Class SystemProperty Native wrapper over the Java java.lang.System class, contains work with property getter/setter methods. In Java world, these properties can be set by passing the \"-Dprop=value\" argument in command line or calls java.lang.System.setProperty(String key, String value). The location of the imported functions is in the header files \"dxfg_system.h\". Inheritance object SystemProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net Assembly: DxFeed.Graal.Net.dll Syntax public static class SystemProperty Examples -Ddxfeed.address=\"demo.dxfeed.com:7400\". Methods | Edit this page View Source GetProperty(string) Gets the system property indicated by the specified key. Declaration public static string? GetProperty(string key) Parameters Type Name Description string key The name of the system property. Returns Type Description string The string value of the system property, or null if there is no property with that key. | Edit this page View Source SetProperties(IReadOnlyDictionary<string, string>) Sets the system properties from the provided key-value collection. Declaration public static void SetProperties(IReadOnlyDictionary<string, string> properties) Parameters Type Name Description IReadOnlyDictionary<string, string> properties The key-value collection. | Edit this page View Source SetProperty(string, string) Sets the system property indicated by the specified key. Declaration public static void SetProperty(string key, string value) Parameters Type Name Description string key The name of the system property. string value The value of the system property."
  },
  "docs/api/DxFeed.Graal.Net.Utils.AttributeUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.AttributeUtil.html",
    "title": "Class AttributeUtil | dxFeed Graal .NET API",
    "keywords": "Class AttributeUtil Provides utility methods for manipulating an Attribute. Inheritance object AttributeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class AttributeUtil Methods | Edit this page View Source GetCustomAttribute<T>(Type) Generic version of GetCustomAttribute(Assembly, Type). Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for. Doesn't look up the element's ancestors for custom attributes. Declaration public static T? GetCustomAttribute<T>(Type member) where T : Attribute Parameters Type Name Description Type member An object derived from the Type class that describes a constructor, event, field, method, or property member of a class. Returns Type Description T A reference to the single custom attribute of type T that is applied to element, or null if there is no such attribute. Type Parameters Name Description T The type, or a base type, of the custom attribute to search for."
  },
  "docs/api/DxFeed.Graal.Net.Utils.BitUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.BitUtil.html",
    "title": "Class BitUtil | dxFeed Graal .NET API",
    "keywords": "Class BitUtil A collection of utility methods for bitwise operations. Porting Java class com.dxfeed.event.market.Util. Inheritance object BitUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class BitUtil Methods | Edit this page View Source GetBits(int, int, int) Extracts bits from the specified value. Declaration public static int GetBits(int value, int mask, int shift) Parameters Type Name Description int value The specified value. int mask The bit mask. int shift The bit shift. Returns Type Description int The extracted bits. | Edit this page View Source SetBits(int, int, int, int) Sets bits to the specified value. Declaration public static int SetBits(int value, int mask, int shift, int bits) Parameters Type Name Description int value The specified value. int mask The bit mask. int shift The bit shift. int bits The bits set. Returns Type Description int Returns a value with bits set."
  },
  "docs/api/DxFeed.Graal.Net.Utils.CmdArgsUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.CmdArgsUtil.html",
    "title": "Class CmdArgsUtil | dxFeed Graal .NET API",
    "keywords": "Class CmdArgsUtil A collection of static helper methods for parses command-line arguments. Inheritance object CmdArgsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class CmdArgsUtil Methods | Edit this page View Source ParseFromTime(string) Converts the specified string representation of a date and time to its DateTimeOffset in current TimeZoneInfo and InvariantCulture. If no time zone is specified in the parsed string, the string is assumed to denote a local time, and converted to current TimeZoneInfo. It accepts the following formats. 0 is parsed as zero time in UTC. <long-value-in-milliseconds> The value in milliseconds since Unix epoch since Unix epoch. It should be positive and have at least 9 digits (otherwise it could not be distinguished from date in format 'yyyymmdd' ). Each date since 1970-01-03 can be represented in this form. <date>[<time>][<timezone>] If time is missing it is supposed to be '00:00:00' . <date> is one of: yyyy-MM-dd yyyyMMdd <time> is one of: HH:mm:ss[.sss] HHmmss[.sss] <timezone> is one of: [+-]HH:mm [+-]HHmm Z for UTC. Declaration public static DateTimeOffset ParseFromTime(string fromTime) Parameters Type Name Description string fromTime Returns Type Description DateTimeOffset Returns DateTimeOffset parsed from input value. Exceptions Type Condition ArgumentException If input value has wrong format. | Edit this page View Source ParseProperties(string) Parses the input collection of strings and returns a collection of key-value properties. The input strings should look like comma-separated: \"key=value\". Declaration public static IReadOnlyDictionary<string, string> ParseProperties(string properties) Parameters Type Name Description string properties The input comma-separated key-value pairs. Returns Type Description IReadOnlyDictionary<string, string> Returns collection of key-value properties. Exceptions Type Condition ArgumentException If string has wrong format. | Edit this page View Source ParseSymbols(string) Parses an input string and returns a set of symbols. Declaration public static IEnumerable<string> ParseSymbols(string symbols) Parameters Type Name Description string symbols The coma-separated list of symbols. Returns Type Description IEnumerable<string> Returns created a set of parsed symbols. | Edit this page View Source ParseTypes(string) Parses an input string and returns a set of event types. Declaration public static IEnumerable<Type> ParseTypes(string types) Parameters Type Name Description string types The coma-separated list of event types. Returns Type Description IEnumerable<Type> Returns a set of parsed types. Exceptions Type Condition ArgumentException If the passed type is not available."
  },
  "docs/api/DxFeed.Graal.Net.Utils.ConcurrentSet-1.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.ConcurrentSet-1.html",
    "title": "Class ConcurrentSet<T> | dxFeed Graal .NET API",
    "keywords": "Class ConcurrentSet<T> This is a simple wrapper over ConcurrentDictionary<TKey, TValue>, to provide an interface as a Set (.NET does not provide a built-in concurrent hashset type) for more consistent. Inheritance object ConcurrentSet<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public class ConcurrentSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : notnull Type Parameters Name Description T The type of elements in the set. Constructors | Edit this page View Source ConcurrentSet() Initializes a new instance of the ConcurrentSet<T> class. Declaration public ConcurrentSet() Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. Methods | Edit this page View Source Add(T) Adds the specified element to a set. Declaration public bool Add(T item) Parameters Type Name Description T item The element to add to the set. Returns Type Description bool true if the element is added to the ConcurrentSet<T> object; false if the element is already present. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(T) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. Implements ICollection<T> IEnumerable<T> IEnumerable"
  },
  "docs/api/DxFeed.Graal.Net.Utils.DayUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.DayUtil.html",
    "title": "Class DayUtil | dxFeed Graal .NET API",
    "keywords": "Class DayUtil A collection of static utility methods for manipulation of int day id, that is the number of days since Unix epoch of January 1, 1970. Porting Java class com.devexperts.util.DayUtil. Inheritance object DayUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class DayUtil Methods | Edit this page View Source GetDayIdByYearMonthDay(int) Returns day identifier for specified yyyymmdd integer in Gregorian calendar. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. The yyyymmdd integer is equal to yearSign * (abs(year) * 10000 + month * 100 + day), where year, month, and day are in Gregorian calendar, month is between 1 and 12 inclusive, and day is counted from 1. Declaration public static int GetDayIdByYearMonthDay(int yyyymmdd) Parameters Type Name Description int yyyymmdd The yyyymmdd integer in Gregorian calendar. Returns Type Description int The day id. Examples DayUtil.GetDayIdByYearMonthDay(19691231) == -1 DayUtil.GetDayIdByYearMonthDay(19700101) == 0 DayUtil.GetDayIdByYearMonthDay(19700102) == 1 See Also GetDayIdByYearMonthDay(int, int, int) | Edit this page View Source GetDayIdByYearMonthDay(int, int, int) Returns day identifier for specified year, month and day in Gregorian calendar. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. Month must be between 1 and 12 inclusive. Year and day might take arbitrary values assuming proleptic Gregorian calendar. The value returned by this method for an arbitrary day value always satisfies the following equality: GetDayIdByYearMonthDay(year, month, day) == GetDayIdByYearMonthDay(year, month, 0) + day Declaration public static int GetDayIdByYearMonthDay(int year, int month, int day) Parameters Type Name Description int year The year. int month The month between 1 and 12 inclusive. int day The dat. Returns Type Description int The day id. Exceptions Type Condition ArgumentException f the month is less than 1 or greater than 12. | Edit this page View Source GetYearMonthDayByDayId(int) Gets yyyymmdd integer in Gregorian calendar for a specified day identifier. The day identifier is defined as the number of days since Unix epoch of January 1, 1970. The result is equal to: yearSign * (abs(year) * 10000 + month * 100 + day) where year, month, and day are in Gregorian calendar, month is between 1 and 12 inclusive, and day is counted from 1. Declaration public static int GetYearMonthDayByDayId(int dayId) Parameters Type Name Description int dayId A number of whole days since Unix epoch of January 1, 1970. Returns Type Description int The yyyymmdd integer in Gregorian calendar. Examples DayUtil.GetYearMonthDayByDayId(-1) == 19691231 DayUtil.GetYearMonthDayByDayId(0) == 19700101 DayUtil.GetYearMonthDayByDayId(1) == 19700102"
  },
  "docs/api/DxFeed.Graal.Net.Utils.EnumUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.EnumUtil.html",
    "title": "Class EnumUtil | dxFeed Graal .NET API",
    "keywords": "Class EnumUtil Provides utility methods for manipulating Enum. Inheritance object EnumUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class EnumUtil Methods | Edit this page View Source CreateEnumArrayByValue<T>(T, int) Creates an array containing elements of the specified enum type T, of the specified length. If the length is greater than the number of enum values, the remaining elements are filled with a default value, otherwise array are truncated. Declaration public static T[] CreateEnumArrayByValue<T>(T defaultValue, int length) where T : Enum Parameters Type Name Description T defaultValue The default value that will fill the elements of an array if its size is greater than the number of enum values. int length The length of result array. Returns Type Description T[] The created array. Type Parameters Name Description T The specified enum type. Remarks The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). Exceptions Type Condition ArgumentException If length is less than zero. | Edit this page View Source CreateEnumBitMaskArrayByValue<T>(T) Creates an array containing elements of the specified enum type T, where the length of the array is rounded to the nearest power of two, which is greater than or equal to the number of enum values. If the calculated length is greater than the number of enum values, the remaining elements are filled with a default value. The idea is to quickly convert an int value to an enum value, simply by array index. But the size of the array is limited by a bit mask, so if the number of enum values is not a multiple of a power of two, you need to expand the array and fill in new elements with a default value. Declaration public static T[] CreateEnumBitMaskArrayByValue<T>(T defaultValue) where T : struct, Enum Parameters Type Name Description T defaultValue The default value that will fill the elements of an array if its size is greater than the number of enum values. Returns Type Description T[] The created array. Type Parameters Name Description T The specified enum type. Remarks The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). See Also CreateEnumArrayByValue<T>(T, int) | Edit this page View Source GetCountValues<T>() Gets the number of values for the specified enum type. Declaration public static int GetCountValues<T>() where T : struct, Enum Returns Type Description int Returns the number of values of the specified enum type. Type Parameters Name Description T The specified enum type. | Edit this page View Source ValueOf<T>(T) Returns an enum constant of the specified enum type with the specified value, or throws ArgumentException if the specified enum type does not have a constant with the specified value. Declaration public static T ValueOf<T>(T value) where T : struct, Enum Parameters Type Name Description T value The specified value. Returns Type Description T An enum constant of the specified enum type with the specified value. Type Parameters Name Description T The specified enum type. Exceptions Type Condition ArgumentException If the specified enum type does not have a constant with the specified value. | Edit this page View Source ValueOf<T>(T, T) Returns an enum constant of the specified enum type with the specified value, or a default value if the specified enum type does not have a constant with the specified value. Declaration public static T ValueOf<T>(T value, T defaultValue) where T : struct, Enum Parameters Type Name Description T value The specified value. T defaultValue The default enum value. Returns Type Description T The enum constant of the specified enum type with the specified value or default value, if specified enum type has no constant with the specified value. Type Parameters Name Description T The specified enum type."
  },
  "docs/api/DxFeed.Graal.Net.Utils.MathUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.MathUtil.html",
    "title": "Class MathUtil | dxFeed Graal .NET API",
    "keywords": "Class MathUtil A collection of static utility methods for mathematics. Porting Java class java.lang.Math and com.devexperts.util.MathUtil. Inheritance object MathUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class MathUtil Methods | Edit this page View Source Abs(int) Method like a Abs(int), but not throws OverflowException exception, when argument the argument is equal to the value of MinValue. Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of MinValue, the most negative representable int value, the result is that same value, which is negative. Declaration public static int Abs(int a) Parameters Type Name Description int a The argument whose absolute value is to be determined. Returns Type Description int The absolute value of the argument. | Edit this page View Source Div(int, int) Returns quotient according to number theory - i.e. when remainder is zero or positive. Declaration public static int Div(int a, int b) Parameters Type Name Description int a The dividend. int b The divisor. Returns Type Description int The quotient according to number theory. | Edit this page View Source FloorDiv(long, long) Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the long.MinValue and the divisor is -1, then integer overflow occurs and the result is equal to the long.MinValue. Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results than truncation when the exact result is negative. Declaration public static long FloorDiv(long x, long y) Parameters Type Name Description long x The dividend. long y The divisor. Returns Type Description long The largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. | Edit this page View Source FloorMod(long, long) Returns the floor modulus of the int arguments. Declaration public static long FloorMod(long x, long y) Parameters Type Name Description long x The dividend. long y The divisor. Returns Type Description long The floor modulus: x - (FloorDiv(x, y) * y) | Edit this page View Source IsNegativeZero(double) Checks if the specified number is a -0.0 (negative zero). Declaration public static bool IsNegativeZero(double x) Parameters Type Name Description double x The specified number. Returns Type Description bool Returns true if x is equals -0.0. | Edit this page View Source IsPowerOfTwo(long) Checks if the specified number is a power of two. Declaration public static bool IsPowerOfTwo(long x) Parameters Type Name Description long x The specified number. Returns Type Description bool Returns true if x represents a power of two."
  },
  "docs/api/DxFeed.Graal.Net.Utils.PlatformUtils.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.PlatformUtils.html",
    "title": "Class PlatformUtils | dxFeed Graal .NET API",
    "keywords": "Class PlatformUtils Provides information to identify the current platform. Inheritance object PlatformUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class PlatformUtils Fields | Edit this page View Source IsAppleSilicon Indicates whether the current application is running on Apple Silicon SoC. Declaration public static readonly bool IsAppleSilicon Field Value Type Description bool | Edit this page View Source IsLinux Indicates whether the current application is running on Linux. Declaration public static readonly bool IsLinux Field Value Type Description bool | Edit this page View Source IsMacOs Indicates whether the current application is running on macOS. Declaration public static readonly bool IsMacOs Field Value Type Description bool | Edit this page View Source IsMono Indicates whether the current application is running on Mono .NET Runtime. Declaration public static readonly bool IsMono Field Value Type Description bool | Edit this page View Source IsWindows Indicates whether the current application is running on Windows. Declaration public static readonly bool IsWindows Field Value Type Description bool | Edit this page View Source LogicalCoreCount Gets the number of logical processors on the machine. If the process is running with CPU affinity, the number of processors that the process is affinitized to. If the process is running with a CPU utilization limit, the CPU utilization limit rounded up to the next whole number. Declaration public static readonly int LogicalCoreCount Field Value Type Description int | Edit this page View Source OsArch Gets the platform architecture on which the current app is running. The returned value is intended to represent the actual architecture of the underlying operating system. It is a best effort to ignore the architecture emulation infrastructure that may be involved to run the process. The returned value takes into account emulation built into Windows and macOS operating systems. The returned value does not take into account emulation using QEMU that is typically used on Linux operating system. Declaration public static readonly Architecture OsArch Field Value Type Description Architecture | Edit this page View Source OsNameAndVersion Gets os name and version. Declaration public static readonly string OsNameAndVersion Field Value Type Description string | Edit this page View Source PlatformDiagInfo Gets string contains the name and version of the OS, architecture, number of cores. Used for debugging and logging purposes. Declaration public static readonly string PlatformDiagInfo Field Value Type Description string"
  },
  "docs/api/DxFeed.Graal.Net.Utils.ReflectionUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.ReflectionUtil.html",
    "title": "Class ReflectionUtil | dxFeed Graal .NET API",
    "keywords": "Class ReflectionUtil Simple utility class for working with the reflection API. Used to manipulate types. Inheritance object ReflectionUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class ReflectionUtil Methods | Edit this page View Source CreateTypesDictionary(IEnumerable<Type>) Creates a dictionary from specified types where the key is the type name and value is the type. Declaration public static IDictionary<string, Type> CreateTypesDictionary(IEnumerable<Type> types) Parameters Type Name Description IEnumerable<Type> types The specified types. Returns Type Description IDictionary<string, Type> Returns dictionary with inherited types. | Edit this page View Source CreateTypesString(IDictionary<string, Type>) Creates a coma-separated string with types names from types dictionary. Declaration public static string CreateTypesString(IDictionary<string, Type> types) Parameters Type Name Description IDictionary<string, Type> types The specified types. Returns Type Description string Returns comma-separated string with inherited types. | Edit this page View Source CreateTypesString(IEnumerable<Type>) Creates a coma-separated string with types names from types enumerable. Declaration public static string CreateTypesString(IEnumerable<Type> types) Parameters Type Name Description IEnumerable<Type> types The specified types. Returns Type Description string Returns comma-separated string with inherited types. | Edit this page View Source GetInheritedTypes(Type) Gets all inherited types form the specified type. Abstract classes and interfaces ignored. Declaration public static IEnumerable<Type> GetInheritedTypes(Type type) Parameters Type Name Description Type type The specified type. Returns Type Description IEnumerable<Type> Returns enumerable with inherited types. Exceptions Type Condition NullReferenceException If cannot find specified type. | Edit this page View Source GetInheritedTypesDictionary(Type) Gets all inherited types form the specified type, and creates a dictionary where the key is the type name and value is the type. Abstract classes and interfaces ignored. Declaration public static IDictionary<string, Type> GetInheritedTypesDictionary(Type type) Parameters Type Name Description Type type The specified type. Returns Type Description IDictionary<string, Type> Returns dictionary with inherited types. Exceptions Type Condition NullReferenceException If cannot find specified type. | Edit this page View Source GetInheritedTypesString(Type) Gets all inherited types form the specified type, and creates a coma-separated string with types names. Abstract classes and interfaces ignored. Declaration public static string GetInheritedTypesString(Type type) Parameters Type Name Description Type type The specified type. Returns Type Description string Returns comma-separated string with inherited types. Exceptions Type Condition NullReferenceException If cannot find specified type."
  },
  "docs/api/DxFeed.Graal.Net.Utils.StringUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.StringUtil.html",
    "title": "Class StringUtil | dxFeed Graal .NET API",
    "keywords": "Class StringUtil Provides utility methods for working with strings. Inheritance object StringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class StringUtil Methods | Edit this page View Source CheckChar(char, int, string) Check that the specified char fits in the bit mask. Declaration public static void CheckChar(char c, int mask, string name) Parameters Type Name Description char c The char. int mask The bit mask. string name The char name. Used in the exception message. Exceptions Type Condition ArgumentException If the specified char dont fits in the mask. | Edit this page View Source EncodeChar(char) Encodes char to string. If the value of char falls within the range of printable ASCII characters [32-126], then returns a string containing that character, otherwise return unicode number \"(\\uffff)\". For zero char returns \"\\0\". Declaration public static string EncodeChar(char c) Parameters Type Name Description char c The char. Returns Type Description string Returns the encoded string. | Edit this page View Source EncodeNullableString(string?) Encodes specified nullable string. If string equals null, returns \"null\" string; otherwise returns specified string. Declaration public static string EncodeNullableString(string? s) Parameters Type Name Description string s The specified string. Returns Type Description string Return specified string or \"null\" string."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeFormat.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeFormat.html",
    "title": "Class TimeFormat | dxFeed Graal .NET API",
    "keywords": "Class TimeFormat Utility class for parsing and formatting dates and times in ISO-compatible format. Inheritance object TimeFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public class TimeFormat Properties | Edit this page View Source Local Gets instance TimeFormat with TimeZoneInfo.Local. Declaration public static TimeFormat Local { get; } Property Value Type Description TimeFormat | Edit this page View Source Utc Gets instance TimeFormat with TimeZoneInfo.Utc. Declaration public static TimeFormat Utc { get; } Property Value Type Description TimeFormat Methods | Edit this page View Source AsFullIso() Sets the current format as Full Iso. Declaration public TimeFormat AsFullIso() Returns Type Description TimeFormat Returns TimeFormat. Examples 1970-01-01T00:00:00.0000000+00:00. | Edit this page View Source AsOnlyDate() Sets the current format as Only Date. Declaration public TimeFormat AsOnlyDate() Returns Type Description TimeFormat Returns TimeFormat. Examples | Edit this page View Source Create(Func<TimeZoneInfo>) Creates a new instance of TimeFormat with a specified TimeZoneInfo encapsulates in Func<TResult> and DefaultFormat. The TimeZoneInfo is made as a func because, you should always access the local time zone through the TimeZoneInfo.Local (same for TimeZoneInfo.Utc) property rather than assigning the local time zone to a TimeZoneInfo object variable. Declaration public static TimeFormat Create(Func<TimeZoneInfo> timeZone) Parameters Type Name Description Func<TimeZoneInfo> timeZone The specified TimeZoneInfo encapsulates in Func<TResult>. Returns Type Description TimeFormat Returns new instance TimeFormat. | Edit this page View Source Create(TimeZoneInfo) Creates a new instance of TimeFormat with a specified TimeZoneInfo and DefaultFormat. Declaration public static TimeFormat Create(TimeZoneInfo timeZone) Parameters Type Name Description TimeZoneInfo timeZone The specified TimeZoneInfo. Returns Type Description TimeFormat Returns new instance TimeFormat. | Edit this page View Source Format(DateTimeOffset) Converts the value of the specified DateTimeOffset object to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. Declaration public string Format(DateTimeOffset dateTimeOffset) Parameters Type Name Description DateTimeOffset dateTimeOffset The DateTimeOffset object. Returns Type Description string The string representation. | Edit this page View Source FormatFromMillis(long) Converts the value in milliseconds since Unix epoch to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. Declaration public string FormatFromMillis(long timeMillis) Parameters Type Name Description long timeMillis The time measured in milliseconds since Unix epoch. Returns Type Description string The string representation of the date, or \"0\" if timeMillis is 0. | Edit this page View Source FormatFromSeconds(long) Converts the value in seconds since Unix epoch to its equivalent string representation using the current format CreateFormatString(), current TimeZoneInfo and InvariantCulture. Declaration public string FormatFromSeconds(long timeSeconds) Parameters Type Name Description long timeSeconds The time measured in seconds since Unix epoch. Returns Type Description string The string representation of the date, or \"0\" if timeSeconds is 0. | Edit this page View Source Parse(string) Converts the specified string representation of a date and time to its DateTimeOffset in current TimeZoneInfo and InvariantCulture. If no time zone is specified in the parsed string, the string is assumed to denote a local time, and converted to current TimeZoneInfo. It accepts the following formats. 0 is parsed as zero time in UTC. <long-value-in-milliseconds> The value in milliseconds since Unix epoch since Unix epoch. It should be positive and have at least 9 digits (otherwise it could not be distinguished from date in format 'yyyymmdd' ). Each date since 1970-01-03 can be represented in this form. <date>[<time>][<timezone>] If time is missing it is supposed to be '00:00:00' . <date> is one of: yyyy-MM-dd yyyyMMdd <time> is one of: HH:mm:ss[.sss] HHmmss[.sss] <timezone> is one of: [+-]HH:mm [+-]HHmm Z for UTC. Declaration public DateTimeOffset Parse(string value) Parameters Type Name Description string value The input value for parse. Returns Type Description DateTimeOffset Returns DateTimeOffset parsed from input value. Exceptions Type Condition ArgumentException If input value has wrong format. | Edit this page View Source WithMillis() Adds milliseconds to the current format string. Declaration public TimeFormat WithMillis() Returns Type Description TimeFormat Returns TimeFormat. Examples 19700101-000000.000. | Edit this page View Source WithTimeZone() Adds Time Zone to the current format string. Declaration public TimeFormat WithTimeZone() Returns Type Description TimeFormat Returns TimeFormat. Examples 19700101-000000+00:00."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeNanosUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeNanosUtil.html",
    "title": "Class TimeNanosUtil | dxFeed Graal .NET API",
    "keywords": "Class TimeNanosUtil A collection of static utility methods for manipulation of time measured in nanoseconds since Unix epoch. Porting Java class com.dxfeed.event.impl.TimeNanosUtil. Inheritance object TimeNanosUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class TimeNanosUtil Methods | Edit this page View Source GetMillisFromNanos(long) Returns time measured in milliseconds since Unix epoch from the time in nanoseconds. Idea is that nano part of time shall be within [0..999999] interval so that the following equation always holds: GetMillisFromNanos(timeNanos) * 1_000_000 + GetNanoPartFromNanos(timeNanos) == timeNanos GetNanoPartFromNanos(long) Declaration public static long GetMillisFromNanos(long timeNanos) Parameters Type Name Description long timeNanos The time measured in nanoseconds since Unix epoch. Returns Type Description long The time measured in milliseconds since Unix epoch. | Edit this page View Source GetNanoPartFromNanos(long) Returns nano part of time. Idea is that nano part of time shall be within [0..999999] interval so that the following equation always holds: GetMillisFromNanos(timeNanos) * 1_000_000 + GetNanoPartFromNanos(timeNanos) == timeNanos GetMillisFromNanos(long) Declaration public static int GetNanoPartFromNanos(long timeNanos) Parameters Type Name Description long timeNanos The time measured in nanoseconds since Unix epoch. Returns Type Description int The time measured in milliseconds since Unix epoch. | Edit this page View Source GetNanosFromMillisAndNanoPart(long, int) Returns time measured in nanoseconds since Unix epoch from the time in milliseconds and its nano part. The result of this method is timeMillis * 1_000_000 + timeNanoPart. Declaration public static long GetNanosFromMillisAndNanoPart(long timeMillis, int timeNanoPart) Parameters Type Name Description long timeMillis The time in milliseconds since Unix epoch. int timeNanoPart The nanoseconds part that shall lie within [0..999999] interval. Returns Type Description long The time measured in nanoseconds since Unix epoch."
  },
  "docs/api/DxFeed.Graal.Net.Utils.TimeUtil.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.TimeUtil.html",
    "title": "Class TimeUtil | dxFeed Graal .NET API",
    "keywords": "Class TimeUtil A collection of static utility methods for manipulation of time measured in milliseconds since Unix epoch. Porting a Java class com.devexperts.util.TimeUtil. Inheritance object TimeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DxFeed.Graal.Net.Utils Assembly: DxFeed.Graal.Net.dll Syntax public static class TimeUtil Fields | Edit this page View Source Day Number of milliseconds in a day. Declaration public const long Day = 86400000 Field Value Type Description long | Edit this page View Source Hour Number of milliseconds in an hour. Declaration public const long Hour = 3600000 Field Value Type Description long | Edit this page View Source Minute Number of milliseconds in a minute. Declaration public const long Minute = 60000 Field Value Type Description long | Edit this page View Source Second Number of milliseconds in a second. Declaration public const long Second = 1000 Field Value Type Description long Methods | Edit this page View Source GetMillisFromTime(long) Returns correct number of milliseconds with proper handling negative values. Idea is that number of milliseconds shall be within [0..999] interval so that the following equation always holds: GetSecondsFromTime(timeMillis) * 1000L + GetMillisFromTime(timeMillis) == timeMillis as long the time in seconds fits into int. GetSecondsFromTime(long) Declaration public static int GetMillisFromTime(long timeMillis) Parameters Type Name Description long timeMillis The time measured in milliseconds since Unix epoch. Returns Type Description int The number of milliseconds. | Edit this page View Source GetSecondsFromTime(long) Returns correct number of seconds with proper handling negative values and overflows. Idea is that number of milliseconds shall be within [0..999] interval so that the following equation always holds: GetSecondsFromTime(timeMillis) * 1000L + GetMillisFromTime(timeMillis) == timeMillis as long the time in seconds fits into int. GetMillisFromTime(long) Declaration public static int GetSecondsFromTime(long timeMillis) Parameters Type Name Description long timeMillis The time measured in milliseconds since Unix epoch. Returns Type Description int The number of seconds."
  },
  "docs/api/DxFeed.Graal.Net.Utils.html": {
    "href": "docs/api/DxFeed.Graal.Net.Utils.html",
    "title": "Namespace DxFeed.Graal.Net.Utils | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net.Utils Classes AttributeUtil Provides utility methods for manipulating an Attribute. BitUtil A collection of utility methods for bitwise operations. Porting Java class com.dxfeed.event.market.Util. CmdArgsUtil A collection of static helper methods for parses command-line arguments. ConcurrentSet<T> This is a simple wrapper over ConcurrentDictionary<TKey, TValue>, to provide an interface as a Set (.NET does not provide a built-in concurrent hashset type) for more consistent. DayUtil A collection of static utility methods for manipulation of int day id, that is the number of days since Unix epoch of January 1, 1970. Porting Java class com.devexperts.util.DayUtil. EnumUtil Provides utility methods for manipulating Enum. MathUtil A collection of static utility methods for mathematics. Porting Java class java.lang.Math and com.devexperts.util.MathUtil. PlatformUtils Provides information to identify the current platform. ReflectionUtil Simple utility class for working with the reflection API. Used to manipulate types. StringUtil Provides utility methods for working with strings. TimeFormat Utility class for parsing and formatting dates and times in ISO-compatible format. TimeNanosUtil A collection of static utility methods for manipulation of time measured in nanoseconds since Unix epoch. Porting Java class com.dxfeed.event.impl.TimeNanosUtil. TimeUtil A collection of static utility methods for manipulation of time measured in milliseconds since Unix epoch. Porting a Java class com.devexperts.util.TimeUtil."
  },
  "docs/api/DxFeed.Graal.Net.html": {
    "href": "docs/api/DxFeed.Graal.Net.html",
    "title": "Namespace DxFeed.Graal.Net | dxFeed Graal .NET API",
    "keywords": "Namespace DxFeed.Graal.Net Classes SystemProperty Native wrapper over the Java java.lang.System class, contains work with property getter/setter methods. In Java world, these properties can be set by passing the \"-Dprop=value\" argument in command line or calls java.lang.System.setProperty(String key, String value). The location of the imported functions is in the header files \"dxfg_system.h\"."
  },
  "docs/api/index.html": {
    "href": "docs/api/index.html",
    "title": "API Documentation | dxFeed Graal .NET API",
    "keywords": "API Documentation With dxFeed .NET API you can start receiving your market events writing only several lines of code: using DxFeed.Graal.Net.Api; using DxFeed.Graal.Net.Events.Market; using var endpoint = DXEndpoint.Create().Connect(\"demo.dxfeed.com:7300\"); using var subscription = endpoint.GetFeed().CreateSubscription(typeof(Quote)); subscription.AddEventListener(events => { foreach (var e in events) { Console.WriteLine(e); } }); subscription.AddSymbols(\"AAPL\"); Console.ReadKey();"
  },
  "index.html": {
    "href": "index.html",
    "title": "Table of Contents | dxFeed Graal .NET API",
    "keywords": "This package provides access to dxFeed market data. The library is built as a language-specific wrapper over the dxFeed Graal Native library, which was compiled with GraalVM Native Image and dxFeed Java API (our flagman API). ℹ️ If you already use dxFeed .NET API, please see the Overview section. ⚠️ It’s a beta version and still under active development. Table of Contents Overview Reasons for the New .NET API Repository Benefits of the New Version Milestones Future Development Migration Implementation Details Architectural Restrictions and Other Limitations in the Old Version Documentation Installation Usage Samples Current State Overview Reasons for the New .NET API Repository The old version of dxFeed .NET API is built as a thin wrapper over dxFeed C API, which has several architectural restrictions that prevent us from providing a state-of-the-art technological solution. Benefits of the New Version 🚀 Increased performance 🌌 Wider functionality ♊ Identical programming interfaces to our best API 👍 Higher quality of support and service Milestones Feature development has already stopped for the old version of dxFeed .NET API. We expect the new repository to go into production in Q2’2023. At the same time, the old version will be considered deprecated, and at the end of 2024, we plan to end the service. If you’re already our customer and have difficulty with a future transition, please contact us via our customer portal. Future Development Features planned with high priority: Add unit tests and conduct different types of testing Add necessary entities for more convenient API usage (IPF, TimeSeriesEventModel, OrderBookModel, GetTimeSeriesPromise, etc.) Provide more samples Provide performance test results along with a comparison with the old API version Features planned for the next stage: Implement a model of incremental updates in Java API and add it to .NET API Implement OrderBookModel with advanced logic (e.g., OnNewBook, OnBookUpdate, OnBookIncrementalChange) in Java API and add it to .NET API Add samples or implement a convenient API for Candlewebservice Migration To help you rewrite the existing API calls, we’ve prepared samples demonstrating how to work with the new API and how several functionalities are implemented. More examples will follow. The table below shows the sample mapping between the old and new versions. Our support team on our customer portal is ready to answer any questions and help with the transition. Sample Mapping # Sample Old Version New Version 1 How to subscribe to Quote, Trade, TradeETH, Order, SpreadOrder, AnalyticOrder, TimeAndSale events dxf_events_sample DxFeed.Graal.Net.Samples.DxFeedConnect 2 How to subscribe to Candle event dxf_candle_sample DxFeed.Graal.Net.Samples.CandleSample 3 How to receive IPF data from URL or file dxf_instrument_profile_sample Q3’2023, please see TBD section 4 How to subscribe to IPF live updates dxf_instrument_profile_live_sample Q3’2023, please see TBD section 5 How to subscribe to Order, SpreadOrder, Candle, TimeAndSale, Greeks, Series snapshots dxf_snapshot_sample Q4’2023, please see TBD section 6 How to subscribe to depth of market dxf_price_level_book_sample Q4’2023, please see TBD section 7 How to receive snapshots of TimeAndSale, Candle, Series, Greeks events on a given time interval without live subscription dxf_simple_data_retrieving_sample Q4’2023, please see TBD section 8 How to subscribe to order snapshot with incremental updates dxf_inc_order_snapshot_sample Q4’2023, please see TBD section 9 How to retrieve Candle data from the candle web service dxf_candle_data_retrieving_sample Q4’2023, please see TBD section 10 How to retrieve TimeAndSale data from the candle web service dxf_tns_data_retrieving_sample Q4’2023, please see TBD section Implementation Details We use GraalVM Native Image technology and specially written code that wraps Java methods into native ones to get dynamically linked libraries for different platforms (Linux, macOS, and Windows) based on the latest Java API package. Then, the resulting dynamic link library (dxFeed Graal-native) is used through C ABI (application binary interface), and we write programming interfaces that describe our business model (similar to Java API). As a result, we get a full-featured, similar performance as with Java API. Regardless of the language, writing the final application logic using API calls will be very similar (only the syntax will be amended, \"best practices\", specific language restrictions) Below is a scheme of this process: Architectural Restrictions and Other Limitations of the Old Version # Limitation How It’s Solved in the New Version 1 Windows support only. Windows-x64, Linux-x64, macOS-x64, macOS-arm64 support by .NET 6.0. 2 Single-threaded architecture limiting throughput. Based on the Java API, each subscription object (DXFeedSubscription) can run on its own thread. 3 User code in event callbacks (for example, OnQuote) is executed in the socket read thread, which can significantly reduce throughput. Socket processing threads and callback threads are separated. 4 In event callbacks, one market event type and one data portion always arrive (excluding snapshot subscription), which increases the load on the CPU with a large amount of incoming data. Event callbacks can receive different market event types, and more than one by batch. 5 It’s impossible to subscribe to data without getting regionals (if it is available for the market event) or only for a certain regional. subscription.AddSymbols(\"AAPL\"); - composite subscription.AddSymbols(\"AAPL&Q\"); - regional. 6 It’s impossible to subscribe to Order event (excluding snapshot subscription) without getting: all sources, Order by Quote (including regionals), Order by MarketMaker. subscription.AddSymbols(new IndexedEventSubscriptionSymbol(\"AAPL\", OrderSource.NTV)); - Order.Source determines which data is being subscribed to. 7 Data is mixed up when creating two subscriptions (regular and time series) for the same market event type. Both regular and time series data go to both subscriptions. Each subscription instance receives only the data requested. 8 Each subsequent request for the same symbol set in a subscription instance overwrites the existing one in another subscription instance. Subscription instances and the data they receive are independent of each other. 9 Removing a symbol from one subscription instance caused it to be removed from all others. Subscription instances and the data they receive are independent of each other. 10 Incorrect behavior when reading from a file (if a market event in the file hasn’t been subscribed to). Reading from a file always occurs at maximum speed. The supported format is binary only. endpoint.Connect(@\"file:tape.txt[format=text]\"); - processing a text file with at it's \"real\" speed by timestamps endpoint.Connect(@\"file:tape.bin[format=binary,speed=max]\"); - processing a binary file with max speed. Documentation Find useful information in our self-service dxFeed Knowledge Base or .NET API documentation: dxFeed Graal .NET API documentation dxFeed Knowledge Base Getting Started Troubleshooting Market Events Event Delivery contracts dxFeed API Event classes Exchange Codes Order Sources Order Book reconstruction Symbology Guide Installation Add this package source to NuGet config. For example, you can create a NuGet.Config file in your solution folder with the following content: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"dxFeed\" value=\"https://dxfeed.jfrog.io/artifactory/api/nuget/v3/nuget-open\" protocolVersion=\"3\"/> </packageSources> </configuration> Then add the DxFeed.Graal.Net package to your project using the NuGet package manager. Usage using DxFeed.Graal.Net.Api; using DxFeed.Graal.Net.Events.Market; using var endpoint = DXEndpoint.Create().Connect(\"demo.dxfeed.com:7300\"); using var subscription = endpoint.GetFeed().CreateSubscription(typeof(Quote)); subscription.AddEventListener(events => { foreach (var e in events) { Console.WriteLine(e); } }); subscription.AddSymbols(\"AAPL\"); Console.ReadKey(); Output I 221219 224811.681 [main] QD - Using QDS-3.313+file-UNKNOWN+mars-UNKNOWN+monitoring-UNKNOWN+tools-UNKNOWN, (C) Devexperts I 221219 224811.695 [main] QD - Using scheme com.dxfeed.api.impl.DXFeedScheme DH2FdjP0DtOEIOAbE4pRVpmJsPnaZzAo1mICPJ6b06w I 221219 224812.010 [main] QD - qd with collectors [Ticker, Stream, History] I 221219 224812.017 [main] ClientSocket-Distributor - Starting ClientSocketConnector to demo.dxfeed.com:7300 I 221219 224812.017 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Resolving IPs for demo.dxfeed.com I 221219 224812.021 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Connecting to 208.93.103.170:7300 I 221219 224812.170 [demo.dxfeed.com:7300-Reader] ClientSocketConnector - Connected to 208.93.103.170:7300 D 221219 224812.319 [demo.dxfeed.com:7300-Reader] QD - Distributor received protocol descriptor multiplexor@WQMPz [type=qtp, version=QDS-3.306, opt=hs, mars.root=mdd.demo-amazon.multiplexor-demo1] sending [TICKER, STREAM, HISTORY, DATA] from 208.93.103.170 Quote{AAPL, eventTime=0, time=20221219-223311.000, timeNanoPart=0, sequence=0, bidTime=20221219-223311, bidExchange=Q, bidPrice=132.16, bidSize=2, askTime=20221219-223311, askExchange=K, askPrice=132.17, askSize=10} Quote{AAPL, eventTime=0, time=20221219-223312.000, timeNanoPart=0, sequence=0, bidTime=20221219-223312, bidExchange=Q, bidPrice=132.16, bidSize=6, askTime=20221219-223312, askExchange=K, askPrice=132.17, askSize=10} Quote{AAPL, eventTime=0, time=20221219-223312.000, timeNanoPart=0, sequence=0, bidTime=20221219-223312, bidExchange=K, bidPrice=132.16, bidSize=10, askTime=20221219-223312, askExchange=V, askPrice=132.17, askSize=4} Tools DxFeed.Graal.Net.Tools is a collection of tools that allow you to subscribe to various market events for the specified symbols. The tools can be downloaded from Release (including self-contained versions, that do not require .NET installation) Connect connects to the specified address(es) and subscribes to the specified events with the specified symbol Dump dumps all events received from address. This was designed to retrieve data from a file PerfTest connects to the specified address(es) and calculates performance counters (events per second, memory usage, CPU usage, etc.) LatencyTest connects to the specified address(es) and calculates latency. Samples DxFeed.Graal.Net.Samples.ConvertTapeFile demonstrates how to convert one tape file to another tape file with optional intermediate processing or filtering DxFeed.Graal.Net.Samples.DxFeedConnect demonstrates how to subscribe various market events for the specified symbols DxFeed.Graal.Net.Samples.DxFeedFileParser is a simple demonstration of how events are read form a tape file DxFeed.Graal.Net.Samples.DxFeedSample is a simple demonstration of how to create multiple event listeners and subscribe to Quote and Trade events DxFeed.Graal.Net.Samples.PrintQuoteEvents is a simple demonstration of how to subscribe to the Quote event, using a DxFeed instance singleton and dxfeed.properties file DxFeed.Graal.Net.Samples.WriteTapeFile is a simple demonstration of how to write events to a tape file DxFeed.Graal.Net.Samples.CandleSample demonstrates how to subscribe to candle events. Current State Endpoint Roles Feed connects to the remote data feed provider and is optimized for real-time or delayed data processing, this is a default role (.NET API sample) StreamFeed is similar to Feed and also connects to the remote data feed provider but is designed for bulk data parsing from files (.NET API sample) Publisher connects to the remote publisher hub (also known as multiplexor) or creates a publisher on the local host (.NET API sample) StreamPublisher is similar to Publisher and also connects to the remote publisher hub, but is designed for bulk data publishing (.NET API sample) LocalHub is a local hub without the ability to establish network connections. Events published via Publisher are delivered to local Feed only OnDemandFeed is similar to Feed, but it is designed to be used with OnDemandService for historical data replay only Event Types Order is a snapshot of the full available market depth for a symbol SpreadOrder is a snapshot of the full available market depth for all spreads AnalyticOrder is an Order extension that introduces analytic information, such as adding iceberg-related information to a given order Trade is a snapshot of the price and size of the last trade during regular trading hours and an overall day volume and day turnover TradeETH is a snapshot of the price and size of the last trade during extended trading hours and the extended trading hours day volume and day turnover Candle event with open, high, low, and close prices and other information for a specific period Quote is a snapshot of the best bid and ask prices and other fields that change with each quote Profile is a snapshot that contains the security instrument description Summary is a snapshot of the trading session, including session highs, lows, etc. TimeAndSale represents a trade or other market event with price, such as the open/close price of a market, etc. Greeks is a snapshot of the option price, Black-Scholes volatility, and greeks Series is a snapshot of computed values available for all options series for a given underlying symbol based on options market prices TheoPrice is a snapshot of the theoretical option price computation that is periodically performed by dxPrice model-free computation Underlying is a snapshot of computed values available for an option underlying symbol based on the market’s option prices OptionSale represents a trade or another market event with the price (for example, market open/close price, etc.) for each option symbol listed under the specified Underlying Configuration is an event with an application-specific attachment Message is an event with an application-specific attachment Subscription Symbols String is a string representation of the symbol TimeSeriesSubscriptionSymbol represents subscription to time-series events IndexedEventSubscriptionSymbol represents subscription to a specific source of indexed events WildcardSymbol.ALL represents a wildcard subscription to all events of the specific event type CandleSymbol is a symbol used with DXFeedSubscription class to subscribe for Candle events Subscriptions & Models DXFeedSubscription is a subscription for a set of symbols and event types DXFeedTimeSeriesSubscription extends DXFeedSubscription to conveniently subscribe to time series events for a set of symbols and event types (Java API sample) GetLastEvent returns the last event for the specified event instance (Java API sample) GetLastEvents returns the last events for the specified event instances list GetLastEventPromise requests the last event for the specified event type and symbol (Java API sample) GetLastEventsPromises requests the last events for the specified event type and symbol collection GetLastEventIfSubscribed returns the last event for the specified event type and symbol if there’s a subscription for it GetIndexedEventsPromise requests an indexed events list for the specified event type, symbol, and source GetIndexedEventsIfSubscribed returns a list of indexed events for the specified event type, symbol, and source, if there’s a subscription for it GetTimeSeriesPromise requests time series events for the specified event type, symbol, and time range (Java API sample) GetTimeSeriesIfSubscribed requests time series events for the specified event type, symbol, and time range if there’s a subscription for it TimeSeriesEventModel is a model of a list of time series events (Java API sample) IndexedEventModel is an indexed event list model (Java API sample) OrderBookModel is a model of convenient Order Book management (Java API sample) IPF & Schedule InstrumentProfile represents basic profile information about a market instrument (Java API sample) InstrumentProfileCollector collects instrument profile updates and provides the live instrument profiles list (Java API sample) Schedule provides an API to retrieving and exploring the trading schedules of various exchanges and different financial instrument classes (Java API sample) Services OnDemandService provides on-demand historical tick data replay controls (Java API sample)"
  }
}